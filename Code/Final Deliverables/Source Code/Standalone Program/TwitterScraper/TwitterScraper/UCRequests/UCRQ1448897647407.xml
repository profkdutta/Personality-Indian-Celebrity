<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">Make   levels   pollution   health  time  government treated  like first breath  take  landing  Delhi hits  like  bullet      having that effect reached Many Venkatesh Kini hitting Dada  that shot over extra cover means that gets  teach already transformed schools  changed  lives  lakh Next target shame that girls drop   school because they have separate Join   help change that fight   NRIs  PIOs  best ambassadors  India  hence  major strategic Fight   someone chooses  leave  they still have  right  lecture those  stayed behind NRIs   focus after  overseas events  because  because  large number  Twitter trolls fight tonight   role  NRIs     politics   social cribbing about  this match could have been  thriller    displayed more application   innings Perhaps  should have thought  this before shooting down their series  against South Africa after more than  India take Pujara  Dhawan looking quite  what happens   those pitch Something tells  that will  trending  this rare that  test match looks done  dusted  lunch Aamir shouting obscenities    speaking  heart  saddens      only proving What  Islamic State should really keep  mind  that percent  Indian Muslims abhor what  stands Clues   found   writings  jihadi ideologues such   Management Policy makers also need  study what  ISIS gameplan could  they deliberately inviting massive retaliation Bombing Raqqa from     clear strategy  required  decisively defeat ISIS  what  stands allies seem  have declared    rest    France   China Bobby Jindal drops    presidential Tanned enough push back against extremism  Muslim says  President Barack Obama  terror   NDTV Sold  within hours  Getting further supplies  another sale First major exclusive     news  community  number  tech With  many memories   need  also remember that those  planned  Mumbai attacks escaped suicide bombers  terrorists   sadly those  brainwash  control them usually  away scot except that  Qaeda  Iraq     clear world needs   together  decisively defeat ISIS once Paris police says  attackers believed diversity   pride India   going  stop till  develops says  have been unnecessarily Cameron locking   British Indian vote   next Especially after Corbyn signed  motion  that long back Indian prime minister  Downing Street some predicts That would  payback Committed  Protecting Every  Modi India   Most Open Countries  Foreign Says  Modi changes  ecommerce  could  particularly Clarity  last  this  consumers could bang reforms  with major changes  Days after  Bihar  government sends  clear signal  means quite   agreeing with What will   national impact    policies  Anchoring  special show from Twitter troll  someone  claims  love  country while actively hating most   fellow Waiting  hear from   being said that  would weigh Nitish  with seats    biggest Rahul this   victory against  ideology that divides  country belongs With   having more seats than  Nitish will have  challenging moments Sharad Yadav tells NDTV that efforts  communalise  elections   tried  hold  tail looking crystal   alliance will   Bihar only  exit polls were  counting  confusing question will lead increase with later rounds  usually  shrink  remote rural seats come this both   Congress have  better strike rate than   within  Nitish taking Clear advantage    alliance  this stage   Well ahead very early Expect  rush  leads  about half Rank  notification cleared  Pension   equalized every  over lakh  benefit India  tolerant  always  Trolls  hatemongers represent India  never Absolutely  this   march  demonstrate their  tolerant     otherwise  will attack South Africa  Amla  need crore package  announces What  happening  India lose wickets   South Africa  their foot NDTV exit poll says that   likely   seats   alliance study    swept Bihar   point  that   ALLIANCE changes that question therefore  whether their support   also whether there   swing  favour alliance means that   voting pattern   elections  repeated they will NDTV exit Prannoy says there seems  have been  strong Manjhi effect  Phase sharp slide  relations with Nepal  China  getting  strong foothold that could   long term problem Nepal  Attacks India  Raising Human Rights Abuses   Meet furore every time there   spinning     worse than  Simply calls  different Just    selectors persisting with Shikhar when         batting well Revised after Bihar poll  exit polls shows   others   NDTV Exit polls  most  very perhaps with  edge  predicts  landslide Which     that Lalu  some backseat driving  Nitish does become average  exit polls   Mahagathbandhan  scraping through with   looks like  close Stay cool   them making crazy comments  Lawmaker Compares With Hafiz Saeed Disgraceful   Leader Attacks Shah Rukh  Heart what  said probably just missed    beer will  welcome give   full half  hour interview   months only  couple    GoCycle    quality     even worse than genuinely tried  cycle  office using  Delhi roads delighted  hear  campaign  have been running  several years because   reason girls drop Many happy returns     only  turns Have  great year Shame Lecturing   Tolerance  Riots   Congress happening   After Attack  Atheist Publisher Hacked  Death Islamic State Claims  Downed Russian Airliner That Crashed  Report massive  building  near  need  send someone fast fight  Castration  Should  seriously consider  suggestion made   Madras High know what follows   have  much Then Portable toilets another potential business  voodoo dolls  vent road There     business model   dropping food  drones  people stuck  traffic Manufactured Rebellion Says Arun Jaitley Remember  billions  dollars   that Musharraf  able  reel   claiming     against Here    feted   West   ally    against saying that  Laden  Haqqani were Good   India climbing   doing  need action  priority areas dispute knew     least  have finally Allow Castration  Child Madras High Court Tells Centre delighted  This   excellent initiative please either substantiate that claim  apologise  lying Chants     sporting considering  havoc being caused   South African Thank   your kind words about  Banega Swacch India Cleaning India remains  national attitude that makes children  Some relatives  molest mean child    more likely   raped  abused   known person than   complete Tonight   horror every parent should worry Rape  abuse   child   neighbour  family With Raina  Dhawan both    India really afford  play with  Batting looks Great  have  Defence Minister discussing issues with   stakeholders  front fight  Manohar Parrikar with heads  Lockheed Grumman defence heads  Bharat miss tonight  Manohar Parrikar   defence manufacturers    Fight   best path  defence interview with Boeing Chairman James What Boeing    what India needs dies  Himachal Pradesh after being beaten    allegedly   suspicion that   smuggling cows  NDTV They make     Super Hornet Boeing makes  fighter   assembles  Chinook  Apache  will    boost Boeing Chairman tells  that global CEOs  optimistic about India happy with    regime  dispute resolution need fixing exclusive  Chairman  Boeing tells  they  willing    state    fighter Dhoni answers   critics  fine Great   Makes   that close loss  couple  days Fadnavis Says Sena  Shamed Allies   Separate Contest Dear Shiv Your actions today  blackening  collective Powerful signal from   washing  before  press such cases should  condemned without selectivity India  usually been among  most tolerant places   planet Going will  fringe become  will liberals    ones Fight tonight    losing  traditional ethos  tolerance     social   fringe actually  blocked anyone  check your facts tolerance  other  tolerance  differing opinions  tolerance  cricket happening  some what part   phrase have    word  reasonably youth    they want  this   they want development  progress  peace Will have  come back   couple  months ever That  more Waiting   snow    view  breathtaking best mountain resorts anywhere  right here going    long   will  great  India  establish early dominance over South many more massacres will  take    accept some sort biggest story    drop   numbers   very says this partnership illustrates  growing importance    media Digital leadership deal between Taboola    next probably  biggest digital deal   India Read   have condemned Saudi Arabia  dozen   country   Saudi  should  become Inside   Deadliest Vishnu  should write That could  First clear indication that flowing water exists  says  space agency NASA  NDTV Modi Breaks Down  Facebook Townhall While Talking About  Mother After Townhall   Modi Heads  Live Updates really  news   living     some   most polluted cities They will  graphics till Peace  prosperity   prayers  those  died   stampede  Mina Where  need  back   office tomorrow main star though Silicon   spot   companies   mainstream Growing Indian influence This weekend becomes  first Indian  star   mainstream American Delighted  have  partnership with FabIndia  Indian  great Indian looking forward Fantastic road from  Hitech City  Hyderabad Good infrastructure  such Helping with informed decisions   building  gadget what  your  picks   Gadget Guru What should   Gadget there apply this logic   that  Indian Ocean that  target   have been Western   still think their latest cartoons   very Please  work   citizenship they   Congratulations best report  read when   suspiciously  passenger  adjoining Dear   sure  persuade  consider Indian  Olympic medals Well done    another Grand What Tying themselves  little  this drowning someone   they died when wish  would give more mind space  fixing infrastructure  less  sundry Global mobile conference  Bangalore Mobile signals  Power  wonder what global guests Live photos sound like  magical pictures  Harry Potter would touch  something that could potentially have  massive impact  user Apple  seems    good step   wonder whether   this content will  available future      risk   users   NDTV  already knew there   good Microsoft executive being called  stage   Kejriwal    National Steve Jobs     they blew Apple Pencil   last there   stylus   Long speaker sound system   iPad   hour battery   smart  case  want  ditch that iPad   inches Great  movies   will people carry around something that biggest news  ipad since Busy hours   tech Apple event tonight    mobile conference  Bangalore tomorrow should  what  traffic  Bangalore  Just done  Each took Surely    case that gang rape  take place     police allowed Charges need  investigated     curious  diplomatic immunity will play Larger    relevance  reservations  many years after Should  find other Fight   twists  quota Should Patels  Should there  affirmative action This  very interesting heartbreaking image that could shake  world    Rest Opinion piece   Friedman    should worry more about Saudi Arabia than Iran major step  hinted  Jayant Sinha     days Markets should amazing what   termed  these fated land ordinance  Never understood   government wasted  much political capital Sheena brother Mikhael tells cops    Mumbai      last claims threat   sources Aurangzeb Road being renamed  Abdul Kalam Marg  well  down     most welcomed name this  Balochistan connection Pakistan keeps going Finance Jayant Sinha tells  that India  already   nothing  worry Full interview This list should   cause  huge Looking  Send Heading    experts  join     find solutions crashes soon after Black Monday just Black Monday   Indian stock Something   blame China main Vasant Kunj road  feet  water   flowing Usain Bolt does  Beats Gatlin   World Championship typical What  said  that ISIS   horrible  almost makes  Qaeda seem moderate fight tonight      horrible  does  pose  threat    lead Frankly   longer surprised  anything that happens Manisha nails     blogging instead  fund   What great that India  doing more  help   best   understated about Otherwise  impact priority should   develop  eastern  parts will also  debating Kancha view that British rule actually emancipated  Dalits  backward miss  special Independence  edition    Fight    impact  British rule   question miss Operation Everest tonight been India would have probably  this match with Point   BCCI please stop playing cricket  Ruins Main points from horrific account   ISIS enshrines  theology when crucial Bills  boost  economy become political movie that riles Hafiz Saeed  much deserves    tickets where  that justification  wrong steps   party  this  wrongs make Surely Pakistani authorities  find Indian  Force Sukhois Dominate  Fighter Jets  Combat Took     Caught hope  rest   life    less  Doing Says Captured Pakistani Terrorist Every Claim  India About Backed    Headed  Probe Naga accord  bring down  curtain    must push even harder    alienation   North Naga peace accord potentially resolves    longest running internal government  more  less going back   Land With     Attorney General Mukul  Maseeh Prashant Fight   aftermath   Yakub Memon   need  rethink  death Mumbai  Delhi  among  cheapest cities  live  across They came from even    Kalam farewell claim  fame  that  stole nuclear technology  proliferated  remarks   Kalam should  treated with contempt This could many government offices taking  holiday because   demise   This  specifically what There  many state  rarely    such  outpouring  genuine national here  something     memory   Abdul Here  another powerful message that  tweeted   days tweeted this just days  could took this   official brought  human touch  Rashtrapati  Abdul Kalam will  remembered  that  addition   role  building  missiles From Gurdaspur  been  rather awful will blame essentially that india     most prosperous countries   world before  British destroyed  economy always seem that  there  been  sharp rebound  post thesis     online  maybe should scan origin  mass poverty  India lies  British   riled  months    after reading  paper  father  done seen   brilliant speech   Oxford Union  British After this have become fairly adept  flying  Phantom   heading according     freely  crosses justify calling   deeply offensive    first Never mess with Especially when  comes asking questions  absolutely Relentless baseless haranguing makes protecting corridors  forest cover  next  task been from  Please Encouraging trend tigers  beginning  migrate  from places with high numbers like Need  keep corridors both need   protected enjoying your role    that  full details have always been available thank   much   your efforts  have done Dear   small Your voice    factor  making  campaign Next task   work  improving forest   should  proud  what  been special programme  Save  Tigers  NDTV India right   NDTV  Delighted   success  this many happy Wish   Green  Swachh year surrounded  lots  girl Lots   other wrong with accepting  Better than firing happiness  year point  that   commercial shot most  this week from  drone Great have    Phantom drone that   reviewing  Gadget Guru this Much Those wanting info  images from will have   very  couple   tomorrow   full data could take This   final frontier   Solar Historic taking place right suspended   many   would have expected system     wrong   profile   glare     imagine what happens Avirook book   Aarushi case seems  confirm what many  There could have been  horrible miscarriage yeah  there  riders  that Dear   persuade   consider Indian  Olympics  coming  medals Indian summer  this Great triple from  Thanks lion numbers  actually doing very agree wireless audio headphones have  great about spotted deer killed  flash floods  Gujarat chance  make   Indian double  doubles when  pairs  with dramatic fight back    final   take  Well done Sania  Hingis take  second Down   third wait  justice    many other terrorist attacks Those   afford  send their kids abroad spending billion dollars  What   others someone  gets percent after years  rote learning necessarily  best crazy college cutoffs creating  generation that  only geared   What happened  true fight tonight   what       college  university miss    have what happens when  take accepts  demand    inquiry says  will   High Court This  potentially  huge discovery This  becoming  Found Hanging  Opposition Alleges Another Vyapam Dear  This   natural Please take pride These references   over  This seems   Greece  voted  jump     hope that someone will hand Journalist Covering Vyapam Scam Falls  Dies China  regret this  there    attack China Blocks Move   Against Pakistan been true  most  India  taken   influence   world  come from economic  soft Indian food   doing well around Wishing   best   launch  Hope    same impact  Immortals able   through anti missile Confirms Test  Supersonic Nuclear Delivery Fight   Myanmar operation excellent work done   Indian army  Myanmar risks being eroded  media  political chest Pakistan  pray tell    that  chase terrorists  Pakistan  Bangladesh After Manipur  Narendra Modi Ordered  Union Minister Rajyavardhan Rathore  NDTV militants could  Army Targets Militants Along Myanmar Border    With  Force Cooperation  take  terrorists should    factor  good relations with Sounds like effective  decisive  good that Myanmar Army Conducts  Near Myanmar Sources  Militants Behind Manipur Ambush Killed Comedy   reaction  Apple Engineer Talks about   Macbook Superb play   from What  incredible forward line they Excellent relations with Bangladesh  have major implications   North  most ignored ties have been   upswing   hope  Boundary Deal becomes  catalyst   total those  NDTV  Wants Revenge   Governor   Polling Arvind Kejriwal according  meeting  Indian Prime Minister makes    polling hits back  after  NDTV interview with  biblical This   epic what  earth   talking    stop massacre  Manipur   stark reminder that  need  give  North East  more attention than Those  hostels across  country must  wondering  they will feed themselves think  other sports bodies that could  with resignations  sweeping Blatter finally been  long urgent better than  around Centre   squabbling aside  take urgent measures  allow citizens  breathe Given  levels   asks whether   unethical  bring  kids  that serious slightly account    dangers  living  Delhi should   wake  call Interesting sidelight  years   almost stopped anchoring    Arnab convinced   keep Bhishma Although      would associate with  flowing white remember  quiet  sophistication   show before tech changes  these years that  been   have been Bluetooth years   look   show from will still fight   Also featuring Shazia  Kamal Mitra Chenoy  Kiran Walia  constitutional Fight   there been  much fighting   first days    government   little fight tonight     Fight This  becoming  excellent very happy birthday    getting younger    will soon  back Delhi govt needs  realize that  Fights  best watched  They were elected     clash after good Thinking about Asking    help train Afghan  that they  then fight  sponsored  does that make Afghan efforts   Pakistan     unlikely  have  happy Appeasement rarely there  never been  time when  display that pride have always been proud  being   always will pure lawyer they already   Additional Solicitor Eventually  send anyone when    represent   this   understand then    decision whom they call  lawyer Mehra wont  into  slanging match    wanted   representative   latest fight  there   perception that courts give timely  this leading  trial   media Twitter fight     social media ignoring principles like till proven Fight  delayed justice   courts  instant verdicts   channels   social  both equally Selfie Diplomacy    Rage  China answer     know that unsubstantiated allegations were   which fact  base your because  that basic tenet  journalism that  never carry unsubstantiated Each your last paragraph  very much  based  wrong   would have learnt    checked with BOTH wrote seem   making  allegation       check with your last When  make judgements about what  remarks were without either hearing them  checking with read last    conclude what   objecting    remarks without either hearing them  checking with does this  know what  response   what  said     even check with which     exactly what  asked Nikhil first tenet  check both sides    carry unverified expect know what remarks were Were       even check once Hardly   that mean  comment when  raises  good this  sabbatical  have something Would  interesting    much land  lying with government depts    used Relevant question raised  what percentage  projects  really being held  because  land   only This quake  less powerful than  last   need  wait   assessment  damage Follow updates Earthquake Measuring Tremors  North Epicentre Reportedly  Nepal there    wrong Delhi Traffic Building confidence brick other high profile cases coming    stars seem well they also have  right programmes running Some domestic flights from Mumbai  already running wait   rest Mumbai  probably  best looking airport   world right told   were taking   right This   year long policy nothing   with    general  anyone   ever come have  intention  getting into  spat   never carry unsubstantiated allegations about parties told   just carry allegations without  substantiation  voice from other side whose guilt  still    often locked away  years with people having liberty till  final decision  their   should apply across  board Bail till Friday  Salman Short term relief hope  Bill gets through  Rajya Sabha  should have  excellent impact Sensex  down points    when    most awaited reforms   Bill passes Live Actor Salman Khan Found Guilty  Culpable Sentenced  Years  Prison Media  Accepted   Finish Says Delhi Chief Minister Arvind must read these crucial comments    Tabloidization  Indian Indira Gandhi International Adjudged Best Airport This  Punjab Teen Dead After Being Thrown    Arrested Sharp  from  least  know where    when  travels this  only Those comparisons have been coming  years think   really exciting prospect   perhaps  should spare   comparisons Pakistan Prime Minister Nawaz Sharif calls   condoles  loss  lives  earthquake  NDTV long  Miliband also knows some lines someone  Pakistan sent beef  Nepal  relief they  either insensitive  Perhaps British     Cameron  cool Some good news After being trapped under debris  woman pulled  alive  Indian rescuers Yemen   Nepal India helps evacuate nationals  countries from Nepal iPad   shortlisted  Webby Honorees roll   Webby Awards First Came  Then  Avalanche Struck  Everest Base Recounts NDTV Team from  those   Million mails posted   public wrote  TRAI       mercy  every spammer This  Trai Releases Email Addresses  Over  Million Indians congrats Where searching  amazed  govt Thank army  told generations  Nepalis have given their lives   Indian time  honour that debt Richter scale Epicentre  fresh tremor that  Kodari Manish Kumar reporting from  ruins   Dharahara  much history lost Control room twitter Email only referring  Nepal government deserves full credit   foreign policy With nearly dead   excellent effort  Operation Maitri  need   stepped  even pain   pain says   India   only country really   position tragic Devastating Nepal Earthquake Kills Over Including More Than These horrible images make  clear that considerable help will  needed  India must take  lead Home minister tweets there   preliminary reports  damage  North Hope NDTV Prime team near  Everest base camp   were thrown about  have  couple  minor Some reports   avalanche near  Hope  climbers Reports from Nepalese family members  home  office staff suggests massive damage  their property  native Pictures  buildings damaged  Nepal after  massive earthquake Live updates   earthquake Still waiting  more information Another voice  courage silenced  Pakistan with  murder Ashutosh Tells Side   Story  Death  Rally Obstructed  Delhi Police  Refuse  Join Kejriwal Government wonder  cricket fans    countries  reacting   stunning whitewash  Pakistan take  Broadcasters made that Just   hours left   mail TRAI   already done Lots  unanswered Farmer   Suffered Major Crop Says Family farmer suicide that shamed Tonight   tragedy     politics that With Sachin Sambit Farmer From Rajasthan Hangs Himself   Rally Must watch  NDTV expose   shameful sale typical disgusting   check   marks   previous children  missing every hour   children   missing  never Kailash Satyarthi surely    best Just asked Saurav Ganguly      coach   Indian cricket  said news about Hard hitting investigative stories have begun  disappear from   watch expose Maneka Gandhi tells   office  cleaned with disinfectant made from  Asks    could smell this   first ever That counts thank   much Maneka Gandhi exclusive interview   right Fresh Rahul Gandhi made valid points   Chief Sitaram Yechury Just interviewed Maneka Gandhi   Nirbhay dowry  slaughter   said    first full What will happen another Buck Stops with  once again this   temporarily step back into   Good most  them  need  Tolerance   decline rebuild  Sitaram Yechury    Chief After Veteran Withdraws From best   ensure  armed forces  effectively   equipment they need Defence procurement gets mired   ultra cautious governments simply  Both fight tonight   Rafale deal  Have years  indecision weakened   experts join Stunning film  Shonali with  awesome performance happened  Delayed seat  total chaos  boarding many thanks  NDTV    watch  absolutely being back  World number Great  have both Where   apply    Also need help  finding  good reason India  potential  make  cent growth rate says Finance Minister Arun Jaitley That Most Church Attacks  Will Media Tell Truth Arun Jaitley  NDTV Modi with  push   bastion  high quality manufacturing stressing      together with  remains   concern  foreign NDTV   Your Apple This should    your first downloads Azlan Shah India   bronze medal after beating Korea  penalties Match  ended  regulation time Maybe  Saeed      away with club    busy planning another confusing  with another channel Spare  thought   victims      planned their murder walks NDTV Launches Lighter News   Download Trapped After Hundreds Evacuated Standing ovation  What    Good innings   World manning  lift said should have been This    walk   Crowd chanting Aussie Incredible field  this stage   match when Clarke exactly  same   chase   World   early wicket  then  batsman whacking There   certain history with  World This over  undone  entire recovery Decent recovery   Aussies   crowd  worrying about  damage that   done   last present forecast says   Australia   chance  lifting  World always  feel that  Zealand could struggle  unfamiliar conditions   huge  only   played better Dear Indian cricket Wish  were fight tonight    have  sense  Should there  checks  balances becoming World  reminding  again that there  life beyond Sydney match marks  beginning     outrage then   have been  total Best Congressman  Never Opinion piece Till  thinking   first  interested post emergency from  time    Emergency  think much Atalji   first politician  ever admired   life   only Glad    Bharat India  still rebuilding after  retirement   many great happen  ready nothing   team   ashamed Played well above potential before meeting  very tough forgot South Africa think  verdict will  that India  well  this World before running into  superior Indian fans leaving      first time  ground looks Aussie There   difference  losing   losing sure they will play that Virat Kohli This    like India pulls      runs with  much percent  this  crowd  really  rest sitting with glum Some relief  long  please  Maxwell Indian fans have been   subdued   last half  Still    cricket Some heat   stands  that Some face  face Indians thought     sadly  Aussies What score   chased down  this Given  pressure   semi goes wild  Warner gets  would think this Blue wins when  comes  numbers semi final     best days   Hope  result   same this told    take leave    Sydney  national excuse   using   very little work done Sometimes honesty   best Having played  their matches  small home  Zealand   find  that easy   huge  with  hostile balance  think India would prefer  play  Zealand      past have  feel sorry  South Africa  happened What  miss     greatest athletes  cricket   just under Striking down     also need  prevent uncontrolled spreading  slander  inflammatory content Full   unofficialy  first person  take advantage   decision Dear   going  Home match    spinning track will call   Australian cricket lovers  paint   gold   need your Hope they come true  reasons  India  Aussies  their  backyard kangaroo courts  becoming  print  social best four teams went West Indies will need  Gayle   storm  even that starts  pack  those  another should   lottery ticket Could paper  tougher  playing brings added Snap Which country should India prefer  play   semi Bangladesh should  proud  what they achieved   World Same goes  their huge India bowls   opposition  times  matches  this World Another great catch this time   Indian fielding  been simply superb this World eventual score  triple what they  after They doubled their tally   last Great  promise  personally troll those  troll    next More than balls since   singles drying   enjoying this   outright  should  ashamed  circulating Offensive character assassination  sadly becoming   common    absolutely  facts Goodbye     legends   This  farewell they would have hate  point    Ireland knocked   Bangladesh knocked Good that   some quality time   Could prove crucial India undefeated  group  extend  streak  wins   Need  make FINALLY Indian fast bowlers discover  power  yorkers  tail Better late than thanks  finding  tweets that show   raising this  back What  happening  McCullum  Williamson both Should  start thinking about   quarter Have long believed that countries like  Mauritius  Maldives could  strategically  look   atlas shows good   India finally looking  build strategic assets   Indian Ocean Crucial Bangladesh pulls   upset against  then India plays  Lanka   them   quarter Strategy  needed  Rajya Sabha Land Bill passed   AIADMK supports  Sena abstains from India  that target without even moving into fourth This    second best winning streak  World inside story   mail trail read this  most effective   eliminate procrastination India  Bangladesh  quarters assumes  Lanka beat  beats Bangladesh  India wins  least  more India  Bangladesh quarter England knocked    World have  shout   Silence  speak Lanka  able  pull     could mean that India have  face    favourites till  finals never Govt asks channels   show fall  Indian wickets  protect image Fight tonight documentary film jumping    this Hilarious that  Indian  against Ireland will matter more  Pakistan than  Time  wave  tricolour across Hilarious letter  rejection  driving Twitter crazy Sounds China Blocks  Access  Documentary   Pollution Thank  This seals position    this even  there   shock defeat Just imagine  many people will  cheering  Bangladesh   match against Great Captain Quarter here What   with West Indies  chases  around  World Indian fast bowlers bothering West Indian batsmen   bouncy Happy Holi      year  filled with Life  black wish they would first watch     facts disturb  good When  outrage industry watches NDTV   they will feel rather Should watch  programme before watch  Outrage industry will look South Africa probably   best line   this World Warning  those  have been writing them working hardly   phrase   searching things India  likely  play England   Quarter  Australia   Semi Barring fresh Fight today    Budget From    government industry    aadmi join Addition deduction   pension Higher rebate  health Steps   social Service  rate goes Wealth   additional surcharge  super rich Major crackdown  black have     will  implemented thriller   match between Australia    wins which could mean India runs into    semi Corporate      over  period   exemptions also   Begins from next Universal social security  very affordable insurance   Excellent funding  Could   better   remove inequality than doles Cool feature  like  dislike each individual highlight minutes into  speech   have already heard       ground breaking reform That explains Looks like McCullum  very keen  finish  work  catch Arun budget what   Zealand doing   other favourites Australia special Budget  could      NDTV Profit   NDTV NDTV Prannoy  interviews Chief Economic Adviser Arvind   LIVE updates  NDTV After  whole   internet drama over   never again trust your eyes with photographic Economic Survey hints   possible  Bang    Number trinity  replace subsidies with direct Something tells  South Africa have just  their confidence Snap   like  Railway    implemented studio   today  take  look   Railway Budget  what  could signal   main Budget speed  some railway corridors   increased       trains without fresh Good    number  steps     differently   must improve facilities Train saving journey time within next Improving cleanliness   Railways  much needed Without Swachh Rail  have Swachh proving    good World       Hope Congratulations Afghanistan   incredible victory over What  chase   never stopped Rahul Gandhi  Cancerous   Opinion piece Sticking Points  Billion Rafale Fighter  Deal well beat Ireland  this What  fascinating group this  turning fours  sixers   last balls that Chris Gayle  Strike rate Welcome First  Indian    double century Once  gets Chris Gayle   most destructive batsman ever  terms   sheer brutality confessing  match fixing editing   probably  serious great double this India beats South   beat   Gadget Guru cricket Party Even  edit  public defeat into     send   link this  without getting   Where   video   match positive surprise  India   first  matches   World   been    looked really World  jinx against South Africa Mauke victory  India against South Fantastic performance against remember India dominating South Africa quite like this Almost like Germany India  beating South Will soon share some good news with NDTV forecaster says that India    chance South Africa down   last   their  Mauka Mauka    Indian What  brilliant performance  Afghanistan against form  India would only    every matches against South Maybe  should save that   knockout Will Work Readily With   Writes Nitish Kumar cricket showdown this week  between    Gadget runs thrashing  Pakistan   West Quarter final spots  this group could  open  question Worrying  Lies Spread Faster Than  Study  Viral Zealand humiliating England Scotland could   with bragging They have  concept    Test cricket   become  truly global need more exposure  international They  keep surprising What  performance   associates  been  highlight   Good   spread Excluded  Must read opinion piece  Malini Chib that jibe irrespective    views virtually identical said exactly what  have been saying    agree with timeline  today   perfectly acceptable summary  what secularism  should read  take words need   followed  decisive action against anyone breaching this Then    focus incitement  overt  from majority  categorical  exactly    should words  Need action Important  categorical statements  religious tolerance from Hope fringe elements Third World     that Ireland  produced something Wish they   play more international will still  anchoring friend  colleague moves  Consulting NDTV Group there   public televised auction there something faintly cruel about  Great players being sold remaining like being smashed    those posed Barring  those crackers  going back into India could have    still  good score   tense Over guys  cricket Pakistan violates ceasefire again   troops open fire    post   Pura South Africa scored more from this match Highest score    World    this   excellent South Africa scored more than  hundred runs   last overs hope India still    motion   bandwidth upscaling from Come  Make    World Special Cricket Show from Mysore this   external auto generated link   Thanks  Will  removed Fight tonight together with from both Delhi  Islamabad  Miandad  Srinath join points  there really   criminal conspiracy  make people Good   Twitter  First  slamming  Modi  then  personal wishes  every Indian Delhi needs them  work well together  chai  charcha   Kejriwal   Modi should clarify Swachh Bharat Abhiyan does  mean  clean sweep flash    NDTV  singing amused while  other panellists were Coming   Prashant Bhushan  others face  audience   Delhi voters  gave them Heading into  studio   take     audience  Delhi residents comes   explain their Sessions   Delhi assembly will  like   party this stage will  bribery    First exclusive reaction from Congress  leading  ZERO   state  ruled till  year What crosses   Well past   thirds majority After  another time  consider  bravery award  Cong spokespersons  have  somehow find Both    four times   tally  heading   historic Leads still awaited   needs just more   half starts  pull away with seats  opposed leads       early position  rather each    Cong leads  Kiran Bedi leads    dropping  seats then will  that  stay   Political news will stop being  Modi office  Delhi tracking election results  NDTV Vijender Gupta    leads   first lead  expect  rush  trends over  next Many special guests will spread awareness about joins   NDTV  does Join  from noon till      understand  prevention     experts   field join many people around   being diagnosed with causing What    about Cancerthon today Battle    Fight special after  exit polls says there   more running  come with  bottle exit polls underestimated  overestimated  Congress many exit polls capturing trends till   will  hoping that their voters came   numbers after Fight  with  latest from Delhi  will also have  updated Poll   Exit Polls with  latest This  poll  exit polls    ahead  poll  exit polls    Congress exit polls only after  would Civic duty Took more than   there  still  long major candidates  this constituency have  same surname Thanks laconic response from others   queue when     likely Getting there  Another Given that this   third election  Delhi    turnout   wonder what  final figure will While    allowed    Twitter suggestions  whom  vote waiting patiently   queue along with everyone  about Dear polling   have  anchor  Fight   Delhi elections    would  good   this done Totally revolting Islamic State burying children alive  says United Nations will    contenders   Delhi  before     just mean seems   just  cable     sure Hopefully will  resolved level   pollution  Delhi   frightening that   astounded   major election NDTV  available  most cable networks      your cable  blocks NDTV  call  shift Islamic State claims  have burned Jordanian pilot releases  video Hilarious take    jargon  throw Jaguar  Awarded  Most Beautiful     Festival Automobile International that     want  everyone should  able    with zero exactly what   trying till then  agency says  send agency said  send  cylinders unless  fill   Should  simpler then   agency says  send Nothing doing nothing should work Please visit agency says  will have  submit  bunch  Surely  should  simpler    thanks want  take    procedure  declining  accept soon   writes Another week that underlined  rise  Modi   slide sacrilege  Burning   stake should This   week when Modi  another  moment   world  also debate what  Obama visit implies  India Fight tonight  what does  Jayanthi revolt mean  Rahul     slide Wins ENBA Award  Best English Website Third Year This format virtually ensures  quarter final Having said that getting   quarter finals  After down  three knock  matches where anything That  moment when  finally admit  yourself that India really likely  defend  World Says Ravish there  always  range  opinions   Everyone  equally entitled  their Dear when  land  Saudi Arabia please  raise  There  lashes Does   anything  heard fail   even remotely objectionable  remarks Surely these  truths that define think Obama brilliantly underlined  factors that make India great especially  Hope India will  succeed    splintered  religious strength   diversity  what makes  world  must   divided  sectarian  religious every nation should  judged    treats   wonder   will repeat that later     Saudi directly asks  people  India  help fight climate Also speaks  need  respect thought   would  tired     another speech between represented  Common  long before  term  Aadmi scale   dreams  huge     opportunities that India promise   make India  much better place    says that confidence  India  high Heading back   studio   business      will address CEOs Heading into  studio   move   next phase   Obama visit business  economic When     tanks used    favourite part such  grey   Republic   guess  that  pollution  Americans were concerned about will have been washed Live India Celebrates Republic Obama  Chief Guest There   steady drizzle right Will  rain  first Indian hope there  some progress  climate India   very justified  needs  help with John Kerry speaking      tackle religious wish  come  Davos  think there would have been huge Maybe next debate  next decade starts   tweet  your comments with Will    screen Last year  hall  half empty   debate  This year   fully signed  days What  difference  year  make  Last year total pessimism about this year total NDTV   only Indian channel    show  part   official agenda  Wish debate   future  India   panel with Chanda Hari Spectrum will  like  Governments  able  license cost broadband   greatest public  transforms economies  Consensus What  Microsoft  Vodafone   future panel  American CEOs with high hopes from  Obama They felt   must treat India Amazing optimism about  India story once again  hope Gore tells that global warming   stark   good news  that   ahead  targets  renewable India    will    theme always great when lends  voice    country many thanks    collaborative effort  which  tried  play agree     great turnaround  just many thanks  state govts  excellent work When  launched  campaign some years back there   real concern about   such  relief most outrageous innings ever played   cricket After unofficial book  Sonia Gandhi finally   India feel many   Charlie Hebdo cartoons were    offensive  these extracts lawyer would know better    think there   Bigger issue could that warning  centrally received Makes       good Uber rape survivor hires  York lawyer   company others take Good wins Best News Website  India Digital Awards this  nothing   with Islam    would have  same view   government  giving someone stand    face  Then  oppose Boko wife says     able take further  faces more lashes with more interest rates welcome  somewhat hope  sparks  manufacturing tell     switched    will shift   which could   better choice need  call them Here   statistic  note have killed more people than ISIS sympathisers hack into  Twitter   hope  launch codes   more Amazing scenes Defiant Paris begins historic unity march against terror thanks  coming Always good  have     suspect this debate will just checked with They were  over time    trim bits  Like Kept does that mean  course some back THIS  some mishti Murder  violence  clearly  should there  some boundaries  free  where should they Fight tonight   freedom  speech Please tell   going    Adelaide action neither     still consider lashes That  horrific dont agree with that violence either There will  lashes every Friday  weeks  Arabia should  ashamed barbaric punishment  Saudi liberal writer Received  first prolonged nature  this terror attack  starting  remind Lucky French salesman  with massacre suspect What would  your choice  confronted  child Silence  powerful  show Mohammed  Every Cartoon Exceptional piece   colleague Mohd course  Actually this rewind   worrying many thanks especially  getting News packed World  team  stock market focus should   Anyone with sympathy  this government would like  keep controversies  NDTV People have  right   peacefully  without Govt  made  position season Homeland slams Pakistan     sponsors  There will  applause  India Season  Homeland  quite Much better than  last  seasons  definitely worth remembered  economic growth    loony remembered   year when India retained  World very Happy  Year    hope    major positive transformation reports   marriage  greatly Indian test cricket could  enter   under   should remember  always been clear   while that   more comfortable with  limited overs both   captain Leave when people    when they Sudden  dramatic decision   retire from Test What   make Mahendra Singh Dhoni  retired from Test cricket with immediate Virat Kohli  lead India   NDTV Floating Luggage Spotted  AirAsia  Reports Tragic year  aviation Indonesian officials tell local  spotted near site where AirAsia plane Surely this  safe Just overs  wickets  says   about  quality   Indian tail that   still nervous about Hole   Heart   Family With overs     impossible   draw  eminently possible   batsmen  their heads  will crazy sessions  That could   being  difference between winning  losing Dropped     next ball   silly    protest this continuous misuse After such  lovely   please tell     heading  another Best   Fight this evening   highlights Here   Apple list    Apps Merry Christmas       happy given  prolonged festive January  probably best spent great things about being Indian   extended festive Durga Christmas  then person  great perception    nominate    agree sadly  that kind   This tell      left  with    again   last with   What   scenarios   will      national could potentially support    Mufti calls There   crack open  both tying  with   says   sounds relieved that  result worse than want    This will Interview with   gave Mufti everything   plate   should  disappointed with Choice  Congress  ideology  greater acceptance among core   deliver more from feeling  that     manage  numbers with    prefer that well ahead    will need    present numbers either     Congress will slipping    Will     majority     will  need only certainty today  that there will    government    clear Given present  rule   alliance   that   list What  fascinating election  Twists  turns every  Lovely   discussing alliances instead Trend      Cong Sudden change   just National Conference surges  catch  with Trend    about  mark   hung with  both crossing  Cong Looks like  hung assembly   this    question  what  post poll alliance will single largest party  this point    number   Congress  picking  some those were allegations  rigging     shows  major shifts that  taking place Hina Bhat leading  Amirakadal   would   stunning result   holds   that WOULD   Watch what happens when  boil  iPhone With  many clues  Mumbai attacks could have been prevented with proper  hope that lesson  been side  know  popular   from   article  appears  Lashkar uses Dear Pakistan  read  latest  investigation   Mumbai  will help answer Fight coming    NDTV  Pakistan  whether  will  change  position  good episode    Fight tonight      watch   send India down   Test  both matches could have gone  other  couple  crazy sessions hope there will  widespread condemnation More than were killed   both  accused masterminds  that attack  roam freely  Pakistan inciting more Dear Pakistani  keep feeding snakes hoping they will cross  Your country pays  price  that failed policy this   particularly blatant  just  days after Peshawar Reports  fast death sentences  Pakistan post  guess that   terrorists  Latter that  still   Twitter trend  With this latest that could change rather Bail  accused Speeches    Hafiz  lessons learnt  Pakistan from most countries condemned them  other countries have joined   these Long overdue move     relations with Their isolation  blockade  that country  been This  Hafiz Saeed   threatens terror attacks against India will   Missed   Sunday that   People like    reason  terrorists survive arrest  because  Arrest Hafiz Saeed because  what terrorism  doing  your mindset that will allow terrorism  keep  innocents will That would send  strong Pakistan Govt  start with arresting Hafiz solidarity silence  schools across India Modi asks schools across India  maintain minutes silence   gesture  Offers Peshawar school  Modi calls Nawaz expresses condolences  NDTV those  ordered   have also destroyed  will never  support goodnight   thoughts  with  vacuum that  created today   many  will never According some  terrorists shot children  they  under their Truly Pakistan towards  should  that sometimes takes    depravity  shock  society into should lead  huge introspection even they murder children   name Nearly  hundred children  feared dead  This   revolting Pakistani politicians saying lessons need    crack down     Even  ones considered many  children already feared dead says gunmen were told  shoot   their have   sick   head  believe that  will  happy   murder innocent young children that after your marathon Just  someone throwing      another passenger reprimanding  Message will Great     Some money spent  donor rest through Details cleaned   part Send  pictures   cleaning activity that   your questions Later     live Facebook with join  today  cleaning your neighbourhood  sending Incredible line    Chief Ministers joining Shows  crucial Naming  rally   social media Next nominee   activists  Twitter armies  social    fight filth instead  each Given  position  this    Test that India should have What happened Exciting  strange  have made sense  first cement  draw  then Link   Concerned About Comments Made  Arun Jaitley Tells Finance Minister Arun Jaitley Slams Hate Speech  Highlights Slamming tells  that  distracts from  government agenda  helps those  want Spoke    says this     initiatives that hold Railways   clean  stations  also  plastic waste along train someone just contacting   confirm time first   nominees   told  committed  cleaning   Long hope       hills need days     Will  anchoring hours with Also will  naming  nominees Modi Belittled Army  Srinagar Congress Says  Complaint  Election Commission they  dressed based   years here  Kashmir good  return   from believe  gave this   anchoring Updated with  latest from Sopore   Live Blog From  Kashmir Stone pelters force  polling booth  close  Tear have  live  from Sopore   From near  home  Hurriyat leader Abdul Ghani Crowds coming    polling station  There   turnout    Sabha turnout  this booth  Sangrama which  rarely seen voting since These  voted  first time Stunning Normality    piece many thanks glad that some thank    kind been reporting from there since  should Long time back Good   back  Began  reporting career   place full  memories Srinagar festooned with  flags   occasion Uber will have  answer plenty  questions   safety systems   this  best  billion dollar company could This  Arrested Uber Driver  Jailed Earlier   Rape Delhi Police Boris Becker says  greatest   time  sitting here   stage next Roger Pete Amitabh Bachchan with Prannoy  better than Truly Delhi woman allegedly  Uber taxi missing More than percent  prisoners   majority under years  Many  locked  before investigations supposed   innocent till proven     works   lakhs fight tonight   serious issue  undertrials locked away  Justice delayed here  truly justice Hafiz Saeed openly incites against   rally given help   Pakistani this clear support Terror returns   always   cards given  strong election Next  phases this     road    legends  Indian Thanks trends     Huge racial disparity still exists   especially  police Special trains   Hafiz Saeed  then Pakistani officials  they   victim tank where   leaked  must never Been informally polling groups  urban  majority  them  fans   virtually   them deplore hate should   Modi mandate   leadership This   What About Visas  Reciprocity Needs  Ideas About Opinion piece either    that  Rohtak girls beat  molesters twice   both times  camera there have been plenty  crazy statements made  recent  this   Union apology  does tougher action need Robot Army  Ready  Ship Sisters thrash   harassed them  Haryana think  will shocked    many   lessons have   been Fight tonight  have  learnt  lessons   experts assess whether   prepared  another Also  Says Rajnath Singh beats  been bought  There   good integration coming Tharoor opinion  Message  Pakistan  SAARC Frightening statistics   polluted Delhi  Something needs   done depends  model  budget  both  pretty really  wrong with either Government litigation clogs   judicial  mindless appeals  govt departments taking  safe path  often himself  suggested that  will chat with      should Swapan himself wrote    where Tragic news about  death  Phil Cricket    dangerous Good  Government  considering  free undertrials  have served half  their maximum terms Opinion piece  should Parents Have Been  Jail   Year Pakistan  always block substantial    better idea  build bilateral ties with other best   remember would   ensure that  appropriate lessons have been Arrest Changed  Attitude About This    Yamuna behind   shows    need   involved literally waded into  muck  clean accept your nomination       need  clean India there   audio  radio told   such Waiting  your Whole   Reforms Coming  Finance Minister Roundly slammed shahi imam when  called     Modi criticising   others     attack show lawyer with  extraordinary  baba  held fight  there  genuine     there  fake godmen  become   unto    latter Highlights   sessions   Leadership Ajit Security discourse  rarely about  real issues that will actually lead  degradation Ajit    most influential intelligence officers  have Must afford front page    should  invest   good Commitment from   highway   within   Motor      bogus speak  about Will take questions from Twitter  send them Venkiah Naidu also agreed that local municipal services have collapsed across Says funding could  linked Venkiah Naidu tells   came   conference from  airport   Metros   rolled    major talk      huge infrastructure    that Very busy  About  interview Venkiah urban development   plans  this crucial leadership summit tomorrow with  power packed line   watch  sessions  NDTV wonder    also captive during  milk  kheer sessions watch   took refuge  some mild reaction Though wonder what  judge will make  this  somewhat legal lawyer just told     Fight recording that  Baba  innocent because   held captive this  magical  just  cured   obsession with special show   tonight  next steps  cleaning  Rakesh Kapoor Next iPhone Said  Bring Camera Jump With DSLR Quality been cured   still  traces   virus  body Foreign audiences never fully appreciate speeches relayed   English   important think    most interesting aspects    increased comfort while speaking publicly journalists   hunting  Then   wait   press they  firing    supporters  should  told they face charges  rioting  attempted NDTV crew camera snatched  Hisar police  ashram where Rampal  hiding  NDTV battle  Rezangla   sacrifice  Kumaon took place years  Lest Thanks  many kids know about  battle   that  sacrifice  Kumaon known NDTV    hours      pioneers  this more than years Modi invites  diaspora  help with  Clean India Says  greater service   poor than focussing wonder when  Modi Foreign Tour Formula will  taken    obvious Other world leaders must  taking    countries have  powerful diaspora like India already told   notice     another  going  respond daily needed  have  range  voices given emotions around  issue make filthy accusations without what about  anti  people first such debate have long maintained that  present rating system  deeply  worth Anand just   Herchelles Gibbs   hope  that  fights Anand loses after having   clear chance   missed opportunity  capitalise   Magnus blunder   turning given entrenched   either side conceding much  what  arguments fight tonight   sharp battle over  food     both sides  argue   once actually   Perhaps usually mistakes  only   sent  reply instead   public this    such  verify before facts correct before least     assure  kids they will have toilets  their With   Kini announcing  target  Better facilities Separate toilets  girls plus other facilities  schools  Enrollment  jumped Highest individual score    batting record that could stand   long highest individual score ever becomes  first batsman  score  double hundreds agree   real shame that despite having  many sports channel  India none showing  live your filthy spaceship Absolutely fascinating chess battle taking place   Sochi World Maharashtra political    being prolonged   point  being Chivalry Putin Wraps Shawl Around Chinese Never waited   album  eagerly      these   takes  want very  albums  compare tough interview with   Giriraj   controversial statements That makes  change from what   usually accused Objectivity means showing both sides   issue  reflecting both positive great when both sides slam Doing something couple  baffling   wonder   getting ready good portfolio allocation  Hope   accelerated action   crucial infrastructure other   available  First album  Super Knew  Even  graphics great idea   qualified technocrats into   also works well with  presidential style Still waiting  Modi    broader pool  competent ministers  allocate  posts Special show  tonight Cabinet expansion     speak  four    ministers including Giriraj India looking really dominant against  Good    psychological edge ahead   World time    apologise  those Fantastic India beat world champions Australia  final India  Test series  NDTV political analysts with     build    swearing   intv with coming Live  Meeting Ministers   Inducted Over have   that Twitter arguments with    more genteel affair than draw   first Anand escaped    from  potentially sticky attack merely pointed  that  same  slogans help revive   needs point  that  stick  tired  dogma   ever changing Need inclusiveness   great   congress party needs  return   drawing board best part about    that there       tweets Gandhi family  called  glue that holds  Congress    this that   always long will  Congress stick   family   only game there  other ideas that   think Fight tonight   organization that desperately needs  Does  have Will    studio  Sunday   cabinet Will   major ministerial changes   Modi been  looooooong Still   Facebook chat  other stuff step  essentially  free  personal   iPad  Full review soon  Gadget great  hear your ideas especially    Hope  becomes Amritsar Golden Temple illuminated  Gurpurab Naidu   call from   while   session       stage  take   tempted  leave mike Chandrababu Naidu tells  that  will know details   cabinet reshuffle Modi Briefed After Wagah Bombers Tweet About this must   people  suffer  most   ones   afford   More seminars many times  nomination there     those  financially Banks then make them banks make  jump through hoops even with   sure many just give   abandon Talking  NDTV  Laxman backs views  Clearly      most unpopular coaches Disgusting  disgraceful Islamic State tortured child says rights group Will iPhones  banned Steve memorial  Russia dismantled after Apple  comes Shobha    serious First Citizen When  Good Need  worry more about  Indian Chinese Submarine Docks tell them  report referred   little known group    March this   that Please   where does  mention  Hindi desk putting  full someone  setting   group with  same name  yours take   with   said  were reporter says  told  there were  organizations with  same  suggested  name tweak  distinguish them apparently    different organisation with  same name  Reporter calling idea what this refers Which channel  Will  someone  contact wasting your time tweeting first time hearing  Will windows have that much traction  will consider first step NDTV launches   Hindi Android Download Singhal will demo Hindi voice search    after  great    many Indians   highest levels Interviewed Amit   behind Google  told     mother  mind while working  search Happy   part   Indian Language Internet NDTV  fully committed  great content  Indian Watch this hope   packing   Waiting   share once that airline sliding must know they paid   Facebook  promoting  their Next spread stories that From what   India  scored more than  many   more than Great batting  Rahane  with overs   could  looking   record Lesson   opposition Your words  actions could come back  haunt  when  take over problem   government  reconciling what   needs   with what   said while Fight  black money tonight  Mukul Ajoy Prashant   Pinky Anand also loved  bberry  eventually   bite  bullet must  bberry then perhaps  Otherwise   iphone friend tells  leaves  tulsi eaten   morning   best protection from viral Will should never Just posted about  memories  that meanwhile have just   iphone hate    told  Giving    iPhone Just  Switching   iPhone true Hardly   support hence trying think particularly cares that    invite from  Shahi   action part   overall partnership with facebook Being   Gift from    that free iPhone  promised wonder   announcement will affect attitudes   company  regarded  super only  criminal   takes part  certain acts while exclusive playing   Black money probe panel speaking   list Pardon   they know   sins clearly  global problem Watch this woman  harassed times while walking   York City will   next Chief Minister always have replied    many will take part  special post articles  take comments  Other ideas Starting will also  active      join Proud NDTV wins Best Asian News Channel   Year  AVTA  Many thanks  viewers NDTV Voted News NDTV Before ISIS Hostages Endured Torture  Dashed Hopes many thanks     your    should  this Thanks   Will plan more such Dialogue  always View from Afghanistan seemed similar   stance    said miss  three nation townhall  terrorism tonight  From Delhi that   tiny office      would   some truly yummy samosas  visiting Used      beat       remember  interactions that referred Including very happy Diwali      year ahead  full  happiness Must watch  link    Exclusive with generating multiple sorry    chola Next think  decision  spend Diwali with flood victims  Srinagar   excellent Should  welcomed Happy Diwali show with  Happy  Year Will Recording special Diwali show with Sonu  Send sources  Shiv expectations  seem quite That should make  coalition govt only guess     rushed  offer support    main   reduce This   news        offering outside support    with Reduces  bargaining will take questions  comments from Second Screen  post away   NDTV studio    summary   that  happened    counting   some predictions  what could happen getting routed   Maharashtra Hopefully  politics  parochialism will fade  across public life amounts  swimming     says Jayalalithaa after being released from Press Trust Congress  coming   last   wiped Having said  Haryana  Modi effect delivered  state where   have that much lesson    Modi effect   powerful vote   always overcome  lack  local Possible  unlikely  Govt supported  Cong  well   three want   surge Possibilities  plus    enough  form   will have  reach shown  Sena that      present numbers  will have    seek support from only action Congress  quick  posters demanding Priyanka Gandhi  save  party   Delhi much separating Shiv Cong    tally  double each Glad they  watching Devendra wife Amruta mother Sarita glued interview  NDTV  being more diplomatic about   post than some   other questions remain  will   need    with    will Haryana story more  less  will long Diesel Prices Fall  Nearly   Cent chennai airport   list  worst same survey  Delhi airport  among  best  Airports   area where India  seen  huge been  expectation that  will accelerate reforms post assembly    happens seems  have  edge  Maharashtra   question  whether there will   patch  with fight tonight kicks   election counting  will form  government  Maharashtra Special show will  next miss felt former head  Afghan   more effective critique  Pakistan based terrorism than   have heard most impressive public figures  have heard   while Amrullah Saleh  joined  show from Interesting editorial     heading   Sena patch That should make government formation Three news channels across these countries collaborating  this  should About  record  first   kind programme  three nation between Pakistan  terrorism That price iMac With Launched Incredible  Retina display       best displays iPad  seems really nice  first iPad  iPad mini Apple Launch Event Live Blog NDTV iPad   iPad mini With Touch   Apple excuse  have been running clean india campaigns    recordings Long  Modi  Announce Labour  Down Inspector exit polls   will  another endorsement  Brand exit polls  correct then  could    govt  Maha with  Shiv Sena  main Unless they make  post Shashi Tharoor Dropped  Congress Spokesperson  Praising  Modi have   responsible  what employees    rest  their Peerzada could   strong contender  that Should  have  contest   stupidest remark     think  several going  struggle against  West Indies  Indian  really start  worry about  World Fresh Firing Reported Near Line  Control  Poonch Tonight    what  behind  ceasefire violations     back   enduring Read   about hour work days  working till need  stable effective  with  flip  that difficult serious about  then  have  more  biggest concern Interesting court verdict   Vodaphone   government should  turn  full attention  streamlining Together with proper garbage segregation sure that   swachh  students  urinating   shower could save  environment There should  many aspects   garbage removal  personal Then  Philosophy  Work  Kailash Satyarthi against  Does being  Congressman mean   never appreciate what Bizarre Kerala Congress accuses Shashi Tharoor Leave Shashi Tharoor Alone buck stops with  tonight   debate ceasefire violations   latest Vadra Shashi Tharoor  Invite  Join Clean India Campaign Surely winning medals   country should matter tight finish   medals tally makes  refusal  send cricket teams   Asian Games even more India  both gold medals    really tough final against Iran goes well then  kabaddi golds tomorrow could help India finish   position   medal Fingers games record  metres    Olympics   hockey another metres This   event  lose   Asian time  sports officials  administrators realize that they  there     other another Greenathon  long overdue Narendra Modi Tags Sachin Shashi Tharoor  Cleanliness Challenge boss   even watch  channel   Biggest supporters live     most beautiful  shame  disfigure India with small   have been trying  campaign  cleanliness  some years  cause  passionately believe Clean India campaign   long awaited  excellent  should  pledge  support  make this  mass India  still   medal Need  couple more golds  move    terms  total Gold  Mary     time greats  Indian equate with  normally  interesting  often quite valid points waste time going through these boxing Just declare  Koreans winners before they Silver  Vikas Gowda   discus Disappointing   Iranian  clearly India should  know which bout  judges were Have repeatedly asked   cricket team Mary Through   final   Asian What Keep your    discus  Punia could  heading have been involved  cleanliness campaigns These small    clean  India  Ganga  build toilets  will   major That  such  engrossing speech that  quite forgot  intention  tweet about very  Lifetime visa   card holders   need  them  report  police station Something tells  that  speech will  better than  performances building What  star Yogeshwar Perhaps been   under  shadow  Sushil  here   clear moment Have yielded   Fight slot tonight    speech   United Finally Ghosal converts  gold medal Gold  India Massive security here  Bangalore    What will  sentence there   today  better than  tomorrow will      GMIC told  today that  message    should   tell Indians  return Pakistan women  gold   BCCI should  asked  they threw away medals   even sending cricket Looking forward  blog  sanitation  cleanliness More  Facebook crores commitment from   kick  More About  launch    biggest campaigns   Launch with More     Country   should have been  marketing this makes   incredible campaigns  Great India  golds  each  boxing   single sculls performance      been rather After  good successful trip  Mars    area where India  beaten Just   back after Good good  your level   games Great fightback from Abdullah Gosal trailing   fourth game  this Really tough battle  third game Ghosal wins  first game   there  reason    showing some dull volleyball match instead   squash Need some gold medals  hope there   coming   Ghosal shortly there  still confusion about what exactly tweets  maybe  will   again bronze medals  Abhinav Bindra   last   shooting  What  champion Also excited that favourited  previous Government entering  space   social Super excited about Best wishes   team working what   best joke  Just Hopefully with  plan   Tourism Ministry working  cleanliness index  cities days  iphone good enough Molly wood picture yourself making calls   micro least  couple  reviews  plain battery life  better than   Stabilization really necessarily Will have  debate   studio actually given  numbers   voting equally smooth Lesson from Separatists  make more noise  grab  there could   silent majority supporters   help boost  revenues Results from  biggest cities still       looks    will remain  United believe taking  long  count  They should outsource  process Endorsement   creating Today   very   could  with  Disunited should   matter  great concern    that    despite  development track record Going should ensure fringe elements cover   signal with Lesson from  sweeping  victory   leadership actually   since  besides   idea  this  there  that annual report  will have  life outside this   annual years when  find    annual report  last interview with  Google   launch Nice looking phones     price point that  really First devices from Spice interview with       most powerful Indians   tech exclusive coming   interviewing boss  Sundar Pichai   launch true     tricky    across   recent ruckus  India when  group tried Good  Shri appeal regarding relief work India fighting back from  Somdev beats Lajovic  help India make  against they troll therefore they Finding Fanny  help journos find some what else please  draft  suitable social media Happy  consider want     censor opinions expressed    employees  their personal social media Great Buying  iPhone Check   Completely Erase Your  iPhone First coach  Sushil Kumar tells   facilities improved after  Olympic     positive Success breeds Cricket  other sports  starting   more interest    success fight will other sports catch  with cricket  Joining  Charu large   very  believe everything  hear about fabled Nightmare journey back from Delayed long queues Endless possibilities with   sugar  with  Remote tasting expert told     project  that  simulate virtual reality demo  Walking  plank   great Feels national rescued   lots still    attacking rescuers crazy Four choppers with relief material fail  land  Srinagar after angry crowds threaten  throw stones This   biggest since  Fall When  comes     playing catch Needs better better more Personally  looking forward     whatever  will  Plus something  mobile With great expectations comes  threat  great night coming    tech being hyped   most significant   since  passing away other hand     Google  Twitter from  hotel  working fine Moderating  session  infrastructure  area where China  miles  miles ahead When    others  NDTV their staff busy Prime Minister Modi writes  Pakistan  Nawaz offers help with flood relief operations  Kashmir that message already passed thought jammu much better Good   state  central government work together  deal with  Tough situation Mary   further proof that   finest actor seeing  trend  randomly selected city studio audiences Most  them seem  Modi  also strongly anti Panel  together with  very vocal audience that told them   studio   same Wish  LOTS Fight tonight  Modi Mani Prof Wish Need  global programme  spot these This  also   finding   support  school Girls leave school because there   separate launches  branch  Indian says  leader Ayman   video message  NDTV lists  called cheat picked watch  tests   watching think surrender    series  even more abject than   test waiting  this   England there must  some glitch  your which category  Nalin Tara Sahdeo  Charu gupta come While   always good  hear  range  opinions    endorse some   views expressed  panellists these  same  teams which played  Test campaign  that issue that Fight  controversy around Tara  Charu Hindu Sadia Long Government rethinking  special army Minister  State  Home Affairs Kiren Great opened  more than camps under Modi Indian Economy  Have Registered Fastest Growth  Years torrential  wild track   What Maybe India should     they    blue clothes  Test matches Girl Dragged   Shot Times  Front  Parents That link   video that   promised  post better hope they otherwise   next More   been brilliant  raising awareness about Need    same with malaria most  accepting  donating those complaining they already challenged Maybe  shud challenge  Stops right that should have been done accept  from Will post  picture Outraged Over Vows  Stay  Course have  respect   strength what happens   sons after  daughter Daughters provide twice  much care  aging parents than sons study finds Must   media would cover Ferguson   happened  another country what   just Cricket  there   Asian Games  apparently  BCCI feels   beneath  dignity  compete there Asian games     weeks  many Indian sportsmen  sportswomen have spent years  training    precious actually just proves  much potential there   other  need time  devote   more attention  money  sports other than Special  fight tonight   remembering forgotten that phone  gadget guru Those    have been watching  Test match should have listened   advice  watch Lagaan patriotic thing      watch Lagaan instead   Oval Test hoping that  least  Independence   Indian cricket team would avoid humiliation against about time that  sorted these year when  stand every school should have toilets  girls delighted that many   issues that  have campaigned    firmly   national Located this family     guess where  when  bought there either this Surely Indian flags should  easily available   markets      Independence system     just about everyone knows difficult  find  flag    Independence Been searching   couple Doctor Caught  NDTV Investigation Arrested Want tricolour  display picture Nothing illegal about believe    been raining  stop  Manchester   With    India could have saved crime against humanity being perpetrated    there nothing  world know there could   much heat  dust over foreign Inside story behind  NDTV world Three  Tent Some please stick  watching reported both  Israeli attacks  civilians    Hamas rocket York Times  NDTV Indian  Crew Shows Rare Video  Rocket Launch From Gaza Hamas Exclusive   International Headline What   main features  would like     Apple coming from behind this some catching Gold  Fantastic final fight tonight    need  overhaul    have history with Hockey team  finals  does anyone know  they  playing more productive than trolling people  twitter yeah   athletics finalists guaranteed  there   Hockey could join  list India will    least finals over  next  Hope  golden    silver what else would  call Manmohan Natwar Singh fast track criminal justice Chief Justice  India solution   have  system that rewards good journalism  opposed seems    night  silver   gold  wrestling  bout still know that every single member   weightlifting team Four more Indians  gold medal matches  wrestling Hope they    great performance there    will  need  come together  push them through Three   three gold medals  India  wrestling  Clean Hearing speak after  long    daily event during   getting withdrawal Biryani from  Qorma  phirni from another This Another gold silver combo  This time carriage fees   subscription means news channels depend    they chase Model needs change been clear   while that  have   problem    whole model  messed Hope  violence  Saharanpur comes   immediate   that those responsible gold plus silver combos  Indian women shooters   mess with that hard   important what Loony  baseless accusations amount govt communication strategy also needs Loonies need   Positives good year  name  tough fight tonight    spate  provocative statements   there  trend   stray incidents being Modi government needs  tweak  communication strategy  make sure that  signal being lost because   race Crazy  loony accusations that would have once been ignored  splashed  timelines grabs another gold  India  Mali gets Chana also loses  final bout    with  silvers  judo  gold plus silver  weightlifting   tally silver  Judo India could pick   handful  medals  judo India possibly heading  gold  silver Commonwealth Navjot Chana beats South Grange  enter judo Guarantees silver  India After  that Maria Comments  Sachin Tendulkar according   government most children report abuse more  study  report  child safety  more horrified   children face corporal punishment then  minister  Bhardwaj will     tell  whether   directly  political pressure Also   your children safe  Frightening govt statistics  that  kids could face physical Anchoring  tonight after  long Prashant   judicial Send  your Building more toilets  long attitudes towards open defecation will need  change First time   seeing short pitched bowling WINNING  test match  India that  called    Ishant with starting     feeling about this this test Need some wickets Yelling   Change  Justice Katju Ashwin  played instead  India would have   real edge   Test  this which side  panel stop from making there rarely solve complex issues thought  upshot   have consultations  meanwhile push communities  internal fight tonight  should there   uniform civil   consensus    time Scary Singapore Airlines   India were about  from when never really  attention  conflict zones  could  flying over  passenger That could work    time turning     horrifically tragic year  Malaysian wait   what  final contours  this policy Could still  early Cyanide  apple Food Facts  Believe  Actually about  make    form  government  Rumours   clear where  numbers will come from with will face less right wing criticism   pursues reconciliation with Perhaps even   border full reconciliation between India  China  someone  could possibly pull tireless repetition  untruths make them   have genuine questions come meet  will look  will have   really Priyanka BRICS Summit clears setting    Development  Modi says    significant first explain   burnt  indian flag  Toronto last tweet    burnt  indian flag  will    should someone lies  matter  baseless should  telecast Great idea your dealers    throw trash   stickers rather than their using this look   next startling   suspect there could   catch staying  tonight take that normally which     good   them getting  much credit this think this World  will also  remembered think really deserved  Golden  were there other players    bigger impact  this World sunk    That   team  superstars  turned Germany were  best team   World   deserved Cracking game  Both sides  great chances Many congratulations   Indian basketball team  their upset victory over Maria  Does that give  early edge   already confident wakey Story already Which team editors were always going    back Grand canal  South After  position India were  believe they   struggling  save  test creating chaos   roads Just tweeted     exhale Rebooting Economy  Road Ahead Oscar    very  players from  exit  World  with  enhanced seems that  will finally have  match without  penalty shoot second goal Less than    happened Brand  attacking line   Brazil  this Will  make  Does many    staying   Brazil  Brazil concede  goal even before  could switch After three days  budget analysis  upshot checked with They  story still being worked  factually  will interfere  editorial Checked with editors they said story still being worked Will  back Special episode    Fight tonight    next economic steps after   thinkers join  with wonder whether  naps  inspired  Rahul  caused   World Sharp recovery   Sensex  more than points from India   watching  speech   NDTV    couple  them snatching Jaitley started     then  budget speech  gone into lots  micro hours hope they   done announces that wait     warned that  cannot spend more than hike    defence  Given  defence bill  reason   should   much Good  tends    small segment    hope that Steps  retrospective  hikes    defence   revised  administration large number  schemes being this   approach that    been Further sales  shares   banks  help  Visas being defence raised  Insurance  also This government will  introduce  retrospective  cases under   retrospective  will  seen cannot spend beyond  means says  points   fiscal deficit target  within  couple Arun Jaitley calibrating expectations Says  Budget first step  laying   path  government will feel  look  this budget from  short term point   hope  makes structural changes  many them going   knows Anchoring   Lots  expectations riding  this these statistics   thrashing  Brazil  Germany  most unlikely result  World Most Shocking Result  World  History tell your grandchild that  watched Germany beat Brazil   World Historic Seven This match will   source  nightmares  Brazil second half Germany have been playing   even they  feeling sorry Heading  worst defeat  history Could anyone have ever expected this   half time Gowda  able  implement  that   just this could  remembered Diamond Quadrilateral first bullet train   between Mumbai increase  budget  cleanliness  Outsourcing  cleaning mechanised laundries Course periodic fare high speed     Reforms Rail minister delivering  stinging indictment    Indian Railways  been Hope  hear something    cleanliness   trains   Especially Announcement could come tomorrow Amit Shah frontrunner   says party sources Given  their performance against could fancy  penalty shoot  against soon going  threaten  record  number  saves have  Netherlands avoided scoring   last   normal  many Watching another Sachin Tendulkar straight drive Watching another Sachin Tendulkar punch through  covers Never thought  would hear again   cricket Brazil  Germany   first semi  about Argentina  Netherlands   second Extraordinary free kick from David Great Special Plane  Indian Nurses Lands  Erbil Airport great that  nurses   their  Kudos    made what could   game   World Brazil more common than  would More than kids died     after being left still unclear whether    tragedy   heart rending  horrific mistake   brutal There seems    masochistic streak  Abhijit know         help waiting       flight after hours sitting   plane they offload everyone    flight will  delayed  another said called first Have been stranded  hours trying  make  simple    passengers inside  plane  hours without take called airports like Heathrow have become  total Delayed missed endless turning       surprise stars   World Colombia looking good close  Chile  inches away from knocking Very scrappy play from Will Chile make them    missed heading   biggest upset  this World Spain could crash    first excitement returns with  Thrilling    This group could  wide Spoke   match   boring that even  players Overall  have   this   best start   World  that  have Plenty  goals  fast early Pakistan  arguably  more successful  prosperous country than  have  terrorists hurt lesson from recent  huge mistake  back terrorists   hope they will attack your neighbour would recommend  momos   members Good   Pervez Rasool   Indian cricket Spent some very happy years  Bhutan    lovely country with lovely Very keen   back some time sold rather well thank Hindi  regional languages  Including here English speaking skills have often been hailed  source  global competitive English also helps  social mobility Language issues still arouse such passions   Hindi ever become  link  fight   right Must     worst thrashing   defending champion  World FIVE    This  going      most talked about matches this World What  Happening  This best starting line   Many    names sitting   bench right  could    field Persie becomes  Flying Dutchman with that good score   suspect many  will feel  victory  that also  sure   Portugal will research There think present odds  with Neymar  then Ronaldo  both  Golden Ball   Golden stay   night just  make sure   make these compulsive little Quite Possible answer positive competition between Investment  growth will head  states that implement good area  concern many policies will depend    will those policies roll  some states Plenty  additional investment money sitting   waiting     stated agenda will majority view here   implement  stated economic then India could   sharp where there seems   visible shift  mood towards  prospects   Indian both  twitter account   sense Best first tweet   neither confirm  deny that this   first still viewed       block   importance  content companies  growing Staggering numbers   Election   time  these  figures that  independently Bhutan   first foreign trip    Lovely Bhutan   interesting choice   first foreign visit   been closest department sends notices  ITAT  already stayed simplest thing   today   spread slander have  totally lost What Stop spreading channels  Have publicly stated     chasing would  wonderful  national interest  economic development could take centre stage   Instead Interesting comments   NDTV  Will   have  reduction  animosity list   political leaders  have died  road   accidents Chawla finishes  game against  team   represented Sensational innings from Pandey   attempted   Singles could have done Fantastic innings    turned Some acceleration  last from Welcome because   many overs left Kings  changing  strategy that  worked  well  That experts join  with their  with their comments   steps already indicated   Send  your Tonight    Fight  special programme   economic agenda   Modi What  changes should Delhi Daredevils must  wondering  they  their   retain check  last  then  would appreciate Power corruption    horrific gang  seems     real have  balance concerns about corruption with allowing honest bureaucrats  work without fear agenda strikes   right  could transform Implementation what about   suggested Excellent   best legal Mukul Rohatgi appointed    Attorney General govt doing anything wrong then there period seems     nice while BELOW    defence ministry still thought  were still  Have  grrrrrrrreat nothing  many transfers  power  India  most have been accomplished with Here  another example   grace   talking  goes  visit   Manmohan With  Modi Measures  Crease bitterness   should  buried post poll Modi  Good theory life moved  without Often  hallmark  indian  always Best part   grace that often symbolises Indian democracy   full After  bitter election both power  then   someone  Crucial ministries where there clear that   number also   winner    finance  defence some disappointed  leaders     sure  there will   expansion spectacular  terms    much food  bills many ministers post   felt  were heading  landmark changes   next  weeks Plenty  moments with  difference   Relatively lean Spectacular This  Narendra Council  Ministers where save this tweet will   that short term till final decision Lots Indications that  Nadda will Relatively lean Cabinet ministers with independent ministers  state likely   sworn already     errors  happen then cameras allowed  phones looking forward  attending  swearing  ceremony this  promises    momentous Incredible game  What Well done Right  many officers just refusing  sign files  take also need dynamic Like   then empowered show  some evidence that  exactly what    media needs many would agree with means  same   when  goes wrong      criticize thank though usually accused  being being called communist   pleasant media should     attack Many people have been asking about  that  media will take  Modi    there bang  crucial thing   simplify policy  reduce bureaucracy that would  excellent  highly Also necessary  proper development think there     excitement  around about   high expectations think anyone expected   that stage that goes both strength  rupee  hurt exports think both sides will  surprised think  need  judge    Will  really secularism those were days    beat   samosas  know   still send  Being  moron necessarily they    list Twitterchat   that Will take   best comments  tweets    fire them Special episode    fight   What sort    will  make  what will  first steps this    tell    anchor   when Sindhu India    away from entering  finals   Uber Heart stopping action   Uber Fourth match journalists always like   reason  became have already been doing that that cant  done Burma  part  saarc right follow     well  election season Journalists will  worrying about their summer  break from  news already having  rather path breaking swearing    suspect there could   heavy agenda over  next course  coming   show Others what does  have   with Good work should   steps Send  your comments  will have  this Best comments will  taken This week    meet your What sort   leader will   what   first steps  will Every  deserves  honeymoon period totally Nehru made  least   best speeches have         Need   whether  actions  match  words think  need  wait  watch  judge    Give  that crucial test   government     saath sabka slogan  implemented obviously slogan    factor      will  implemented boss       someone  doing something right then  shouldnt criticize   sake cares what  feel    wasting time   twitter sabka   correct slogan  keep  right   reassures those  need said that     foot wrong since  Said  right things frequently said positive Check saying another   list  excellent  have    recently thing   sure India once again       excellent After That      best catches   history Needed    admission that  media  leaders refuse  communicate  speak Needed    realization that  country  moved  from  politics Needed    admission that years  policy  governance paralysis together with corruption  self goals destroyed Needed    recognition that  politics  style  totally   sync with think  have  wrong Vikram twiplomacy  suspect  will have    transparency  foreign idea  were seeing your shows Finally   first  match   this been   what have that   what Also   panel Amir Ramesh   chats from ground zero   Modi Fight tonight    path ahead  Prime Minister Mark Shaina Dear there have been buckets  sweat already   campaign Perils   summer very real possibility aint   that isnt listening Though Nitish Kumar just said that  feels  ideological decision  quit    been repeatedly vindicated played  cards  could have been wondering which porfolio NItish would     Modi just years  that  Left parties presided over policy Every Karat press conference Amazing  many powerful regional satraps  suddenly looking  much Nitish Kumar  have   choice   because   numbers    wonder  will that some channels  already allocating cabinet  less task inverted commas First party ever    absolute majority says also become     They  still calling   sahib Huge press conference about   addressed Been flooded  messages that NDTV      Many many When  experience told   complain whom   complain allies touch Take NDTV predicted  Modi wave month  opinion poll There   Modi wave   credit   getting  organization  place  convert that into Talking  NDTV says that even  expect this sort   victory then     Describing  campaign hmmm worth checking that hear have  numbers      need  take everyone with     says sabka says  will  bound   constitution  will take every segment with will   hardest working Prime says best headline  these   Other interesting point from  will   first  born after thats also  good possibility wonder    will  field from  seat that Seems  logical thing Asking anyone from  ADMK  talk about potential ties with Modi  like asking them  play with Extremely short concession speech from Rahul Gandhi taking What  there only piece  really  news    loses  Presumably will still    part   govt band  says   press Band still cant pass laws without majority   Rajya sabha seats        what created this unprecedented this time   extent  which    swept many states taking almost Congress       closer   ADMK number than   closer   IUML number than Lovely pictures  getting blessings from   meetha  some that because then total numbers much more leading   That  another historic  Congress only leading Take  seats      needed grass roots organization  addition   Modi Does that vote share  mean    think recent elections have seen winner takes  happening More  Theory Pollsters often   vote share correct  will      Issue comes  conversion NDTV projections right  will cross   alone will have absolute hunch  that some   other channels  still underestimating  final This   Theory  Tuesday That exit polls  underestimate  winner  terms trend  have seen  recent elections  that  winner takes  Especially  counting Could  happening again concurrent users right  time </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>