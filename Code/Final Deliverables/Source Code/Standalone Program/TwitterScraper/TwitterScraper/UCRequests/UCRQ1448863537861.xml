<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">U2hvY2tlZCAgaGFwcGVuaW5ncyBCZWVuICBwYXJ0ICAgIFZpa3JhbSBTYW1wYXRoICAgICBjb29sZXN0IG9wZW4gbWluZGVkIGd1eXMgIGhhdmUgSG9wZSBBYWRoYXIgIGNhcmQgIFZvdGVyICAgIG1vc3QgaW1wb3J0YW50ICB1c2VmdWwgY2FyZHMgIGhhdmUgIEluZGlhICAgdmljdGltIHRoZXkgdHJpZWQgIGJyZWFrICBzcGlyaXQgIEJlY2F1c2UgdGhleSBuZXZlciAgYmxlc3MgY2FyZSAgbXVjaCAgZGlzbGlrZSB0aGlzIGdvdnQgICBpbnRvbGVyYW50ICB0aGluayBJbmRpYSAgIFBhcmxpYW1lbnQgZnVuY3Rpb24gIGhhcm1pbmcgQ2Vuc29yIEJvYXJkICAgIHRoZXkgIGJlZW4ga2lzc2luZyAgc2Vjb25kcyAgICB2ZXJ5IGZyYW5rIHF1aXRlIGVub3VnaCBHbGFkICBDbGVhciBkaXN0YW5jaW5nIGZyb20gcmVjZW50IHJlZ3Jlc3NpdmUgIHRhc3RlbGVzcyBjb21tZW50cyBjb21pbmcgZnJvbSBDZW5zb3IgQm9hcmQgQ2Vuc29yIENoaWVmIHNheWluZyAgd2FudCAgd2l0aCBkb29ycyAgYXJ0aXN0cyAgZXhwcmVzcyBwaHlzaWNhbCBsb3ZlICBzdXBwb3NlZCAgIGJlaGluZCBjbG9zZWQgc29tZSBwb2ludCBwb2xpdGljcyBuZWVkcyAgc3RvcCAgd29yayBuZWVkcyBDZW5zb3JzIHNob3VsZCAgc2NlbmUgb25seSAgIHRydWx5IHR1cm5lZCB0aGVtIHRoZW4gICBxdWVyaWVzIHRoZXkgc2hvdWxkICBhYmxlICBwcm92ZSAgYWN0dWFsbHkgIHR1cm4gdGhlbSBjb29sZXN0IHBsYWNlICAgQ2Vuc29yIEJvYXJkIG9mZmljZSAgICB3aGVyZSAgIGRlbGV0ZWQgc2NlbmVzIEhlYXJkIENlbnNvciBCb2FyZCB0cmltbWVkIGtpc3MgbGVuZ3RoICAgYm9uZCBXb25kZXIgIHRoZXkgVGhleSAgd2F0Y2ggICAgICAganlhZGEgTWFueSBmYWtlIHF1b3RlcyAgbWluZSBmbG9hdGluZyBFYXN5ICBtYWtlIHdpdGggICAgICBBbnl0aGluZyBjb21tdW5hbCBBbm90aGVyIGludGVsbGVjdHVhbCBQZXJzb25hbCBhdHRhY2sgIGxhYmVsbGluZyBXaGF0ICBQZXJzb25hbCBhdHRhY2sgd2hlbiAgZWxzZSB0aGlzICAgd2hlcmUgdGhleSAgVGhleSBuZWVkIGFub3RoZXIgIGxveWFsIHN0b29sICBjbGltYiAgICBFbHNlIHRoZXkgSGFwcHkgRGl3YWxpICBLZWVwICBzcGFyayAgcG9zaXRpdml0eSBhbGlnaHQgICBhbGxvdyB5b3Vyc2VsZiAgdGhpbmsgZG9uZSB0aGlzICB3aGlsZSBBcHBsaWVzIHRvZGF5IG1vcmUgdGhhbiBldmVyIGNvbW1hbmRtZW50cyBOb2JvZHkgIGdvaW5nICAgdGFsa2luZyBhYm91dCBjb3dzICAgdmVyeSBsb25nIE5vdGhpbmcgdGVhY2hlcyAgcG9saXRpY2FsIHBhcnR5IGh1bWlsaXR5IGJldHRlciB0aGFuICBoYW1tZXJpbmcgZWxlY3Rpb24gV2FrZSAgIGJsb3cgYXdheSAgbWFuZGF0ZSBoYXBweSAgc2hhcmUgd2lsbCBwbGF5IGxlYWQgIGRpcmVjdGVkIEhhbGYgU2hvb3RpbmcgYmVnaW5zIEJpaGFyIGVsZWN0aW9uIGhhcHB5ICBzaGFyZSBQYXRuYSAgU3VzaGFudCBTaW5naCBSYWpwdXQgd2lsbCBwbGF5IGxlYWQgcm9sZSAgTWFkaGF2ICAgSGFsZiBHaXJsZnJpZW5kIHNldmVyYWwgcmVzcG9uc2VzICAgRXZlcnlvbmUgIGZyZWUgIGhhdmUgdGhlaXIgY29zdGluZyAgcG9saXRpY2FsIHBhcnR5ICBiZWxvbmdzICAgIHNpbXBsZSAgVGltZSBUaW1lICAgc29tZXRoaW5nIGFib3V0IFlvZ2kgICBlbWJhcnJhc3NpbmcgIGhhcm1pbmcgIHBhcnR5IG1lZXQgICBtb3JlIGZhY2UgIG9ubHkgbmF0aW9uIHdhbnRzICBrbm93IHR3aXR0ZXIgcG9sbCBwYXJ0aWNpcGFudHMgYmVsaWV2ZSBjb3dzIHNob3VsZCBoYXZlICByaWdodCBKdXN0IHRlc3RpbmcgIHBvbGwgU2hvdWxkIGNvd3MgIGFsbG93ZWQgcmVhbGx5ICAgdGhpbmsgICAgZ2V0dGluZyBjb25mdXNlZCBiZXR3ZWVuICB3cm90ZSBhYm91dCAgcmVhbCBsaWJlcmFscyBNYW55ICAgICBjYXJlZXIgIGhlbHAgd2l0aCB0aGlzIHlvdXR1YmUgIHdlbGNvbWUgRXZlciB3b25kZXJlZCB3aGF0IG1ha2VzICBnb29kICAgZGV2ZWxvcCBsZWFkZXJzaGlwICB0YWtlICAgYW5pbWF0ZWQganVzdCBsaWtlICAgdGhyZXcgaW5zdWx0ZWQgY3Vyc2VkICAga25vdyAgbG92ZSB0aGluayB0d2l0dGVyIHNob3VsZCBoYXZlICBidXR0b24gYWNjZXB0ICAgZmVlZGJhY2sgIGNyaXRpY2lzbSAgaGF2ZSBnaXZlbiAgIHR3aXR0ZXIgdGhhbmtzIHdpbGwgYXBwcmVjaWF0ZSB5b3VyIGNsZWFyIHdoYXQgaW50b2xlcmFuY2UgICB0YWxraW5nIFJlbGlnaW91cyBUd2l0dGVyIHRyb2xsIEdvdnQgTWVkaWEgIGhhdmUgIHNpbXBsZSBtYWtlICBicmVha2luZyBuZXdzICAgYW55dGhpbmcgc2FpZCAgIFlvZ2kgIEluZGlhbnMgIGJldHRlciB0aGFuIGRpc2FncmVlICB0aGlzICAgY29tcGxleCAgZGlzY3VzcyAgIGRpc2N1c3MgZmFjZSAgZmFjZSBwbGVhc2UgcmVhZCBUaGV5IGNhbGwgdGhlbXNlbHZlcyBsaWJlcmFscyBtZWFuIHRoZXkgIGxpYmVyYWxzIG90aGVycyAgU3RhdGUgd2hhdCAgd3JpdHRlbiB3aGVyZSAgZWFydGggICAgdGhhdCBDbW9uIFJlYWQgIEhhbGYgR2lybGZyaWVuZCBtb3ZpZSBjb21wbGV0ZSB3aXRoICBCaG9qcHVyaSBTaW1wbHkgU29tZXRoaW5nIGFtYXppbmcgIGdvaW5nIHRoYXQgc291bmRzIGxpa2UgIGdyZWF0IFdpbGwgbG9vayBtYW55IHJlbGlnaW91cyB0cmFkaXRpb25zICB0aGF0ICBBY3Jvc3MgbmVyZHkgIHRoaXMganVzdCBpbmZvcm1lZCAgIGFuYXRvbXkgIGxpYmVyYWwgY29sdW1uIHdpbGwgY29tZSAgTW9uZGF5IE5lYXJseSBldmVyeW9uZSAgc3Bva2VuICAgc2hvdWxkIHRoZXkgc3BlYWsgIGV2ZXJ5ICAgaW50b2xlcmFuY2UgZWxzZSB0aGV5IGNhc2UgICAgYmxhdGFudGx5IG9idmlvdXMgdGhhdCBoaXN0b3JpYW4gdHdlZXQgICBNYWRlICBtaWxsaW9uICB0aGVtICB3cml0ZXJzICBlbmdpbmVlcnMgY2FsbGVkICAgIG1lYW5zICAgYWxvbmUgICB2aWV3cyByZXNwZWN0ICAgaGF2ZSByZXR1cm5lZCBhd2FyZHMgIHRoZWlyIGNsYXJpZnlpbmcgICBmZWVsICAgd3JpdGVyIGZvcmVpZ24gbWVkaWEgcmVhY2hlcyBKdXN0ICAgIGluY2lkZW50ICAgbWFrZSBldmVyeSBBbWVyaWNhbiAgIHRvdGluZyAgIHVuZm9ydHVuYXRlIGluY2lkZW50cyBtYWtlIEluZGlhbnMgRGVhciBmb3JlaWduIGhhdmUgd3JpdHRlbiB3aGF0ZXZlciAgd2FudGVkIGFib3V0IGVpdGhlciBwb2xpdGljYWwgcGFydHkgaGF2ZSBuZXZlciBiZWVuIHRvbGQgICB3cml0ZSBJbmRpYSBSZXR1cm4geW91ciAgICAgY2xlYXIgd2hhdCAgIHJldHVybmluZyAgIEluZGlhbnMgICAgZ292dCBUYWtpbmcgc2lkZXMgICBjb21tdW5hbCBkZWJhdGUgICBtYXR0ZXIgd2hpY2ggc2lkZSAgICBwaWNrZWQgICBwbGF5ZWQgaW50byBjb21tdW5hbCBwZW9wbGUgZ29pbmcgYWZ0ZXIgIGhhdmUgIHJpZ2h0ICBmZWVsIHRoaW5ncyAgZXhwcmVzcyB0aGVtIGxpa2UgV2hhdCAgaGlzdG9yaWFucyAgIGdlbnVpbmVseSBUaGlzIFRoZW4gdGhpcyBUaGVuICB3b3JrIGRvbmUgd2hhdCBhYm91dCAgc3RhbmRhcmQgIHdyaXRlIGJldHRlciB0aGFuIFRoYW5rIGhhdmUgICBhbW91bnQgdHJpZWQgbWFraW5nICBib29raW5nICAgcGFpZCBtb25leSBnb25lIGZyb20gYmFuayAgICB0aGlzIEludGVyZXN0aW5nICBLYW5wdXIgY2xhc3MgIGZpbG0gYWJvdXQgdGhlaXIgcmVmbGVjdGlvbnMgIGxpZmUgY2hvaWNlcyAgIHBhc3QgTG9va2luZyBmb3J3YXJkICAgIEluZG9yZSAgICAgY3VydGFpbiBJbmRvb3IgY29uZ3JhdHMgZmFzaGlvbiBtZWV0cyBwcmV0dHkgc2Vzc2lvbiAgdmlydHVhbCB0b2RheSAgV2F0Y2ggbGl2ZSBoZXJlIFN1cnZpdmluZyAgc2Vzc2lvbiAgdmlydHVhbCB0b2RheSAgV2F0Y2ggbGl2ZSBoZXJlIEV4Y2l0ZWQgICAgcGFydCAgSm9pbiAgdG9kYXkganVzdCB0cnlpbmcgICBwb2xsICAgdGhpbmsgd2lsbCAgICBCaWhhciBhc3NlbWJseSBXcml0ZXJzIG11c3QgIEdsYWQgICBiYWNrZWQgIG9uY2Ugd2hlbiAgb3RoZXJzIHBvaW50IGRpc2N1c3NpbmcgdGhpbmdzIHdpdGggc29ycnkgICBmaW5kICBleHRyZW1lbHkgYmxhbWUgb3JpZW50ZWQgIGNsb3NlZCBtaW5kZWQgd2hlbmV2ZXIgIGhhdmUgdHJpZWQgIGRpc2N1c3MgdGhpbmdzIHdpdGggd29yZHMgICBjb250ZXh0ICByZWFjaGluZyBqdXN0ICB0aGF0IG1hbnkgbGliZXJhbHMgYXNraW5nICAgdW5pZm9ybSBjaXZpbCBtb2RpIGJhc2hpbmcgIG1vcmUgZW5nYWdpbmcgV2hlcmUgICAgIG11Y2ggIGZyb20gdGhlc2UgZGF5cyBTcGVhayAgIHdoaWNoICAgY29tbW9uIGNpdmlsIGluc3RlYWQgZnJpbmdlIGJlaW5nICBwbGF5aW5nICB0aGVpciBuZXdzIGNoYW5uZWwgdGhpcyAgb2J2aW91c2x5IHdyb25nIGRvbmUgIGF0dGVudGlvbiAgdGFsa2luZyBhYm91dCAgc2VydmVzIHRoZW0gbWFueSBob2x5ICAgICAgSW5kaWEgVGhhbmtzICAgIGRvaW5nIHRoYXQgS2luZCAgIG1pbGQgU29tZXRpbWVzIGdvb2QgIGhhdmUgcGVvcGxlIG1ha2UgICBLZWVwcyAgIGNvbWVkeSBuaWdodHMgYmFjaGFvIHJpZ2h0IHRoYW5rcyAgICB5b3VyIGNvbmNlcm4gICBtb2NrICAgIHJldHVybmluZyBhd2FyZHMgICB0aGVpciB3b3JrIGVub3VnaCAgc3BvdCBzdWJ0bGUgcGF0cm9uaXppbmcgIHBlcnNvbmFsICB3aGVuIG90aGVyIHNpZGUgYXJndWUgYmFjayBtb2Rlc3QgYWJvdXQgIHdlbGwgcmVhZCBoYXZlIHRoZXkgcmVhZCAgIGhhdmUgIHNlbmQgICAgdGhlbSBOb2JvZHkgZmVsdCBsaWtlIHJldHVybmluZyBhd2FyZHMgd2hlbiAgIHNjYW0gcGVvcGxlICBzY3JlYW0gICB0aGVyZSAgIG1vcmUgZnJlZSBzcGVlY2ggbGVmdCAgIGdvdnQgIGhvcnJpYmxlICAgbGVhc3QgIGxpdHRsZSBpcm9ueSBvbmx5IHRob3NlICBhYnVzZSAgaG9wZSAgcmVhZCBXaGVuIHRoZXkgbWFrZSBwZXJzb25hbCBhdHRhY2tzICAgICAgcHJvdmVzIHRoZXkgaGF2ZSAgbW9yZSByYXRpb25hbCBhcmd1bWVudHMgVGltZSAgcmVzdCAgY2FzZSAgbW92ZSB0aGF0ICBoYXZlICByaWdodCBpbmRlcGVuZGVudCBqdXJ5IGdpdmUgICB3aGF0IGRvZXMgIGhhdmUgICB3aXRoICAgICAgZ292dCBwYXRyb25hZ2UgYXdhcmQgICBmaXJzdCBkZWFyICBvcGluaW9uIGNvbWVzIGZyb20gd2hhdCAgZmVlbCAgIGZyb20gICBkZWZpbml0ZWx5ICBmcm9tIHRha2luZyBwZXJtYW5lbnQgZ3Vlc3MgdGhpcyBraW5kICBleHBsYWlucyB3aGF0ICBnb2luZyAgd2l0aCB0aGlzIGF3YXJkIHJldHVybiBidXNpbmVzcyAgd2hldGhlciAgIHBvbGl0aWNhbCBQb2xpdGljaWFucyAgcHJvdGVzdGluZyBEYWRyaSBwbGF5ICB0aGVpciB2b3RlICB0aG9zZSBwcm90ZXN0aW5nICAgYWxzbyBwbGF5aW5nICBOb3RoaW5nIE5vdGhpbmcgbG9naWMgICAgIHJldHVybmluZyAgZ292dCBpc3N1ZWQgYXdhcmQgdW5yZWxhdGVkIGlzc3VlICBQbGVhc2UgICBjb2xvdXJlZCBBbWF6aW5nICBhZGRyZXNzIHRoaXMgd29uZGVyZnVsIGNyb3dkICAgb3JnYW5pc2VkIERvZXMgIHNoaXYgc2VuYSByZWFsaXNlICAgaGF2ZSBoZWxwZWQgcHJvbW90ZSAgUGFraXN0YW5pIGJvb2sgdGhhdCBoYXZlIGJlZW4gIG5vdGljZWQgQWNjZXB0aW5nICByZXdhcmQgIHRoZW4gcmV0dXJuaW5nICAgZGVtZWFucyAgYXdhcmQgRGVhciBjb25jZXJuZWQgZGVzaXJlICBTYWhpdHlhIGFjYWRlbXkgYXdhcmQgIGp1c3QgYWJvdXQgIG11Y2ggICBudW1iZXIgIFNhaGl0eWEgYXdhcmQgd2lubmluZyBib29rcyAgaGF2ZSB0aGVyZSAgYXdhcmQgcmV0dXJuICAgdGhleSB0aGVuICAgICBibGFjayBzdHlsZSAgIGZvcmdldCAgZXZlciByZXR1cm4gIGF3YXJkICBkb2VzICAgICAgIGV2ZXJ5d2hlcmUgIHJlY2VpdmVkICAgcmV0dXJuZWQgICAgZXJhc2UgIG1lbW9yeSAgZXZlciBnZXR0aW5nIEhhcHB5IE5ld3MgIFdvbWVuICAgZmlnaHRlciBwaWxvdHMgICBJbmRpYW4gICBjb29sIGFsc28gc3VwcG9zZWQgIHJldHVybiAgU2FoaXR5YSBBY2FkZW15IE1ha2UgaGVhZGxpbmVzICBXb3JrIGhhcmQgIHBlb3BsZSAgc29tZXRoaW5nIGNvbW11bmFsICBXaGljaCBtdXNpYyB0YWxlbnQgRmlyc3QgdmlkZW8gdXNpbmcgcGFyYWRpc2Ugam9pbiBoYW5kcyAgcHJvbW90ZSAgbXVzaWMgdGFrZW4gZnJvbSBIZWFyZCBjb3VwbGUgICAgICAgZ2l2ZXMgICBjaGlja2VuICAgZ2l2ZXMgICAgIHdlYXIgbGVhdGhlciBFeHRyYW9yZGluYXJ5IFdlbGwgQ29uZ3JhdHMgICByZXN0IHBvbGl0aWNpYW4gdXN1YWxseSBkb2VzIHNvbWV0aGluZyBiZWNhdXNlICBwZW9wbGUgIHZvdGUgICB3YW50ICBwb2xpdGljaWFuIGFsb25lIGNhbm5vdCAgYmxhbWVkICBiZWluZyBGaXJzdCB2aW9sZW5jZSAgdXBob2xkIGFwcHJvdmFsICBXaGVuIGRvZXMgd3Jvbmdkb2luZyBmdW5ueSAgcGVvcGxlICB0d2lzdGluZyAgcHJldiAgICBzYXlpbmcgIHJlbGlnaW91cyBiZWxpZWZzICAganVzdGlmaWNhdGlvbiAga2lsbCBDcmltaW5hbHMgbGF3bGVzcyBJbmRpYW4gIGtpbGxlZCAgaW5ub2NlbnQgIERhZHJpICBhYm91dCBtdXNsaW0gYmVzdCAgc2VsZiBtYWRlICAgIGRlYnV0ICB3aXNoICAgICBnaXZlbiBJbmRpYSAgbWFueSBzbWlsZXMgR2xhZCBXaGF0c2FwcCBjaGF0cyAgZ29vZCBuaWdodCAgY3VkZGx5IERyZWFtcyBTbGVlcCBJbmRpYW4gdHJ1c3QgIHdpbGwgICBib21iICBob3VzZSB0aGlzIGxvdmVseSBsYWR5IHdyaXRlcyAgICBleHByZXNzZWQga25vdyB3aGF0ICBtZWFuICBDUkFQICBzaG91bGQgIEFybXkgICBkZW1vY3JhY3kgdGFrZSAgIGdvdnQgIHRoaXMgcG9saXRpY2FsIHdoaWxlICBoYXZlICAgIHN0eWxlIHNvY2lhbCBtZWRpYSBhdHRhY2tzIHNob3cgdGhlcmUgIHBvbGl0aWNhbCBiYWNraW5nICB0aGlzIGhvcGUgYm90aCBzaWRlcyAgIE9ST1AgZGViYXRlICBhY3Jvc3MgIGZpZ3VyZSAgIHBlYWNlZnVsICBJbmRpYW4gQXJteSB3b3JrcyAgIEluZGlhbiAgYWdhaW5zdCBNYXliZSB0aGVyZSAgZ2VudWluZSBncmlldmFuY2VzICAgbWFraW5nICBBcm15ICBnb3Z0IG5hcnJhdGl2ZSByZW1pbmRzIG11c3QgdGhpcyBzb3J0ICBwb2xpdGljYWwgb3JnYW5pc2F0aW9uICAgZm9yY2VzICAgIGV4dHJlbWVseSBkaXN0dXJiaW5nIGhhdmUgbWFpbHMgc2F5aW5nIGhhdmUgIGlkZWEgd2hhdCAgICAgIHdhbnQgIGZyb20gIHRoZXkgcmVwcmVzZW50ICB3aWxsIE9ST1AgY29sdW1uICBiZWVuIHBvc3RlZCAgbWFueSBBcm15IHR3aXN0ZWQgICAgcGVvcGxlICBiZWluZyBwcm92b2tlZCAgYXR0YWNrIEdldHRpbmcgaHVnZSBhbW91bnQgIHBvb3JseSBwZXJzb25hbCBhdHRhY2sgaW5zdWx0ZWQgdGhyZWF0ZW5pbmcgbWFpbHMgZnJvbSAgY2FsbGVkIGtlZXBlcnMgU21hcnQgICBzYW5lIHZvaWNlIEVtb3Rpb25hbCBncm91cHRoaW5rICBldmVudHVhbGx5IE5ldmVyIHN0b3AgQmVjYXVzZSAgcmlnaHQgdGhpbmcgIG9uY2UgIHJpZ2h0IHRoaW5nICBiZWVuIHNhaWQgIGhlYXJkICB3ZWFrZW5zIEhlcmUgICBzZWVtcyAgaGF2ZSB0b3VjaGVkIHJlYWQgeW91ciBib29rcyBiZWNhdXNlICBzYWlkICBpbmNlbnRpdmlzaW5nICAgICBzaG91bGQgY2FyZWZ1bGx5ICB0aGluZ3MgIG1heGltaXNlIEJlaW5nIG1hdWxlZCAgc29jaWFsICBiZWNhdXNlICBzYWlkIGxvb2sgIE9ST1AgQnVsbHlpbmcgYm9yZXMgU3RpY2tpbmcgYWZmZWN0ZWQgIGF0dGFjayAgICBjaGluYSBsaW1pdGVkIGluY29udmVuaWVuY2UgICAgICBqdXN0aWZpY2F0aW9uIEtpbGxpbmcgIHN1ZmZvY2F0aW9uICBjaG9wcGluZyBLbm93IHlvdXIgcmlnaHRzIGJhbm5pbmcgIFRoZW4gICByZWFjdGlvbiBHbGFkIGVtaW5lbnQgSmFpbnMgIGNvbWluZyBmb3J3YXJkICBzcGVha2luZyBhZ2FpbnN0ICB0aGF0ICBkZXNpZ25lZCAgbWVtYmVycyAgb3RoZXIgcmVsaWdpb25zIExpa2VsaWhvb2QgIEFueXRoaW5nICAgYW55dGhpbmcgICB3aXRoIGdvdmVybm1lbnQgIGxhd3MgICBkZW1vY3JhY3kgIGRlc2lnbmVkICBwcm90ZWN0ICAgdGFrZSBJbmRpYSBUb2RheSAgIHdpdGggZHJlYW1zICAgZnJlZSBXaGVuIGVkdWNhdGVkIHBlb3BsZSB0aGluayAgdGFsayBsaWtlIFRoYXQgIHdyb25nICAgICAgIG5ld3MgY2hhbm5lbCB0aGF0IHJlcG9ydHMgIGV2ZXJ5IGJlY2F1c2UgdGhleSBoYXZlIG5vdGhpbmcgbG9naWNhbCAgYXJndWUgd2l0aCAgIHNjYXJlICB0aGV5ICBhZnJhaWQgIHNwZWFrIHRoZWlyIG1pbmQgdW5saWtlIHNlbGVjdGl2ZSAgSGF2ZSBzcG9rZW4gIG1hbnkgdGltZXMgYWJvdXQgTXVzbGltIEhvbm91cmluZyAgaW1wb3NpbmcgICBpc3N1ZSBkaXNjdXNzaW5nIHJlbGlnaW9uICBiYW5zICB3b3VsZCBsb3ZlICBoZWFyIHBvbGl0ZSByYXRpb25hbCBUaG9zZSAgdGhpbmsgYmV5b25kIENvbmcgIHN0YXkgcHJvYmxlbSAgIGxpdmUgICBmcmVlIGNvdW50cnkgICB3YW50IHBlb3BsZSAgIGZyZWUgICAgYnVsbGllZCB3aXRoIHRoZXJlICAgIHZpZXdzIHdvdWxkICAgc2FtZSAgIGFib3V0IGZvcmVmYXRoZXJzIHdvcmtlZCBoYXJkICAgIGdpdmUgICAgZWFzaWx5IGp1c3QgYmVjYXVzZSAgcGFydGljdWxhciAgc3VpdHMgeW91ciBhYm91dCAgYWJvdXQgICBhYm91dCB1c2luZyBzdGF0ZSBwb3dlciAgaW1wb3NlIHlvdXIgcHJlZmVyZW5jZXMgIGFub3RoZXIgICBmcmVlIHRob3NlICBjbGFpbWVkIHRoZXkgZ3VhcmQgIHJlYXNvbmluZyAgIG5vdGUgdGhhdCAgQm9yZGVyIFNlY3VyaXR5IGV2ZXIgZmVlbCB1bmRlciBjb25maWRlbnQgYWJvdXQgd2F0Y2ggICAgbW92aWUgbmVpdGhlciAgdGhleSBydWRlICByYWNpc3QgbGlrZSBtYWxpZ25pbmcgIGNvbW11bml0eSAgIHJlYXNvbiBHbGFkICBmaW5hbGx5IGNvbWUgQWxzbyBnbGFkIGdvdnQgdG9vayAgdGltZSAgdHJpZWQgIGJhbGFuY2UgZXhwZW5zZSB3aXRob3V0IGJlaW5nIHN3YXllZCB5b3VyICByZWFsbHkgdGhpbmsgICBiZWluZyAgIGp1c3QgdGlyZWQgIHNvbHV0aW9ucyBQcmVjaXNlbHkgIGZpbmdlciBwb2ludGluZyB0aGF0IG5lZWRzICBzdG9wIGZyb20gcGVyc29uYWwgIGNvbm5lY3RpbmcgZGlzY29ubmVjdGVkIGhhdmUgICB3aGF0ICBoYXZlICBwcm90ZWN0ICBsZWFzdCAgICBzdWdnZXN0aW5nIGtpbGxpbmcgbWFueSAgbXVjaCAgbGVhcm4gZnJvbSBIYXBweSB0YWtlIHRoYXQgbmF0aW9uIHdhbnQgICBuYXRpb24ganVzdCB3YW50cyBSYWtoaSB0b21vcnJvdyBTdGF5IEF2b2lkIHRhbGtpbmcgICB3b21lbiBpbmNsdWRpbmcgIFNpdHVhdGlvbiBzaG91bGQgIG5vcm1hbCBFbmpveWVkIFRydWUgZWRnZSAgIHNlYXQgdGhyaWxsZXIgICBjdXJyZW50IENvbmdyYXRzIFBhdGVscyAgdmVyeSB3ZWxsICAgIGJlY2F1c2UgICAgIG1ha2UgSW5kaWEgaW50byAgbGFuZCBFdmVyeW9uZSB3YW50cyBFdmVyeW9uZSB3YW50cyAgaGF2ZSAgaGF2ZSBGaXJzdCB0aW1lIGJlZW4gcHJhaXNlZCAgICBvZGRseSBUaGFua3MgR29vZCBtb3JuaW5nIHdhc2hvdXQgbW9uc29vbiBzZXNzaW9uIGVsb3F1ZW50IHBvbGl0aWNpYW5zIExvdmVseSBldmVuaW5nIHdpdGggZmluZXN0IGxhc3QgV2F0Y2ggIGxhdW5jaCAgSW5kaWEgIEluc3RhTGl2ZWx5ICBpbnRlcmFjdCBjbGljayAgIGxpbmsgR2V0dGluZyByZWFkeSAgIHBhbmVsIGRpc2N1c3Npb24gd2l0aCBMYXVuY2hpbmcgdG9kYXkgIFdhdGNoICBldmVudCBMSVZFICAgeW91ciByZW1pbmRlcnMgbGF1bmNoIHRvbW9ycm93ICB3YXRjaCAgZXZlbnQgTElWRSAgIHlvdXIgcmVtaW5kZXJzIG9ubHkgY29tcGxhaW4gIHVuZGVyc3RhbmQgdGhpbmdzICB3b3JrIHRoZW0gUHJlb3JkZXIgdGhlcmUgICAgICAgdGhlcmUgYWxzbyAgc2NpZW5jZSAgIFByZW9yZGVyIGNvbnRlc3QgICBiZXN0IHBsZWRnZXMgIHNwZWNpYWwgcHJpemVzIGZyb20gUGxlZGdlIHRoYW5rcyAgbXVjaCBkZWFyIG5hdGlvbiB0aGF0IGRyZWFtcyAgSm9pbiAgIEluZGlhbnMgTWFraW5nIEluZGlhIEF3ZXNvbWUgIEludml0ZSAgcGFzc2VzICBFbWFpbCBuYXRpb24gdGhhdCBkcmVhbXMgIEpvaW4gICBJbmRpYW5zIGZyZWVkb20gYmVjYXVzZSBTYWFyZSBKYWhhbiAgQWNoY2hhIEhpbmR1c3RhbiBKb2luICB5b3VyIGFjY29yZGluZyAgICAgIHBlcnNvbiAgICBXaWxsICBoZWFydGZlbHQgcmVzcG9uc2VzIG5lZWQgIHVuc2hhY2tsZSAgd29tZW4gIGJlaGF2ZSAgdHVuZSB3aXRoICByZWFsIHdvcmxkIFByZW9yZGVyIG1pbGxpb24gcGxlZGdlcyAgICBldmVyeSBwbGVkZ2UgIGRvbmF0ZSB0b3dhcmRzIEpvaW4gaG9wZSAgcmVjZWl2ZWQgIHBhY2thZ2UgIGxpa2VkIFRoYW5rICAgZG9pbmcgeW91ciBwYXJ0IEhvcGUgIHJlY2VpdmVkICBwYXJjZWwgIGxpa2VkIFRoYW5rcyAgZG9pbmcgeW91ciBsZXNzb24gZnJvbSB3YXNob3V0IHBhcmxpYW1lbnQgc2Vzc2lvbiB0aGF0ICAgIHRoYXQgIGhhdmUgIGNvbW1vbiBFY29ub215IFJ1cGVlIFJlZm9ybXMgUG9sbCBwcm9taXNlcyBzZWVtICAgb3ZlciBHYW5kaGkgZmFtaWx5IGZ1bGwgbWFqb3JpdHkgZ292ZXJubWVudCAgdG90YWwgd2FzaG91dCBwYXJsaWFtZW50IHNlc3Npb24gIGFueW9uZSBnb3Zlcm4gVGltZSAgdGhhbiBwb2ludCBMZXNzIHRoYW4gIHdlZWsgICAgeW91ciBjb3B5ICAgZmlyc3QgbWlub3JpdGllcyAgIHRoZWlyIHN1Y2Nlc3MgbGllcyBQcmVvcmRlciBoZXJlIEhvcGUgIHJlY2VpdmVkICBwYWNrYWdlICBsaWtlZCBUaGFuayAgIGRvaW5nIHlvdXIgcGFydCBob3BlICByZWNlaXZlZCAgc21hbGwgdG9rZW4gIGFwcHJlY2lhdGlvbiAgbGlrZWQgVGhhbmsgICBkb2luZyB5b3VyIHBhcnQgaG9wZSAgIHlvdXIgcGFja2FnZSAgbGlrZWQgVGhhbmsgICBkb2luZyB5b3VyIHBhcnQgdGhhbmtzICAgcGxlYXN1cmUgcGhvbmUgYmVjb21pbmcgIGNlbnRyZSAgY29tbXVuaWNhdGlvbiAgZXZlcnl0aGluZyAgcmVtb3RlIEFiaWxpdHkgIHdvcmsgIHRlYW1zIHdoaWxlICBwaHlzaWNhbGx5IHdpdGggVGhleSBhbHJlYWR5ICB0aGV5IHdpbGwgaGF2ZSAgY29tcGV0ZSB3aXRoIEluZGlhbnMgTWFrZSAgSW5kaWEgICBoYXZlICAgcmVhZHkgIHBlb3BsZSAgd2FudCAgY29tZSBjb25uZWN0aW5nICBjb2xsZWN0aW5nIGlkZWFzICByZWR1Y2luZyAgbWFraW5nIHdvcmsgZmxleGlibGUgZnJvbSBIdWdlIFdoYXQgd29ycmllcyAgIHdpbGwgIHN0YXkgbW90aXZhdGVkIGVub3VnaCAgY2hhbGxlbmdlIG15c2VsZiAgICBhdm9pZCByZXNwZWN0ICB0YWxlbnQgdGFraW5nICBtZWFucyAgcmV0YWluICAgIGZvcmNlZnVsbHkgIHdpdGggd291bGQgIGZ1bGwgdGltZSAgZmxleGlibGUgd291bGQgIHRoYXQgIHdoYXQgIHN0cml2ZSB3b3VsZCBlbXBvd2VyIHBlb3BsZSAgIGNyZWF0aXZlICBwcm90ZWN0IHRoYXQgY3VsdHVyZSBoZXJlICBhbnN3ZXIgc3VjaCBzdGltdWxhdGluZyBncmVhdCBmb3JtYWwgZWR1Y2F0aW9uIHN5c3RlbSAgIHdpbGwgaGF2ZSAgc3VwcGxlbWVudCAgbGVhcm5pbmcgcHVzaCBnb3Zlcm5tZW50ICBvcGVuIGVjb25vbXkgIGNyZWF0ZSAgIGluZGl2aWR1YWwgZXhwbG9yZSBXZWxsIFN1bmRhciBQaWNoYWkgIGNvbW11bmljYXRpb24gY29uZmlkZW5jZSBhZGFwdGFiaWxpdHkgbWlnaHQgICAgYXJlYXMgIHdvcmsgbWF0Y2hlZCB3aXRoIGluZGl2aWR1YWwgSG9zcGl0YWxpdHkgRWR1Y2F0aW9uIHdpbGwgYWx3YXlzIHJlbWFpbiAgcHJpbWUgIHRlY2ggd2lsbCBwbGF5ICAgcm9sZSAgcGVyaGFwcyBndXlzIGV4Y2l0aW5nIGNvbnRlc3QgICBmcm9tICBjaGVjayAgIGp1c3QgaGF2ZSBJbmRpYW5zIHdhbnQgY2hhbmdlICAgc2FtZSB0aW1lICBzY2FyZWQgIFByZW9yZGVyIFdpbGwgbWFjaGluZXMgcmVwbGFjZSBXaWxsIGVtYWlscyBDaGF0IHdpdGggICAgICBzdGFuZCAgICBBcHBsZSBoZWFyIHNvbWV0aGluZyAgIHdvcmtlZCAgIHRoaXMgd29uZGVyZnVsIGNoZWNrIHRoaXMgIG5pY2UgY29udGVzdCBkb25lIEluZGlhICBiZXN0c2VsbGVyIGxpc3QgIFRoYW5rICBndXlzICB5b3VyIEhhcHB5IEJpcnRoZGF5ICAgZGVhciBmcmllbmQgIHRhbGVudGVkICAgIGRpcmVjdG9yIEdsYWQgZ292ZXJubWVudCAgYW5vdGhlciBsb29rICAgcG9ybiAgb3JkZXIgIGVuc3VyZWQgaW5kaXZpZHVhbCBmcmVlZG9tICAgIHJlc3BvbnNpdmUgZ292dCAgYWx3YXlzIFdpbGwgIHNpZ25pbmcgY29waWVzICAgbmV4dCBib29rIE1ha2luZyBJbmRpYSBkaWdpdGFsIGZ1dHVyZSB3aWxsIGNoYW5nZSB3aGVyZSAgICAgIENoYXQgd2l0aCBBbnlvbmUgICAgb3BpbmlvbiBkaWZmZXJlbnQgZnJvbSB5b3VycyBtdXN0ICBBZnRlciAgIGFsd2F5cyBPbGl2ZSAgb25seSBJbmRpYW4gY3VsdHVyZSBkZXNpIGdoZWUgZnVubnkgIHNob3dzIHBpenphIGV4cGVjdCAgIGdsYWQgIGFncmVlICBsaWtlIHBvaW50cyAgbWFrZSBQb3JuICAgIFBvbGl0aWNhbGx5ICB2ZXJ5IHNtYXJ0ICBtYW5hZ2UgcHJpdmF0ZSBDaGlsZHJlbiAgIGZ1dHVyZSAgICAgc2Nob29scyAgZmFpbGluZyBQcmVvcmRlciBFeGNlbCAgeW91ciBXaGF0ZXZlciAgICAgIGJlc3QgIFByZW9yZGVyIFN5bXBhdGhpc2luZyAgZ2xvcmlmeWluZyAgY29udmljdGVkIHRlcnJvcmlzdCAgZGVhdGggIG1ha2UgICBvbmx5IGRlbWVhbnMgIHBvbGljZSBsb3N0ICBJbmRpYW4gaGVybyAgIEFiZHVsICB3aWxsIGFsd2F5cyBBd2Vzb21lICBzb21ldGhpbmcgdGhhdCAgd29ydGh5ICAgUHJlb3JkZXIgUGFybGlhbWVudCBhZGpvdXJuZWQgICB0aGV5IGV2ZW4gc2hvdyBNYWtlICBXaGF0c2FwcCAgIHJlc3BvbmQgd2l0aCBjYW5ub3QgIHRoZW0gc3BvaWwgIGNvbnRlc3QgIHdoaWNoIHBlb3BsZSAgZ2l2aW5nIHdvbmRlcmZ1bCB0aGFua3MgbXVzdCBjYXRjaCBSVGluZyAgIGdvb2QgQmFzZWQgICByZXNwb25zZXMgICB0aGV5ICAgd2lsbCBkZWNpZGUgV2lubmVyIGdldHMgZGVhcnRoICBwb2xpdGljaWFucyB0aGluZyB0aGF0IHdpbGwgaGVscCAgd2lubmVyIGdldHMgIEhhc2h0YWcgSGFwcHkgIHNoYXJlIHRoYXQgICBib29rIEluZGlhIHdpbGwgcmVsZWFzZSAgSW5kZXBlbmRlbmNlIFNjaWVuY2UgY29uZmlybXMgdGhhdCBJbnRlcm5ldCB0cm9sbHMgcmVhbGx5ICBob3JyaWJsZSBQYXJsaWFtZW50IGFkam91cm5lZCAgdGhpbmsgZXZlcnkgY29sbGVnZSBjbGFzcyByb29tIHNob3VsZCBoYXZlICBzcGVha2VyICAgYWRqb3VybiBjbGFzcyAgcGVvcGxlICAgICBtb29kIE5hY2ggICByZWFsaXR5IFRpbWUgIHNvbWUgcmVhbCBBbm5vdW5jZW1lbnQgTmFjaCBCYWxpeWUgU3VjaCAgR3JlYXQgZW50ZXJ0YWlubWVudCAgZmluYWxlIFRoYW5rcyAgZW50aXJlIHRoYW5rICAgeW91ciBGZWFyICAgICAgIHRoaXMgICAgTmFjaCBCYWxpeWUgbW9vbmxpZ2h0ICBwZWFjZSAgZ29vZG5lc3Mgc2hpbmUgICAgeWVhciB1bnRoaW5rYWJsZSAgICBkYW5jaW5nICAgTmFjaCBCYWxpeWUgZmluYWxlIHRoaXMgIGZyb20gZXZlcnlkYXkgICBvZmZlcmVkIHlvdXIgIGJvb2sgICB0cmFmZmljIHNpZ25hbCBQcmFjdGlzaW5nICBOYWNoIEJhbGl5ZSAgICBXaXRoICB0ZWFjaGVyIFJhanUgVGhvc2Ugc3VnZ2VzdGluZyAgbG9vayBkb3duICBuZWVkICBoZWFkcyB3b3JrICAgIHByb3VkICAgYWJ1c2l2ZSBUaG9zZSAgIHdyb25nIG9mdGVuIGRydW0gIHN1cHBvcnQgYmFzZWQgIGlkZW50aXR5ICBwbGF5IExpa2UgIGFidXNpdmUgU2F5aW5nIHNvbWUgcGVvcGxlIGhhdmUgIGNvbXBsZXggYWJvdXQgdGhlaXIgc2tpbiBjb2xvciAgICBzYW1lICBkZW5vdW5jaW5nICBza2luIFNhbWUgICBQcmV0dHkgQ29uZ3JhdHVsYXRpb25zICAgIGFtYXppbmcgdmljdG9yeSAgIGluc3BpcmUgIG1ha2UgICBmZWVsIFdyaXRlIGNvbHVtbiBoZXJkIHRydWUgdm9pY2UgICBoZXJkIGNhcmVzIGFib3V0IGNoZXRhbiBiaGFnYXQgbmFjaCBiYWxpeWUgaWRpb3QgZG9lcyB0aGF0IGdpdmUgICByaWdodCAgYWJ1c2UgdGhlbSBIYXZlICBhYnVzZWQgd29tZW4gdGhlbiB0aGlzICBhcHBsaWVzICAgY2hvaWNlICB1bmRlcmdhcm1lbnQgdGhvc2UgICAgSW50ZXJuZXQgY2FsbGVkICBsZWFybiAgcmVhZCB0aGluZ3MgIHRoZXkgICBhcHBseSBIYXZlICBhYnVzZWQgIGFwcGx5IFdpbGwgc2lkZSB3aXRoIFVyZ2UgICAgIEhlcmRzICBzb2x2ZSBub3RoaW5nIEhhdmUgcG9pbnRlZCAgdHJhaXRzICBUaG9zZSB0cmFpdHMgbWFrZSAgICBvZnRlbiAgICBvZnRlbiBUaGVyZSAgIHBsYWNlICBhYnVzZSAgIGxpa2UgYmVoYXZpb3IgIHBvbGl0aWNhbCBkZWJhdGVzICAgd2lsbCAgd2hhdCAgICAgc3VjaCBub25zZW5zZSB0aGFuayAgICAgIHRob3NlICB3aWxsIGJlZW4gZG9pbmcgdGhhdCAgIHllYXJzICBnbGFkICBmaW5hbGx5IHRoYW5rcyAgbXVjaCBrbm93IGNhbWUgZnJvbSAgY3JlZGl0IGF2b2lkIGNvbmZpcm1hdGlvbiBjb21tZW50ICBldmVyeSBpc3N1ZSAgICAgIGxpa2UgIHdvcmsgY2FwaXRhbGlzdCBtb25leSBmdW5kaW5nIGVjb21tIGNvbXBhbmllcyB0aGF0ICB0dXJuIHNlbGwgc3Vic2lkaXNlZCBwcm9kdWN0cyAgY29tbW9uZXJzICAgYmVzdCBpbmNvbWUgZXF1YWxpdHkgZXhlcmNpc2UgIGFnZXMgSW5kaWFuIG11c2ljIGxhc3QgQm9sbHl3b29kIHNlbGVjdCAgbmFycm93IHBvb2wgbW9zdGx5IGhlYXJkICB3aWxsICBBcHBsZSBtdXNpYyBmdXJ0aGVyIEJlZW4gdHJ5aW5nIEFwcGxlIFJlYWxseSBXb25kZXIgd2hhdCB3aWxsIGhhcHBlbiAgIHZhbHVhdGlvbiBzdHJlYW1pbmcgYnJlYWtpbmcgIHdpdGggIHdoYXQgT25seSAga2luZHMgIHBlb3BsZSAgSW5kaWEgVGhvc2UgIGhhdmUgaHVuZyAgd2l0aCBMYWxpdCBzbWFydCBzcG9ydCBlbnRlcnRhaW5lciAgcG9saXRpY2lhbiBrbm93cyBwZW9wbGUgc3VwcG9ydCBkZXBlbmRzICB0YWtlIFN1cHBvcnRpbmcgIHBvbGl0aWNhbCBwYXJ0eSBtZWFuIHN1cHBvcnRpbmcgIHRoZWlyIG1pc3Rha2VzICBnaXZpbmcgdGhlbSBibGluZCBWb3RlcnMgIGRpc2NpcGxlcyBDb25ncmVzcyB3YW50cyAgICBnb29kICAgYmV0dGVyICAgdGhlbSAgdGhhdCB0aGFuIGNvbnN0YW50bHkgcmVtaW5kaW5nIHRoZW0gIHRoZWlyIHBhc3QgdHVybiBwcm9maWxlIHBpY3R1cmUgcmFpbmJvdyBmb3JnZXQgSW5kaWEgZ3JhbnQgICAgdGFrZSBTZWN0aW9uIHNob3VsZCAgICBzdHVwaWQgIGluZnJpbmdlbWVudCAgaHVtYW4gQ3JpY2tldCBnYW1lcyAgIGJvYXJkICAgSW5kaWFucyBzdG9wIHdhdGNoaW5nICBmb2N1cyAgb3RoZXIgZWRpdG9yIGludGVyZXN0aW5nIGludGVydmlldyAgICBib29rIE9ycGhhbmFnZSAgIGNoZWNrIEJhbmtzICBBVE1zIHNodXQgZG93biAgQ291bnRyeSAgYnJpbmsgIExlc3NvbiAgd2hhdCBoYXBwZW5zIHdoZW4gIGdvdmVybm1lbnQgb3ZlcnNwZW5kcyBiZWNhdXNlIGdvdnQgICBpbnNlcnQgaXRzZWxmICAgIHNob3VsZCBjcmVhdGUgIGZyZXNoIGJyYW5kIGxpa2UgIElJTXMgIG1ha2UgIGJldHRlciB0aGFuIEdvdnQgd29ya3MgIG5ldmVyIGFsbG93cyAgY2VudHJlICBleGNlbGxlbmNlICBGdWxsIHN1cHBvcnQgICBib2FyZHMgIGtub3cgICAgSUlNcyBiaWxsIGVmZmVjdGl2ZWx5IHdhbnRzIGV2ZXJ5IGRlY2lzaW9uICAgICAgYXBwcm92ZWQgIFdpbGwgZGVzdHJveSAgICAgY2VudHJlcyAgZXhjZWxsZW5jZSBHb3Z0IGFscmVhZHkgZGlsdXRpbmcgIGJyYW5kICBvcGVuaW5nICBvbmVzIHdpdGhvdXQgc2FtZSBwbGVhc2UgaHVydCB0aGVtIGZ1cnRoZXIgIHRha2luZyBhd2F5IHRoZWlyIGF1dG9ub215IEZvdXIgYWN0cyBjb21pbmcgICBOYWNoIHJpZ2h0IGRhbmNlICByZWFsIG1vbHRlbiBjaG9jb2xhdGUgdGFzdGVkICAgcGxhc3RpYyBJbnNhbmUgTmFjaCBCYWxpeWUgYW5pbWF0ZWQgZmlsbSBhYm91dCAgICAgYmVzdCBmaWxtcyAgaGF2ZSBzZWVuICAgbWlzcyBTY3VscHRvciAgZ2lnYW50aWMgICBuZWVkIG1vcmUgVGhhbmtzICAgIHVuZGVyc3Rvb2QgIGltcG9ydGFuY2UgIGJlaW5nICBwYXJlbnQgICBwb3NpdGl2ZSByb2xlIG1vZGVsIGV4Y2l0ZW1lbnQgIHJpc2VzIHdpdGggIGludGVyZXN0aW5nIHRoZW1lICAgZm9yZ2V0ICBjYXRjaCAgIHRvbmlnaHQgbW9yZSBpbnNlY3VyZSAgIGJpZ2dlciB0aGVpciBMZWFybiBzdXJ2aXZhbCAgbWF0dGVyICB0ZXJyaWJsZSB0aGluZ3MgZmlndXJlICAgYmVzdCBjb3Vyc2UgIGFjdGlvbiBwcmVpdHkgICAgdGhpbmsgIHRoYXQgb3ZlcnNtYXJ0IHdyaXRlciBqdWRnZSBzaXR0aW5nIG5leHQgaGF0ZSB5b3VyIHByZXR0eSBzb29uICB3aWxsIHN0YXJ0IGhhdGluZyBXaXRoIGRpc2N1c3NpbmcgZGV0YWlscyAgICBtYW55IGV4Y2l0aW5nIFdhdGNoIHRoaXMgQ3JpY2tldCAgIGhhbGYgIGVudGVydGFpbmluZyAgY3JpY2tldCBtaXhlZCB3aXRoIGhhbGYgIGNyb3JlICAgYXV0aG9yICBoYWxmIFRoYW5rICAgICAgdHJ1ZSBNdWNoIEluZGlhbiBXaGF0IEFybmFiICB3aGF0IHBlb3BsZSB0aGluayAgd2hhdCBBcm5hYiAgd2hhdCBwZW9wbGUgdGhpbmsgIHBlb3BsZSAgdGhpbmsgIHdoYXQgQXJuYWIgaHVtYW4gYm9keSAgd2VsbCAgIHNvbWV0aW1lcyAgIGJldHRlciAgICAgd291bmQgdGhhbiAgIHNwcmVhZCBUb25pZ2h0IE5hY2ggQmFsaXllIHdoZXJlIGNvdXBsZXMgaGF2ZSAgZGFuY2Ugd2hpbGUgdGllZCBBaXJpbmcgTmFjaCBCYWxpeWUgd2lsbCAgdG9uaWdodCBzdWNoICBsb3ZlbHkgc3RheSAgVGhhbmtzIGd1eXMgIHRoZXNlIGxpdHRsZSAgY2hvY29sYXRlIG90aGVyIGZvb2QgIGNvbHVtbiB0aGVzZSBOYWNoIEJhbGl5ZSBob3N0cyBSaXRodmlrIGFjdGluZyAgc21hcnQgdGFraW5nIGRpZ3MgIFdpbGwgdGFrZSB0aGVtICB0YXNrIEFueXRoaW5nIGRyaWVkICBtb250aHMgICBtb3N0bHkgZG91Z2ggICBoZWFsdGh5ICBQcmV0dHkgTWFnZ2kgbmV2ZXIgIExlYWQgaGVhbHRoeSBGb29kIEluc3BlY3RvcnMgIEluZGlhICAgICAgIGdsb2JhbCAgbGlrZSBhbGxvdyB0aGlzICBXaWxsICBnbG9iYWwgIHBsZWFzZSB3aWxsIHNvbWVvbmUgZnJvbSAgcHJvbWlzZSBzdGVybiBzdGVwcyAgIHdpbGwgICAgIGJyYW5kIGdhbWUgY29sbHVzaW9uICB1bnNjcnVwdWxvdXMgYWdlbmNpZXMgIGZvb2QgcmVndWxhdG9ycyBsZWFkcyAganVuayBiZWluZyBzb2xkICBlbW90aW9uYWwgbmVjdGFyICBJbmRpYW5zIHRpbWVzICBjb21lICBNYWdnaSBjcmlzaXMgd2lsbCAgcHJpbWUgZXhhbXBsZSAgd29yc3QgIG1hbmFnZW1lbnQgU211ZyAgc3R1cGlkICBleGVjcyBEZWFyICBvd25pbmcgIGZhc3QgIGxldHRpbmcgeW91ciBicmFuZCBhbWJhc3NhZG9ycyAgIGFtcGxpZmllZCAgY3Jpc2lzICAgYmxldyAgIHlvdXIgdGFrZSAgSW5kaWFucyAgIGxpZ2h0ICAgTWFnZ2kgRG9uZSAgd2hpbGUgbWVudGlvbnMgaW5zdGFudCBub29kbGVzIE1hZ2dpIE5vb2RsZXMgICBmYWNpbmcgIGJpZ2dlc3QgIGZhc3Rlc3QgIGRpc2FzdGVyICAgc29jaWFsIG1lZGlhIENvb2tlZCAgbGVzcyB0aGFuIG1pbnV0ZXMgdGhpcyBCcmFuZCBhbWJhc3NhZG9ycyByZXNwb25zaWJsZSAgdGhlaXIgICAganVzdCAgTWFraW5nIHlvdXIgc2hhYWRpIHdvcmsgIHlvdXIgZ2xhZCAgIE5hY2ggRmluZGluZyBlcGlzb2RlcyByZWFsbHkgZW50ZXJ0YWluaW5nICBtYWtpbmcgIG1hbnkgdmlld2VycyBHbGFkICAgdGlueSByb2xlICBwbGF5IE5ldmVyIHRob3VnaHQgd2lsbCB3aXRuZXNzICBsaXZlIGVuZ2FnZW1lbnQgICAgIGVwaXNvZGUgYWlyaW5nIFNvbWV0aGluZyB0ZWxscyAgIEJDQ0kgIEZJRkEgZ3V5cyB3b3VsZCAgYWxvbmcgcmVhbGx5IExvdmVkICBHb29nbGUgSGFuZ291dCB3aXRoIFdhdGNoIE5hY2ggQmFsaXllIEFub3RoZXIgZXBpc29kZSAgT25seSAgU3RhciBTYW1lICBzb2NoIG5heWkgc29tZSAgIGhhdGUgdHdlZXRzIHNlbnQgICAgTmFjaCBNYW55IG5vYm9keSAgYmVsaWV2ZWQgICAgVGhpcyAgYmVsaWV2aW5nICAgIG1hZGUgc2hvd3Mgd2hlbiBNYWRlIHNldmVyYWwgdHdlZXRzIHJpZ2h0ICB3aGljaCB3b3VsZCBoYXZlIGRlZmluaXRlbHkgY2F1c2VkIGhhdGVycyAgYWJ1c2UgIG1ha2UgcGVyc29uYWwgIFdlbGwgZG9uZSBzYW1lIGh1bmRyZWQgIHR3aXR0ZXIgb2Z0ZW4gIGRpZmZlcmVudCBwb2xpdGljYWwgIGdhbmcgIGxpa2UgICAgYWJ1c2UgIGFsbW9zdCBSb3dsaW5nIHJlY2VudGx5IHNwb2tlICBhZ2FpbnN0IHR3aXR0ZXIgd2hlbiAgZ2F2ZSBwb2xpdGljYWwgRmFjZSAgc2FtZSBTdGVwcyAgIGNvbWJhdCAgY29uc3RhbnQgSW1wb3J0YW50IHBlb3BsZSBmZWVsIGhhcmFzc2VkICB0aGV5IGp1c3QgZXhwcmVzcyB0aGVtc2VsdmVzIFRoYW5rcyAgIHNldHRpbmcgYXV0b21hdGljYWxseSBmaWx0ZXJpbmcgIGFidXNpdmUgIHRocmVhdGVuaW5nIHR3ZWV0cyBmcm9tIE11Y2ggR29vZCBuZXdzICAgICBmaWd1cmVzICAgIG1ha2VzICBsb29rICBzdGlsbCBjYXJyeSAgIHNoaXJ0bGVzcyBsb29rIFR3aXR0ZXIgcHJhaXNlICBwYW5uaW5nICAgIG1pc2xlYWRpbmcgIGNvbnRleHQgICBJbmRpYW4gZW50ZXJ0YWlubWVudCBJbmRpYW4gVHdpdHRlciB0aW55IHBhcnQgU3RhciB3aXRoIFJhbmJpciBCZXR0ZXIgIGRyZWFtICBjb21lICB3aXRoICBpZGVhcyB0aGFuIGtlZXAgc2F5aW5nIHRoaXMgICAgQmFuZyByZWZvcm0gYW5uaXZlcnNhcnkgZ2lmdCAgIEJhbmcgcmVmb3JtICBjb2x1bW4gRG9lcyB3aGF0IHBlb3BsZSB0aGluayAgIG1hdHRlciAgICB0YWtlIFdhdGNoICByZWxhdGlvbnNoaXAgdGlwcyAgb2JzZXJ2YXRpb25zIGFyaXNpbmcgZnJvbSBOYWNoIEJhbGl5ZSAgIGJvbGVnYSBvbmx5ICBob3RzdGFyIEluZGlhbnMgZHJvcCAgc2Vuc2F0aW9uYWwgICBhc3N1cmUgICBlbnRpcmUgbWVkaWEgd2lsbCB0dXJuIGludG8gICB3aGF0IGhhdmUgYmxhbWVkICBtZWRpYSAgICBOZXh0IHRpbWUgIHNob3VsZCBzbWFzaCAgbWlycm9yICAgbWFrZSAgbG9vayBncmFiICAgIGZpcnN0IHNlY29uZCBwcm9tbyBDb25ncmF0cyAgbmV3bHkgIHN1cGVyIGZ1bm55IGhvc3QgIE5hY2ggQmFsaXllICAgbG92ZWx5IFdhaXRpbmcgIEhlcmUgICAgZmlyc3QgbG9vayBwb3N0ZXIgQ29uZ3JhdHMgICAgdGhlaXIgIFJvY2sgam9kaXMgIGhhbmRsZSAgcHJlc3N1cmUgIHdpbGwgICAgQ2F0Y2ggdGhlbSB0b25pZ2h0IHNlcmlvdXNseSAganVzdCAgIGJhbnRlciB3aXRoICAgICAgIHNlbnNlICBodW1vdXIgICBTaWxseSAgcmVhZCBtb3JlIGludG8ga25vdyAgbGFwdG9wICB0eXBlcyAgc3Rvcnkgd2l0aCBuYWlsZWQgIG9mZmVyZWQgd2F0Y2hpbmcgc3VjaCB0ZWxldmlzaW9uICBzdHJhbmdlbHkgZmVlZGJhY2sgd2lsbCAgZmlyc3QgdGFrZXMgIHdoaWxlICAgICAgd2lsbCBub3RpY2UgIGZ1dHVyZSBhbHNvIHNhaWQgZ2lybCBtdXN0ICBmcm9tIGFwcHJvdmVkIGVsc2Ugd2lsbCAgIGxhc3Qgd2hhdCBOYWNoIEJhbGl5ZSAgQ2hldGFuIEJoYWdhdCBpbXByZXNzZXMgICBqdWRnZSBFbnRlcnRhaW5tZW50IGluZHVzdHJ5IHdoYXQgcGVvcGxlICB0aGV5IHdhbnQgICB3aGF0IHRoZXkgYWN0dWFsbHkgICBxdWl0ZSBQYXJ0aWN1bGFybHkgVGhvc2UgIGhhdmUganVkZ2VkICAgeWVhcnMgd2l0aG91dCB3cml0aW5nICBiZXN0c2VsbGVyIHRoZW1zZWx2ZXMgICBqdWRnaW5nICAgIGp1ZGdlICAgcmVhbGl0eSBIb3BlIHRoaW5ncyBiZWNvbWUgbm9ybWFsICBOZXBhbCBUaG91Z2h0cyAgcHJheWVycyB3aXRoIHRob3NlIEdvb2QgVGhhbmtzICB3YXRjaGluZyBTdGlsbCBEZWFyIGF0dGVudGlvbiBzZWVraW5nIEdyZWVkICBwb3dlciBOYXV0YW5raSBhbHNvICAgcGxheSB3aXRoIHBvb3IgbGl2ZXMgbWFjYWJyZSBleHRyZW1lIHJlYWxpdHkgICBiYWNrZmlyZWQgIGFwb2xvZ3kgICAgcmVhbGl0eSBHZW5lcmFsIGVudGVydGFpbm1lbnQgY2hhbm5lbHMgZ2l2ZSAgcmVhbGl0eSAgcG9saXRpY2FsIHBhcnR5IGdpdmVzICBleHRyZW1lIHJlYWxpdHkgbmVlZCAgcmVsYXggICBrbm93IENhdXNlIHRoaXMgdGltZSAgaGlnaG5lc3MgIGdvaW5nIFRoYW5rcyBndXlzICAgbG92ZWx5IFNvcnJ5IHRha2UgU29ycnkgIGZsb29kIEhvcGUgIGVuam95IFRoaXMgZ29pbmcgIHN0YXkgICBiZXR3ZWVuIGhhdmluZyBpbnRlcmVzdGluZyBleHBlcmllbmNlcyBtYWtlcyAgaW50ZXJlc3Rpbmcgc3RvcmllcyBwYXNzaW9uYXRlIGFib3V0IHdoYXRldmVyICAgICAgZW5zdXJlIHRlYW0gZmluZHMgdGhleSBoYXZlIHdhbnQgIG1ha2Ugc3VyZSAgd3JpdGluZ3MgcmVhY2ggZXZlcnkgZXZlcnkgdmlsbGFnZSAgdGhpcyBOYWNoIGdpdmVzICB0aGF0IGdvaW5nICBmb2N1cyAgICAgY291cGxlcyB0aGVtc2VsdmVzICB0aGVpciBjb25kdWN0ICB0aGV5ICByZWFsIGxpZmUgZHJlYW0gY29tZSBjcnVzaCBzaW5jZSB3YW50ICB3cml0ZSAgY3JlYXRlICBpbXBhY3QgICB0aGlzICBuZWVkIHJlYWNoICB0cnlpbmcgIGJhbGFuY2UgdW5kZXJzdGFuZCB3aGF0IGVudGVydGFpbm1lbnQgd29ya3MgIHdoYXQgb3RoZXIgc3R1ZmYgIG5hY2ggIHRoaXMgb2J2aW91c2x5IGhhdmUgZmF2b3VyaXRlcyAgIGp1ZGdlIG1ha2Ugc3VyZSBwZW9wbGUgIEluZGlhbiB2aWxsYWdlcyBrbm93IFRoZW4gdGhleSAgbW9yZSBsaWtlbHkgIHJlYWQgIERhaW5payBCaGFza2FyIHdyaXRpbmcgICAgbWlnaHQgICBvdGhlciBBdXRob3IgIFBvbGl0aWNhbCBiZWluZyAganVkZ2UgZW5zdXJlcyBtb3JlIHBlb3BsZSB3aWxsIGV2ZW50dWFsbHkga25vdyAgIHJlYWQgdGhvc2UgIHRoaW5rIGRhbmNlIHNob3dzICBmcml2b2xvdXMgbmVlZCAgICAgY29udHJvbCBGb3J0eSBzaW11bHRhbmVvdXMgUmVhbCB0aW1lIHdyaXRlciBqdWRnZSBOYWNoIFdoYXQgZG9lcyAgdGhpbmsgTmFjaCBCYWxpeWUgZmlyc3QgZXBpc29kZSBIZWFyaW5nIG9ubHkgZ29vZCB3YWl0ICAgZ3V5cyAgIFRoaXMgU3VuZGF5IFN0YXIgRmlyc3QgdGhleSB1c2VkICBmYXN0IHVudGlsIGRlYXRoICAgYXR0ZW50aW9uICAgdGhleSBraWxsIHBlb3BsZSByaWdodCBUaGFua3MgICAgQmlydGhkYXkgIG1hZGUgICAgQWdpbmcgbmV2ZXIgZmVsdCB0aGlzIHRhbGVudGVkIGxhdW5jaGVzICBicmFuZCAgc2FyZWVzIHRvZGF5IGNhbGxlZCBSYWh1bCBHYW5kaGkgICBjb21pbmcgICAgbGVhc3Qgc2VuZCAgc2xpcHBlcnMgIHNvbWV0aGluZyAgQ29uZ3Jlc3MgIHBsYWNlIHRoZW0gICB0aHJvbmUgd2hhdHN5b3VybmFtZXMgIGZvbGxvdyBib3RoIHdyaXRlIGludGVyZXN0aW5nICBtdXN0IGxpdmUgIGludGVyZXN0aW5nIENydXNoZWQgIHJpZ2h0IGZyb20gICAgYW1hemluZyAgZXF1YWwgcGFydHMgICBuZXh0ICBOYWNoIFNoaXYgU2VuYSBTaGl2IFNlbmEgIFdoZW4gICBoYXBwZW4gbGFzdCBOaWNlbHkgTm90aGluZyBKdXN0IFVudGlsIHZvdGVycyBrZWVwIHJlc3BvbmRpbmcgIGlkZW50aXR5IHBvbGl0aWNpYW5zIHdpbGwga2VlcCBkb2luZyBpZGVudGl0eSAgYmxhbWUgIHBvbGl0aWNpYW4gdHJ5aW5nICBtYWtlIFNoaXYgU2VuYSByZWR1bmRhbnQgIGJlaW5nIHRoYW4gU2hpdiBTZW5hIGF0dGFja2luZyBhdXRob3IgIHNob3cgQW55Ym9keSBpbnZlc3RpbmcgIG11bHRpcGxleGVzICBJbmRpYSBub3RlIGdvdnQgIGZvcmNlICAgc2NyZWVuIHdoYXRldmVyIHRoZXkgd2FudCBiYXNlZCAgSW52ZXN0b3JzIFJlYWwgY29tbXVuaXR5IHByaWRlIGNvbWVzIGZyb20gcmVhbCBhY2hpZXZlbWVudCAgcmVhbCAgZGl2aXNpdmUgYnVsbHlpbmcgIHBvd2VybGVzcyAgYmVpbmcgTWFyYXRoaSBPcHRpb24gd29yayBpbXByb3ZlIGxpdmVzIG1heWJlICBPcHRpb24gIHN5bWJvbGljIHBvc3R1cmluZyBTaGl2IFNlbmEgYnVsbHlpbmcgICAgcG9zaXRpb24gdGhlbXNlbHZlcyAgbWFyYXRoaSAgIFNhdmUgYXR0YWNrIFNoYWRlcyAgIGNvbHVtbiAgICBsb3ZlICB3aGl0ZSBEZWFyIEZyZWUgd2lmaSAgdWx0cmEgaGlnaCBzcGVlZHMgd2lsbCBzdGFydCAgICB3aWZpIHNldHRpbmdzICBzZWxlY3QgYmVlbiBhcnJlc3RlZCAgIHR3ZWV0cyBtb2NraW5nIFJhaHVsIEdhbmRoaSAgY29uc3VsdGluZyAgIHR3aXR0ZXIgTWVyZSBlbXBvd2VybWVudCBXaXRoIGNob2ljZXMgY29tZSAgc3VyZSBib21iZXJzIGZlZWwgcHJldHR5IG1ha2UgdGhlbSBwcm9maXQgZnJvbSBjb21tb2RpZnlpbmcgd29tZW4gdGVsbCBvdGhlcnMgICBjb21tb2RpZnkgbGlrZSAgc2F5aW5nIHdyaXRlcnMgc2hvdWxkIG1hZ2F6aW5lIHRoYXQgcHV0cyBwaG90byAgYnJ1c2hlZCAgdW5yZWFsaXN0aWNhbGx5IHRoaW4gd29tZW4gIGV2ZXJ5IGNvdmVyIGJhdHMgUmVhZGluZyAgZW5qb3lpbmcgIG5pY2UgaW5zcGlyYXRpb25hbCBib29rICBidWRkaW5nIERyZWFtIHdvbWVuIHNob3VsZCAgYWJsZSAgIHdoYXRldmVyIHRoZXkgd2FudCB3aXRob3V0IGJlaW5nICAgIHNhbWUgYXBwbHkgZmlyZWQgIEFydmluZCBsb3ZlcnMgIHNlbmQgaGF0ZSB0d2VldHMgICBwb2ludCAgIExva3BhbCAgIFN1cHJlbW8gIGZpcmUgbW9yZSBkYXlzICBTdGlja2luZyAgICB5ZWFyIHJlc29sdXRpb24gIHNvbWV3aGF0IG1ha2VzICAgc2FpZCAgY2FwdGFpbiBNaWNoYWVsICAgb25seSAgYWR2ZXJ0aXNlcnMga25ldyBXZWxsIGRvbmUgY291cnNlICAgaW50ZXJuYWwgTWFuYWdlZCAgICBjb3B5ICAgIGludGVybmFsIHZvdGluZyBiZXN0IG5ld3MgICAgIGZvcmdldCAgYW1vbmdzdCAgIHRoYXQgYmVjYW1lIFdvcmxkICBXaGF0IGxvc2UgaG9wZSBiZWNhdXNlIHNvbWUgcGVvcGxlIGJlY2FtZSBwb3dlciB0aGVtIGNoYXNlIGxpa2UgbWFueSBXb3JrIFdoZXJlICB0aGVzZSAgY2FzZXMgIGtlZXAgYXR0YWNraW5nICAgYmlhcyB3aGVuICB3cml0ZSBIaWRlIGluc2lkZSBsaWtlIGNvY2tyb2FjaGVzIHdoZW4gIGxpZ2h0cyB0cm9sbHMgYXR0YWNraW5nICAgZnJ1c3RyYXRpb24gaW5zdGVhZCAgcmVmbGVjdGluZyAgd2hhdCAgaGF0ZSBtb2NrIGp1c3QgcGl0eSBTd2VldCAgc3VwcG9ydGVycyBkZWZlbmRpbmcgICAgYWNjb3VudGFiaWxpdHkgICB3aGljaCBTb21lb25lICAgIG9mZmljZSBldmVyIHNheWluZyAgcXVpdGUgYWdyZWUgd2l0aCB1bmZvcnR1bmF0ZSBnZW5lcmF0aW9uIHRoYXQga25vdyBjbGFzc2ljICAgd2hhdCBoYXBwZW5lZCAgIHdhdGNoIGZyb20gV2hhdCAgIHRvZGF5IHJlbWluZGVkICAgIG1vdmllIFJlbWVtYmVyIHdoZW4gU2hha2FsIHRvc3NlZCAgY2hhaXJzIGludG8gIGNyb2NvZGlsZSBOZXZlciBzZWVuIHN1Y2ggIGJyYXplbiBkaXNwbGF5ICBwb3dlciAgb3VzdGluZyAgcHJldmlvdXMgY29sbGVhZ3VlcyAgc3VjaCAgaHVtaWxpYXRpbmcgY29vbCB3b3VsZCAgICBoYXZlICBzdGluZyB3aGVyZSBzdXBlciBzd2VldCBsYW5ndWFnZSAgdG90YWxseSBsb3NlcyAgZ2F5YSBsb3NzICB0aGF0ICAgd2lubmluZyBmZWVscyAgICAgIHdpbGwgYW5ub3lpbmcgIHRoZXNlIHVwYmVhdCAgICBicmVhayBsb29rIHdoZW4gSW5kaWEgIGxvc2luZyBEZWVwIHNlYXRlZCBJbmRpYW4gc2V4aXNtICB3b21lbiBiZWluZyBkaXN0cmFjdGluZyBvYmplY3RzIHdoaWxlICAgcGVyc2V2ZXJpbmcgc2FpbnRzICAgIGhhdGUgYWdhaW5zdCBhd2Z1bCB3aGVuIHBlb3BsZSBsYXNoICAgIHNpZ25pZmljYW50IG90aGVyICBwbGF5ZXIgcGxheSB3aW5zICAgICAgIG5lZWQgICBsYW5kICAgZmVhciAgY291bnRyeSAgIEluZGlhIEJlc3QgIGx1Y2sgUmFodWwgR2FuZGhpIGdvaW5nICBjb21lIGJhY2sgYmVmb3JlIEFwcmlsIEp1c3QgYWJ1c2luZyBwZW9wbGUgICBsb25nZXIgIG1ha2UgICBuaWNlIHRoaW5nICBMaWtlIGJyZWFraW5nIGV2ZXJ5b25lIGhhcHB5ICAgICB0aGVyZSAgIGZpcnN0IFdoaWNoICBlYXNpZXIgIGRlZmVhdCAgICB0aGF0ICBrbm93ICAgc3VwcG9ydCB0b2RheSBvbmx5ICBkZWZlYXQgdGhlbSBHbGFkICBrbm93IHRoYXQgIGxpdmUgICBmcmVlICAgIHN0cmlrZXMgIFN1cGVyIHRyb2xsIHJhdGhlciBkb2luZyBzb21ldGhpbmcgdGhhdCBtYWtlcyBwZW9wbGUgZmlyc3QgICAgIGVuZHMgd2l0aCBiZWxpZXZlICBwdWxsZWQgdGhhdCBhcG5lICAgdGhhbmtzIHdpbGwgICAgIGp1ZGdlcyAgTmFjaCBCYWxpeWUgSGVyZSAgIHRob3VnaHRzIGhlbHBlZCBtYWtlIG1vdmllcyB0aGF0IHBhaWQgbG9hZHMgIHRheGVzICAgZWFybmluZ3MgICBpbmRpYW4gZ292dCBwYXlpbmcgIG1hbnkgbW9yZSBIYXBweSBCaXJ0aGRheSAgICAgIGFjdG9ycyBFeGNpdGVkICAgICBQYXJ0ICAgcGFuZWwgZGlzY3Vzc2lvbiAgRWR1Y2F0aW9uICB3YXRjaCBsaXZlICBub29uIG9ubHkgIHJvYXN0IHR5cGUgbGFuZ3VhZ2UgIGFsbG93ZWQgIG5ld3MgbWlsayBEZWxoaSB0b25zICB2b3RlcnMgd2FpdGluZyAgcGFyayB0aGVpciBhbm5veWluZyBwcmluY2lwbGVkIHR5cGVzICBwbGVhc2UgRmFjdCAgbW9yZSB2b3RlcnMgc3VwcG9ydCAgdG9kYXkgdGhhbiB2b3RlcnMgIHN1cHBvcnQgICBkZWFyIHBvYWNoaW5nIE1MQXMgIHVzaW5nIHJlbGlnaW9uIGNhcmQgIHBvbGl0aWNhbCB0aGVuICBndWVzcyBicmVha2luZyBib25lcyAgYm9kaWx5IG9mZmljaWFsIHNvbmcgICBwb2xpdGljYWwgdHJlbmQgcmVtaW5kcyAgICBhcnRpY2xlICAgIGxpYmVyYWwgYXJ0cyBlcWl2ICAgZnJvbSBzcGVha3MgIGJlaGFsZiAgIGFjdHVhbGx5IGJlbGlldmUgIGVtcG93ZXJpbmcgdGhlbSBiZWNhdXNlIHRoZW4gd2hhdCB3aWxsIFRoZXkgdG90YWxseSBqdXN0IHB1YmxpY2x5IGFkbWl0ICByZWFkaW5nICBsaWtpbmcgdGhlbSBkb2VzICByZWFkIHlvdXIgbWFpbnN0cmVhbSBjdWx0dXJlIHdpdGggIGVudGl0bGVtZW50IGNvbXBsZXggIHNwZWFraW5nIGdvb2QgRW5nbGlzaCBhbnl0aGluZyBnb29kIGV2ZXIgY29tZSAgICBjb3Jwb3JhdGUgbGlrZSAgZnJvbSB0aGF0IGJsYWNrIGhvbGUgIHRpbWUgd2FzdGUgY29uZmVyZW5jZSBNb3N0IGNvbXBhbmllcyAgYnVzeSBkb2luZyB1c2VsZXNzIG1lZXRpbmdzICBtYW5hZ2luZyBlZ29zIGluc3RlYWQgIGlubm92YXRpbmcgIHVuZGVyc3RhbmRpbmcgQnV6eiBBcHBsZSBhY2VzICBWZXJ5ICBicmFuZHMgICB3b3JsZCBjb21lIGV2ZW4gc2xpZ2h0bHkgZG9lcyAgZ2lhbnQgY29ycCBsaWtlIEFwcGxlICAgbmltYmxlICAgcmlnaHQgIG1hbnkgICBkb2VzICBidW1ibGluZyBjb21wZXRpdGlvbiBhbHdheXMgcGxheXMgTmV2ZXIgd29yZSAgd2F0Y2ggICAgQXBwbGUgV2F0Y2ggYWxsaWFuY2UgbG9va3MgIGdhbWUgICAgIGdldHMgIHBsYXkgdmljdGltIGFmdGVyICBicmVha3VwICB0aHVzIGdhaW4gbW9yZSBwb2xpdGljYWwgU29tZSB0aGlzIHRpbWUgICBwb3N0aW5nIHRoYXQgc2NhcnkgbWlkd2F5IGJlZm9yZSBhZnRlciBzcGVjaWFsIHNob3cgV29tZW4gQWlycyBEZWFyICAgYmVpbmcgY2xhc3Npc3QgIHdoZW4gc3VnZ2VzdGVkIHNob3VsZCAgc2VlbiAgIGhhdmUgYWNjZXNzICB0aGV5IGJlc3QgICAgZ292ZXJubWVudCAgbWFrZSAgd2F0Y2ggc29tZXRoaW5nICB0aGVtIHNheWluZyBwbGVhc2Ugd2F0Y2ggRGVhciAgIGtub3cgbWFueSAgICAgdHJ1c3QgICB1cmdlICAga2VlcCBvcGVuICAgZm9sbG93IHNvbWVvbmUgbXVzdCB0YWtlICAgICAgICBodW1hbiBiZWluZyAgaHVtaWxpYXRlICBraWNrIHRob3NlIHBlb3BsZSAgIHdlcmUgIHlvdXIgc2lkZSB3aGVuIG5vYm9keSBlbHNlIE1heWFuayBHYW5kaGkgd3JpdGVzICBibG9nICB0YWtlcyAgamliZSAgIEd1ZXNzIHRoaXMgb25jZSAgbmVlZCAgZGVjaWRlICAgIGRlbW9jcmFjeSAgICBkZWNpZGUgdGhhdCAgICBzdG9wIGJhbm5pbmcgdGhpbmdzIGV2ZXJ5IEZvcmdldCAgbXVzdCBBbnlvbmUgIHdhdGNoZXMgd2lsbCB1bmRlcnN0YW5kIGRldmFzdGF0aW9uIGNhdXNlZCAgcmVncmVzc2l2ZSBGYWNlIGZvdW5kICBtb3JlIHNlbnNpdGl2ZWx5IGRvbmUgdGhhbiBtYW55IGFuZ3J5IHVnbHkgaW52YXNpdmUgZGViYXRlcyAgIHNhbWUgaXNzdWUgdGhhdCBoYXBwZW4gRG9jdW1lbnRhcnkgIHRob3VnaHQgTWFrZXJzIGhhdmUgcGFyZW50cyAgWW91dHViZSBMYWNrICBjb25zZW50ICBiYW5uaW5nIGZyZWUgc3BlZWNoIGNvbWVzICAgc2FtZSBjYXRlZ29yeSB2aW9sYXRpb24gIGluZGl2aWR1YWwgRXZlcnlvbmUgICBwb2ludCAgIG1hdHRlciAgIHNob3VsZCAgIGFmcmFpZCAgaGVhciBPbmx5IHRoZW4gdHJ1ZSBjaGFuZ2Ugc2lsZW5jZSAgdGhvc2Ugdm9sdW50ZWVycyAgcXVpdCB0aGVpciBqb2JzIGJlY2F1c2UgIHRoaXMgY29vbCAgcGFydHkgd2hpY2ggIGRpZmZlcmVudCBsb3ZlICBwb2xpdGljcyBmaW5hbGx5IHVubWFza3MgICAgIGh5cG9jcmlzeSAgUG93ZXIgbm90aGluZyBzdG9yeSB3aGVuICBNYWhhbCAgIGVtcGVyb3IgICAgaGFuZHMgICBwZW9wbGUgIG1hZGUgY29tbWVudCAgd2hldGhlciB3aGF0ICAgIHJpZ2h0ICBKdXN0IGZpbmRpbmcgICBmYXNjaW5hdGluZyBzdHVkeSAgc29jaWFsICBodW1hbiBXaGVuICBoYXZlICBuZWVkICBPbmNlICAgICBlYXNpbHkgIG1hbnkgUG9saXRpY2FsIGRyYW1hIHRvZGF5ICBiZWF0aW5nICBCb3NzIEZyZWVkb20gICBsb25nICAgIHdoYXQgIHdhbnQgRnJvbSB3aGF0ICBJbmRpYW5zIHdhbnQgIHRydWUgIHdhbnQgIGtpbmcgYWxvbmcgd2l0aCAgcmlnaHQgIGFib3V0IE1ha2luZyBzb21lIGdlbmVyYWwgdHdlZXRzIGFib3V0IHBvbGl0aWNzICAgIHBhcnRpY3VsYXIgcGFydHkgc3VwcG9ydGVycyAgZ2V0dGluZyB0aGVpciBndWlsdHkgTmV2ZXIgICBkaXJ0eSB3b3JrIHlvdXIgbWluaW9ucyB3aWxsIGhhcHBpbHkgZm91bmRlcnMgYmVjb21lIFdpdGggICBoYXZlICB3ZWVkIHRoZW0gaW5qdXJ5ICAgIGRvbmUgICAgIHNob3VsZCAgIHNldmVyZSB0aGF0ICB2ZW5nZWFuY2UgbmVlZCAgIE5pY2NvbG8gTWFjaGlhdmVsbGkgTWFyeWxpbiBadWNrZXJiZXJnIHNldHRsZSB3aXRoICAgICBzY2hlbWUgICBzcGVlZGluZyBzb2NpYWwgbmV0d29yayBBZHZpY2UgICAgQWNjZXB0IFNlcnZlICAgc2hhbGwgIHJld2FyZGVkIFRoaXMgIGxvb2tpbmcgIGF3a3dhcmQgICAgZmlyc3QgV2hlbiBjaGV3aW5nICBsb3NlcyB0YXN0ZSAgc3BpdCAgV2hlbiAgaG9yc2UgIHVzZWxlc3MgICAgV2hlbiAgcG9saXRpY2FsIGNvbGxlYWd1ZSAgIGxvbmdlciBuZWVkZWQgdGhlcmUgcHJvYmFibHkgIGZvdXIgYnVuZ2Fsb3dzICBtYWxhYmFyIGZhdWx0IEhhdmUgd2lsbCBzdHJpa2UgIGZvb3Qgc2hvdWxkICB3YXRjaCBmaWxtcyAgU2FkaHZpIGFuaW1hbHMgICBzb21lIGFuaW1hbHMgIG1vcmUgZXF1YWwgdGhhbiBHZW9yZ2UgQW5pbWFsIEZhcm0gbG9uZ2VyIHdoYXQgIGZvdW5kZXJzIHBsZWFzZSBzdG9wIEFydmluZCBwYXJ0eSBhdHRyYWN0cyBhbnRpIGNvcnJ1cHRpb24gdm90ZSAgYWxzbyAgbW9kaSBoYXRlciBiaWdnZXN0IHRocmVhdCAgIENvbmdyZXNzICBhbm90aGVyIFBlb3BsZSBkaWdnaW5nICB5ZWFyICB0d2VldCAgVmFkcmEgbGFuZCBzY2FtICAgY29udGV4dCAgICBvcHBvc2VkIGxhbmQgYmlsbCB0aGVuICAgVXN1YWwgdHJvbGwgbWFuYWdlZCAgd2l0aCBmaW5taW4gIEJ1ZGdldCBwb3N0IFRoYW5rcyAgd2F0Y2hpbmcgVGhhbmtzICAgdW5pcXVlIG9wcG9ydHVuaXR5ICB3b25kZXJmdWxseSBvcmdhbml6ZWQgaGF2ZSAgICBpbnRlbGxlY3R1YWwgIGFib3V0ICB3aGF0ICB3YW50ICBhbnN3ZXIgVGFsa2F0aG9uIHdpdGggICBzZWVuIGxpdmUgIGxpdmUgdGVsZWNhc3QgdGFsa2F0aG9uIHdpdGggICBpbml0aWF0aXZlICAgZGVteXN0aWZ5ICBidWRnZXQgIGJyaW5nICBsZWFkZXJzIGNsb3NlciBIYXNodGFnICAgICAgaGF2ZSAgIFdpbGwgYW5jaG9yICB0YWxrYXRob24gd2l0aCBIYXBweSAgIGFuY2hvcmluZyBUYWxrYXRob24gd2l0aCAgICAgIFdhdGNoIExpdmUgR29vZCBSYWlsIEZsYXQgZmFyZXMgcGFzc2luZyBmYWxsICBlbmVyZ3kgRm9jdXMgIGVmZmljaWVuY3kgICB0YWFsaW1hYXIgZnJlZWJpZXMgR3VqYXJhdGkgZWRpdGlvbiAgSGFsZiBHaXJsZnJpZW5kIHB1Ymxpc2hlZCAgTmF2YmhhcmF0IFNhaGl0eWEgTWFuZGlyICAgeW91ciBjb3BpZXMgbWFpZCBmcm9tIHZpbGxhZ2VzIHdpdGggICAgIGJlbmVmaXRzIGNvb2tzICBjbGVhbnMgdGhlaXIgdHdpdHRlciAgZ29vZGVycyBzZW5kIFRoaXMgICAgZmFybWVyICBpbmR1c3RyaWFsaXN0ICAgIFNvcnJ5ICBjbHV0dGVyIHlvdXIgdGltZWxpbmUgVGhvc2Ugc2F5aW5nICAgdGFrZSBsYW5kcyBmcm9tIGFzc3VyZSAgbWFueSByaWNoIHBlb3BsZSB3aWxsIHNlbGwgbGFuZCAgbWFya2V0IHByaWNlIHBsdXMgc2hhcmUgIGZ1dHVyZSBsYW5kIERvZXMgSmFudGFyIE1hbnRhciBoYXZlIGZyZWUgSnVzdCBUaG9zZSBwcmV0ZW5kaW5nICBjYXJlICBmYXJtZXJzIHRvZGF5ICBub3RoaW5nICB0aGVtIHdoZW4gIHBvd2VyICBTdGlsbCBrZXB0IHRoZW0gdGhlaXIgbGFuZHMgVW5kZXJ2YWx1ZWQgbGFuZCBnZXRzIHZhbHVlICBvbmx5ICAgaW5kdXN0cmlhbGlzdCBTaGFyaW5nIHRoYXQgdmFsdWUgcmVhc29uYWJseSAgIEhhcHB5IFZpYWJsZSBXaGF0ZXZlciBjb21tdW5pc20gaW5jbGluZWQgcGFydGllcyAgdGhlcmUgICBkYXJrIHJvb20gd2hlcmUgcmljaCBpbmR1c3RyaWFsaXN0cyAgd2l0aCBnb3Z0ICAgbG9vdCBTaGFtZWZ1bCB3aGVuIG9wcG9zaXRpb24gdHJpZXMgIHNjb3JlIGNoZWFwIHBvbGl0aWNhbCBwb2ludHMgIHN0dWNrIFRoZXkgIHRoZXkgTGFuZCB0cmFkZXMgIG5ldmVyIGdvaW5nICAgIG1lYW4gIG5vdGhpbmcgIG1ha2UgbGF3cyB0aGF0IG1ha2UgSW5kaWFuIHByb2plY3RzIFdpdGggIGdvdnQgICAgbGFyZ2VseSBiYWxhbmNlZCAgIG5lZWQgIHByb3RlY3QgZmFybWVycyAgYWxzbyBlbnN1cmUgcHJvamVjdHMgYmVlbiBjYWxsZWQgICAgSG9uZGEgQW1hemUgZHJpdmUgdGhyb3VnaCAgYW1hemluZyBSYW5uICBtaXNzIEdyZWF0ICBoZWFyICBHb3Z0IHdpbGwgIGFsbG93ICBncm91cCAgaW5jaXRlIGhhdHJlZCB0aGlzIGNoYXB0ZXIgICAgZXZlcnlvbmUgIHR3aXR0ZXIgbGl2ZWQgaGFwcGlseSBldmVyICBuZXh0IHRyb2xsIGNoYXB0ZXIgICBmYW1vdXMgY29tbWVudGF0b3Igd291bGQgIHRoYW5rcyBEZWFyIHdpbGwgICAgVWdseSAgIG1pZ2h0ICAgc3RpbGwgIE1heWJlICAgZHJlc3MgIGdyZWVuIHN1cmUgICBjb29sIGdpcmwgIG1vc3QgbGlrZWx5IHdpbGwgICB3aXRoICB1Z2x5IEluZGlhbiAgICBNZWFudCAgICB0YXN0ZSB0YXN0ZWxlc3MgIGNvbW1lbnQgYWJ1c2luZyAgICAgZ2l2aW5nICByZXRvcnQgbWVhbiAgZW5kb3JzZSBUaGF0IE9ubHkgIHNlbGYgc3R5bGVkIGNvb2wgcGVya3MgICAgICByaWdodGVvdXMgd2l0aCBFYXNpbHkgIGJlc3Qgc29uZyAgIHllYXIgIHdpdGggZnJvbSBFdmVyeSB0d2l0dGVyICAgYmFzaWNhbGx5IGJldHdlZW4gYmFja2dyb3VuZCBibG9vZHkgbGliZXJhbHMgSW1hZ2luZSAgcmVhY3Rpb24gICBtYWxlIGVkaXRvciAgc2FpZCBJbmRpYW4gd29tZW4gIHVnbHkgIFBha2lzdGFuaSB3b21lbiAgICAgdHJ1ZSBEZWFyICAgIHVnbHkgSW5kaWFuICAgYmVsaWV2ZXMgd29tZW4gIGVxdWFsIHRoYW4gICBQYWtpc3RhbmkgICBzb2NpZXR5IHdoZXJlIHdvbWVuIGhhdmUgYmFzaWMgcmlnaHRzIERlYXIgdGhhbmsgICBiZWluZyB0aGVyZSAgbWFraW5nICBmZWVsICBtdWNoIGJldHRlciBhYm91dCBpbnNpc3RlZCAgICB3b3VsZCBoYXZlIGJlZW4geW91ciBjZW50dXJ5IExpa2UgIGludGVuc2UgICBzdGlsbCBvYnNlc3NlZCB3aXRoIGVhY2ggb3RoZXIgQ29tbWFuZG1lbnRzICBNb2RpIEhhbGYgICBSZWxlYXNlcyBHdXJnYW9uIGNoYXJnaW5nIHlvdXIgcGhvbmVzICBkb3dubG9hZGluZyAgdXBkYXRlcyAgRGVsaGkgYmVjYXVzZSAgY2hlYXAgZWxlY3RyaWNpdHkgIGZyZWUgd2lmaSBjb29sZXN0IHNwb3QgICB3aWxsIHNvb24gIHdoZXJlICAgZWxpZ2libGUgICAgZ292dCBsYXB0b3AgIHN0aWxsICAgZnJlZSB3aWZpIHNpZ25hbCBmcm9tIGZyZWUgbGFwdG9wIGZyb20gIGdvdnQgICAgIGZyZWUgd2lmaSBmcm9tIENoZWFwIGJvb3plIGZyb20gbGlmZSBUaGVzZSB3ZXJlICAgaG9hcmRpbmdzICBGcmVlIFdpZmkgICAgIHRlcm1zICBjb25kaXRpb25zIGFwcGx5IHdpZmkgICBvbmx5ICAgc29jaWFsIG9ubHkgZ292dCBUaGlzIEp1c3QgaGlkaW5nIHNvbWUgU2hhZGVzICBHcmV5IEluZGlhIHZlcnNpb24gIG9ubHkgbWludXRlcyBjb21wcmlzaW5nIG9ubHkgIHN0YXJ0ICAgQ291bGQgc3RpY2sgICAgIHRyYWlsZXIgYmVmb3JlIHRyb2xscyBhdHRhY2tpbmcgICBiZWluZyAgY2xvc2UgICB0cm9sbHMgYXR0YWNraW5nICAgYmVpbmcgY2xvc2UgIFRyb2xsIFRyb2xsIGNhbmNlbHMgaGF2ZSAgYm90aGVyZWQgICAgICAgIGRlc2VydmVkIEhhdmUgIGV2ZXIgY3JpdGljaXplZCAgIGZyaW5nZSBlbGVwaGFudHMgd2lsbCAgICAgICBtZXNzYWdlICB3aGF0c2FwcCB0aGF0ICAgIGNhbmRpZGF0ZSBmcm9tIHB1bmphYiAgdXBjb21pbmcgd2FudCAgIGdpdmUgcHJhaXNlIHdoZW4gY3JpdGljaXNtIHdoZW4gICBsaWtlZCAgeW91ciB2b2ljZSB3aWxsIGFwcGFsbGluZyBiZWhhdmlvciAgZGVzZXJ2ZWQgdGhleSBkZXNlcnZlICBjbGVhbiBzbGF0ZSBOb3RoaW5nIG5vdGhpbmcgVGhvc2Ugc3ByZWFkaW5nICBoYXZlIGJlY29tZSAgZmFuYm95IG5lZWQgICBoZWFkICAgbGlrZWQgIFNvdXRoIEFmcmljYSBwbGF5ZWQgIGJlY29tZSBTb3V0aCBBZnJpY2Egc3RpbmdpbmcgY3JpdGljaXNtICAgIHNvbWV3aGF0IHdoaXBwZWQgdGhlbSBiYWNrIGludG8gaGVscHMgcGFydGllcyBtb3JlIHRoYW4gc2FtZSBHbGFkICBzcG9rZSAgYWdhaW5zdCBvdmVyZW50aHUgZmFucyBtYWtpbmcgIE1vZGkgICAgZGVtaSBPbmx5IGRlbW9jcmF0aWNhbGx5IGVsZWN0ZWQgY2hhbmdpbmcgdGhpcyBhdHRpdHVkZSAgZWdSVCAgbG9zcyAgbXVuaWNpcGFsaXR5ICAgZG9ncyBzdGFydCBiYXJraW5nICBvZmZlcmluZyB0aGVpciBjaGVhcCBvcGluaW9ucyBEb2luZyBjb2x1bW4gIHdoYXQgICBuZWVkcyAgICBzd2VldCAgcHJldHR5IEFwcGVhcnMgcG9saXRpY2FsIHBhcnR5IHdpbnMgIGVsZWN0aW9uICAgIHBhcnRpY3VsYXIgcGFydHkgcGVyZm9ybXMgICAgZGlmZmVyZW50IGJlaW5nIHNwZWNpZmljIFR3aXR0ZXIgICBoYXZlIHByYWlzZWQgIHBhcnR5IG9uY2UgICBuZXZlciBjcml0aWNpc2UgIGFnYWluICAgIGhhdmUgY3JpdGljaXNlZCB0aGVtICAgbmV2ZXIgZXZlciBwcmFpc2UgdGhhbmtzICAgc3VyZSBXaGF0ICBleGNpdGluZyBzaGlmdCAgZmlyc3QgdGltZSBkb2luZyBwb2xsIGFuYWx5c2lzIHdpdGggQ2VsZWJyYXRpbmcgRGVhdGggICB2aWRlbyAgUHJheWVyIFdpbGwgIGFtYXppbmcgICAgZ2xlZSAgQ29uZ3Jlc3Mgc3Bva2VzcGVyc29ucyBmYWNlcyB0b25pZ2h0ICBuZXdzICBoYXBwaWVzdCB6ZXJvIHNlYXQgcGFydHkgU2hpdiBTZW5hIHByYWlzaW5nIFdvbmRlciAgdGhleSByZWFsaXplICB3aWxsIGNvbWUgIE11bWJhaSAgICBzYW1lICB0aGVtIGJyZWFrZG93biAgcmVzcG9uc2liaWxpdHkgICAgTW9kaSBJcm9uIERvbWUgIENoYW1jaGFzIGFyb3VuZCAgTW9kaSBEZWxoaSAgS2lyYW4gQmVkaSBhcG9sb2d5IGZyb20gICAgbG9zaW5nIHRvdWNoIHdpdGggIHBlb3BsZSB3b3VsZCAgIGxvbmcgRm9sbG93ZWQgIG1ham9yIHJlZm9ybXMgIGNoYW5nZXMgUmVhZHMgbGlrZSAgY3JpY2tldCBMZWFybiAgTGlmZSBnb2VzIHRoaW5rIHdoYXQgIGJlc3QgIEluZGlhICB0aGF0IG1vbWVudCAgbWFrZSAgSG9wZSBleHBlY3RlZCAgZW50aXJlIERlbGhpICBNTEFzIENvbmdyZXNzICAgdGhpcyAgd2hhdCAgY2FsbCB6ZXJvIE1vZGkgIEFydmluZCAgRmluYWxseSB0d2l0dGVyIGdldHMgd2hhdCAgYWx3YXlzIHdhbnRlZCAgIGZpcnN0IHBsYWNlIGhpZ2hlc3QgbnVtYmVyICBzZWF0cyAgcGFydHkgIGV2ZXIga25vd3MgIG5lZWRlZCB0aGlzICB0aGluayAgIGhvcGUgdGhleSAgZ29pbmcgIGxlYXJuIGZyb20gZGVjaW1hdGluZyAgICB0aGVpciBpbm5pbmdzIGJyaW5nICB0aGVpciBEZWxoaSBlbGVjdGlvbnMgd2l0aCAgZ3JlYXQgSGF2ZSBzYWlkICBzYW1lICAgICBwbGVhc2UgaGFuZGxlICB3aXRoIGdyYWNlIHdpdGggICBEZWxoaSBlbGVjdGlvbiBTdGF5IExvb2tzIGxpa2UgbW9yZSBkYXlzICAgTW9kaSB3YXZlICBvZmZpY2lhbGx5IHNheXMgZm9yZWlnbmVycyByZWFkICAgaW50bCB0cmFuc2xhdGlvbnMgR2FuZGhpamkgd291bGQgIHNob2NrZWQgICAgZGl2aWRlZCBJbmRpYW5zICAgc3VyZSAgd291bGQgYWxzbyBoYXZlIGJlZW4gc2hvY2tlZCAgICBtdWNoIGp1bmsgZm9vZCBBbWVyaWNhbnMgcG9wdWxhdGlvbiB0aGF0IHZvdGVzICBwcm9taXNlZCBmcmVlYmllcyByYXRoZXIgdGhhbiAgd2VhbHRoIGNyZWF0aW5nIGVjb25vbXkgIGRlc3RpbmVkICBzdGF5IHJlYWxseSB0aG91Z2h0IEluZGlhICAgb25jZSAgIGxpZmV0aW1lIG9wcG9ydHVuaXR5ICB0dXJuIGNhcGl0YWxpc3QgIG1ha2UgVHVybnMgZGVlcCBkb3duIFNvbWUgc3VpdHMgZmluYWxseSAgIGNvc3RpbmcgbXVjaCBtb3JlIHRoYW4gRm9yZWlnbmVycyByZWFkICBvYnZpb3VzbHkgZWxpdGlzdCBiYXNoaW5nIHZpZXdzICBBQVB2c0JKUCB3aWxsIGNvbWUgICAgICBhZnRlciBiZWZvcmUgY291bnRpbmcgIGF2b2lkICB1bmludGVudGlvbmFsIFNoYXJlZCB2aWV3cyAgZWR1Y2F0aW9uIHdpdGggICAgc2VlbXMgcXVpdGUga2VlbiAgbWFrZSBtYW5hZ2VkIENvbmZlcmVuY2UgICAgUmFzaHRyYXBhdGkgR3JlYXQgIHNoYXJlIHZpZXdzICBlZHVjYXRpb24gc2VjdG9yIHdpdGggcGVvcGxlIFdoYXQgIHdpbGwgICBwb3dlciAgYW5vdGhlciAgIG9waW5pb24gcG9sbHMgIGV2ZW4gICBwYWdlIHNob3dpbmcgIGdhaW5zICAgIGxhc3QgU3VydmV5IFRvZGF5ICAgICBDb25nICByb2NraW5nIGhhdmUgYWxyZWFkeSBiYWNrZWQgICAgaXNzdWUgIGJyb3VnaHQgIHNvbWUgaHlwb2NyaXN5ICBqdXN0IHBvaW50aW5nIHRoYXQgU2FtZSBwZW9wbGUgIGF0dGFja2VkICAgbHlyaWNzICBiYWNraW5nIHdoZW4gYW5nbGljaXNlZCBwZW9wbGUgICAgcmVzdCBvcmlnaW5zICBXaGVuICBhdHRhY2tzICAgb25seSBtYWtlcyAgbG9vayBTaW1wbGUgZmFjdCAgdW5hYmxlIGNsZWFyIHByZWYgICAgdGhpcyBQcm9zICBDb25zICAgc3RhYmxlICB0dXJuaW5nICB1bnN0YWJsZSAgIGFkZHJlc3Mgc29tZSBwZW9wbGUgcmVhbGlzZSB0aGF0ICB3YXZlICBub3RoaW5nICBzYWx0IGxlYWRpbmcgIG9waW5pb24gcG9sbHMgICBuZWVkcyAgVGhleSB1bnRpbCBhZnRlciBXYXRjaCAgYW1hemluZyBqb3VybmV5ICB0aGVzZSB0aHJlZSBmcmllbmRzICB0aGV5IGRpc2NvdmVyICB1bmlxdWUgYmVhY2ggcHJlc3VtaW5nICAgcGxlYXNlIGV4cGxhaW4gd2hlcmUgY2FtZSBFbHNlIHN0b3Agc2F5aW5nICAgb25seSBwYXJ0eSB3aXRoIHRyYW5zcGFyZW50IEp1c3Qgd2hlbiAgbWFrZSAgcmVtb3RlbHkgc2V4aXN0IGZ1bm55ICAgYmFqYW9lZCAgIHNhbWUgcGVvcGxlICB0b2RheSBmaW5kICByZWFsbHkgc3VwcG9ydCBob3VuZGluZyAgcGVvcGxlICBtYWtlIGRpcnR5ICB0aGF0IG1lYW4gIGZpbmQgbWFraW5nIGRpcnR5IGpva2VzIENsZWFuIEh1bW91ciBEaXJ0eSBodW1vdXIgTWFraW5nIGNsZWFuIGpva2VzICBtdWNoIGhhcmRlciB0aGFuIGRpcnR5IEFsc28gIG1vcmUgIGRpcnR5IGpva2VzICAgY2hlYXAgIGVhY2ggdGhlaXIgYWxsZWdhdGlvbiAgdGhlbSAgICBhbGxlZ2F0aW9uIHRoZXkgIGdvaW5nICBwcm9iZSAgcm9hc3QgIGFidXNpdmUgdGhleSB3aWxsIGFsc28gbmVlZCAgcHJvYmUgZXZlcnkgY29sbGVnZSBob3N0ZWwgIHRoaXMgcG90aG9sZXMgIHJvYWRzIG9mZmVuZCAgIG1vcmUgdGhhbiBsb3ZlbHkgZXZlbmluZyB5ZXN0IHdpdGggICAgVmlrYXMgSHVnZSBjb25ncmF0cyBkaXJlY3RvciAgIGZpbG1mYXJlIGF3YXJkcyAgIENvbmdyYXRzICB5b3VyIGZpcnN0IGJsYWNrIEVsZWN0cmljaXR5IGNhbm5vdCAgbWFkZSAgIGNvbWUgU29tZW9uZSBwYXlzICBGZWVsIG5lcnZvdXMgd2hlbiBzdWNoIGV4cGVjdGF0aW9ucyAgY3JlYXRlZCBNb2RpIFBvc2l0aXZlIEZpbmFsbHkgIGdldHMgIHRvZ2V0aGVyIG1hbmlmZXN0byAgIGRvY3VtZW50IHdoZXJlICB3cml0ZSB3aGF0ZXZlciBwZW9wbGUgd2FudCBTaWduZWQgICAgbmVlZCAgIGFib3V0ICBxdWljayBnYW1lIE1heWJlICBqb2luIFRoaXMgRGVsaGkgZWxlY3Rpb24gc3VyZWx5IGRlbGl2ZXJpbmcgdGhpbmdzIHdpbGwgICBxdWVzdGlvbnMgIGRheXMgICAgIGFuc3dlciB0aGVtICAgb25jZSAgICBFYXN5IG1hcmtpbmcgYm90Y2hlZCAgY2FtcGFpZ24gIERlbGhpICAgYXR5cGljYWwgIHRoZWlyIG90aGVyIHJlY2VudCBjb25maWRlbnQgIGFsbW9zdCBmZWVscyBsaWtlIGNyaWNrZXQgdGVhbSAgbWluaXN0ZXJzICBjb3VudGVyIEtpcmFuICBjb3VudGVyIFJhbGxpZXMgIGNvdW50ZXIgIHNvbWUgIHlvdXIgRGVhciBzcGVsbCAgbmFtZSBmaXJzdCAga25vdyB3b3JsZCByZXZvbHZlcyBhcm91bmQgICB0aW55IGdvb2dsZSBjb252ZXJ0ZWQgICAgdGhlbiAgIGNvbnZlcnRlZCBiYWNrICB0aGVuIGJvdGggc2V0cyAgY29udmVydGVycyAgaGFwcHkgIG5vdGhpbmcgcmVhbGx5IGNoYW5nZXMgbmV3cyBSZW1vdmUgZnJvbSBJbmRpYSBiZWxvbmdzICBzYXlzIFNoaXYgU2VuYSBBc2tlZCBLaXJhbiBCZWRpICAgcXVlc3Rpb24gIHNwZWNpYWwgICAgZ3V5cyBzYXRpc2ZpZWQgd2l0aCBPYmFtYSB0YXVnaHQgIHNlY3VsYXJpc20gZ2VuZGVyIHJpZ2h0cyAgcmVhbGx5IGltcG9ydGFudCAgIGVjb25vbXkgIFVubGVzcyAgaGF2ZSBUaGVuIG9ubHkgIHBlcnNvbiAgdHJ1bHkgcmV2aXZlICAgIEFkZWxlIHdvdWxkIGdvaW5nICAgd2l0aCBmdWxsICB0aG91Z2ggbW9yZSAgICBsaXR0bGUgZmF0aWd1ZWQgZWxlY3Rpb24gbWF0dGVycyBsZXNzIHN0aWxsIGNsZWFybHkgaG9sZHMgbGVhZCAgICAgIHNsYW0gQ2FtcGFpZ24gbmVlZHMgIHJlaW52ZW50ICBuZWVkcyBmaW5hbCAgc29tZSBob2xkaW5nICBFeHBlcmltZW50IEtpcmFuIG1peGVkIGFkZHMgY29yZSBTb3J0ICBsaWtlIGZvcmNlIGZpdHRpbmcgcGl6emEgIGRoYWJhIG1lbnUgTnVtYmVyICBpUGhvbmVzIHNvbGQgIEFwcGxlICBsYXN0IGFsbW9zdCBpUGhvbmVzICBtaW51dGUgIGRheXMgSW5kaWEgc3BsaW50ZXIgIHJlbGlnaW91cyAgICAgICBiZXN0IGZyaWVuZCAgcnVucyAgZW50aXJlIGNvdW50cnkgIHJlbGlnaW91cyBGYW50YXN0aWMgdmlkZW8gYWJvdXQgcHV0dGluZyB5b3VyIHRpbWUgIGVhcnRoICAgVGltZSAgSGF2ZSB3aWxsIHN1Y2NlZWQgIGxvbmcgICAgICByZWxpZ2lvdXMgV2hhdCBXb25kZXJpbmcgd2hlbiBPYmFtYSAgc29tZSAgIHdlYXBvbnMgICAgIHNvbGQgdGhlbSB0aGlzICAgcXVpdGUgQXBwbGUgZWFybmluZ3MgUHJlcGFyZSAgaW5zYW5lIGFtb3VudHMgIGlQaG9uZSAgc29sZCBsYXN0IFdoYXQgIGxvdmVseSBjcm93ZCAgc2Vzc2lvbiAgSmFpcHVyIFJlYWxseSAgIGdyZWF0IHRpbWUgICBUaGFuayBDb21lICB0aGluayAgIGhhdmUgIHRha2UgICBwbGFuZSAgIGFybXkgIHBlb3BsZSAgaGF2ZSAgY2hhdCB3aXRoICBjb3VsZCAgIG92ZXIgZGlmZmVyZW5jZSAgRGVsaGkgZWxlY3Rpb24gICAgIG9ubHkgIGFsc28gZmlyc3QgZWxlY3Rpb24gd2l0aCBsZXNzZXIgaW52b2x2ZW1lbnQgIE1hdHRlcnMgRnVubnkgICBsZWFkZXIgICBtb3N0IGZyZWUgY291bnRyeSAgIGhhdmUgZnJlZWRvbSAgICAgc29tZSBvcmRpbmFyeSBwZW9wbGUgU3VydmV5ICAgQ29uZyBDb25zaWRlcmluZyAgICAgc3VwcG9ydCBEZWxoaSBudW1iZXJzICAgIGdvb2QgT2JhbWEgICBjYW5jZWwgQWdyYSBIZWFyZCB0aGV5IHdlcmUgY2xlYW5pbmcgIHN0cmVldHMgIFdpbGwgdGhleSBzdG9wIEFmdGVyICAgICBqdXN0IEZyb20gd2hhdCAga25vdyAgIGxpa2UgIGNvbGxlY3QgIHRoaXMgZ3JvdmVsaW5nIHBvcHVsYXIgZG9pbmcgICBIaWdobHkgbmF0aW9uYWwgdXNlcnMgIGRlbGhpICBzdGlsbCBTb21lIHRyb2xscyBtYWtlIHlvdXIgIHRoaXMgIHNvbWVvbmUgdGVsbCBWaWJoaXNoYW4gUmVzdWx0cyAgIHJlYWwgQ2hlY2sgICAgIHdpdGggY2hhbGxlbmdlIFNvbmcgZXZlcnkgcG9saXRpY2FsIHBhcnR5IHdhbnRzICB0ZWxsICBjdXJyZW50ICAgZnJvbSAgTGVnbyBDbGFyaWZpY2F0aW9uICBWaWJoaXNoYW4gICBpbnNpZGVycyBzaWRpbmcgd2l0aCAgIGltcGx5aW5nIGFueW9uZSBTdXBlcmNvb2wgRGV0ZWN0aXZlIEJ5b21rZXNoIEJha3NoeSB3ZWxsIGRvbmUgU3VwcmVtZSBjb3VydCAgZ2l2ZSBCQ0NJICAgdmVyZGljdCAgc3RlcCBjbG9zZXIgIGZpbmFsIE9ubHkgTmV3c2hvdXIgbGVmdCBhZnRlciBQcmFpc2UgcG9saXRpY2FsIHBhcnR5IFdoYXQgIGluc2lnaHRmdWwgIHRoZW0gdG91Z2ggcXVlc3Rpb25zICBqdXN0ICB0aW1lIHBhc3MgbWFzYWxhIEhhdmluZyAgY2hhbmNlICAgY29ycnVwdCAgIGJlY29taW5nIGNvcnJ1cHQgIHZlcnkgZGlmZmVyZW50IGZyb20gIGJlaW5nIGNvcnJ1cHQgICBuZXZlciBhZnRlciAgS2lyYW4gIEFydmluZCBjb250ZXN0IG5vdmVsdHkgdmFsdWUgICAgIHRoZW0gIHJpZ2h0ICAgYWJvdXQgaG9wZSAgS2lyYW4gQmVkaSAgd2lsbCBjbGFyaWZ5IHRoYXQgZG9lcyAgICBrZWVwICBjb252aWN0aW9uICAgIG1lcmVseSBnb2luZyAgICBwYXJ0eSBTdGlsbCB3YWl0aW5nICAgIGNvbWUgIHdpdGggdGhlaXIgcG9saWNpZXMgIGludmVzdG1lbnQgIGZvbGxvd2luZyAgbGF3cyAgIGxhbmQgVGhleSB0b29rIEtpcmFuIEJlZGkgbG9vayB0aGV5ICAgVGhleSB0b29rIGludGVybmFsICBsb29rIHRoZXkgICBpbnNpZGVyIFRoZXkgIGNvbnN0YW50IFdoYXRzYXBwICAgIGNoYXQgd2hpbGUgeW91ciBib3NzIHRoaW5rcyAgICBibHVlIHRha2VzICBzZXJpb3VzbHkgVGhleSAgIHBhbmljICAgaWdub3JlcyAgdGhleSAgIFdoYXQgdGhpcyBjbGlwICBLaXJhbiBXaGF0ICAgQmV0dGVyIHNwZWVjaHdyaXRlcnMgd2lsbCAgIERlbGhpIENvdW50aW5nICBwYW5lbCAgIGV2ZW5pbmcgICAgZWxlY3Rpb24gbW9yZSBleGNpdGluZyB0aGFuIGNyaWNrZXQgTmV3c2hvdXIgICBEZWJhdGUgIHdoZXRoZXIgdGhlcmUgc2hvdWxkICAgV2hldGhlciAgICBsZWdpdGltYXRlIGRlYmF0ZSAgaXRzZWxmIHdpdGggIGJlc3QgZml0b29yIFdoYXQgd2lsbCAgIGNvb2wgYmFja2Ryb3AgICBkZWJhdGUgd291bGQgICBwaWN0dXJlICBib3RoICB0aGVtIGZhc3RpbmcgYWxvbmcgd2l0aCBXb3VsZCBsb3ZlICBtb2RlcmF0ZSAgS2lyYW4gQmVkaSAgQXJ2aW5kIEFzc3VyZSAgbmV1dHJhbCAgZmFpciBUaGVpciAganVzdCBwdXR0aW5nIEtpcmFuIEJlZGkgc2hvdWxkIGRlYmF0ZSB3aXRoICAgY29udmluY2luZ2x5ICAgICAgb3Bwb3J0dW5pdHkgIHNob3cgIHdvcmxkICBkZXNlcnZlcyBTZXZlbiBub21pbmF0aW9ucyAgaGlnaGVzdCAgQ29uZ3JhdHMgRGViYXRlcyBiZXR3ZWVuIHBvbGl0aWNhbCBsZWFkZXJzIGZpZ2h0aW5nIGVsZWN0aW9ucyBzaG91bGQgICBBYm91dCB0aW1lIHBlb3BsZSAgIGp1ZGdlIGdvb2QgcGl0dGVkIGFnYWluc3QgZWFjaCBvdGhlciAgICB2ZXJ5IFJlYXNvbmFibGUgY2hhbmNlIE9iYW1hICAgIGltcHJlc3NlZCB3aXRoIFJlcHVibGljICAgd2lsbCAgIHByZXNzICAgYW5ub3VuY2UgIGpvaW5pbmcgYmVmb3JlIHRyb2xscyB0YWtlIG92ZXIgbm9ib2R5IGFza2VkICAgdHdlZXQgcHJldmlvdXMgICBqb2luaW5nICAgICBicnVzaGVkIENlbnNvciBCb2FyZCBkb2VzIG5lZWQgcmVmb3JtICAgdG90YWxseSBmb2N1cyAgdGhhdCByYXRoZXIgdGhhbiBmaW5nZXIgZ292dCAgdGhlcmVmb3JlICBjZW5zb3IgYm9hcmQgICAgIGJ1c2luZXNzICBiYW5uaW5nIHJhcmVzdCAgcmFyZSBHbGFkIFJlbWVtYmVyIGNhc3VhbGx5IHRlbGxpbmcgICB3aGlsZSBiYWNrICBiZWxpZXZlcyAgaGF2aW5nIGdvb2QgcGVvcGxlICBib2FyZCAgdGhleSAgZGVjaWRlIHdoYXQgIGdvb2QgICBraWRzIENlbnNvciBCb2FyZCBjbGVhcmx5IGNlbnNvcmluZyAgcmVhbCBzdG9yaWVzICAgV2hhdCAga25vdyAgIG1pbmlzdGVyICAgaW50ZXJmZXJpbmcgU3ViamVjdCAgY2Vuc29yICBtb3ZpZSAgICAgbWFrZSAgbW92aWUgd2l0aCAgIFN1YmplY3QgIHJpZ2h0IGNvbG9yICBvdXRlciByaWdodCAgIHJlbGVhc2VkICBiZWVuIGNsZWFyZWQgICBDZW5zb3IgIHNpbXBsZSAgRnJlZWRvbSAgZXhwcmVzc2lvbiBBcHBsaWVzIEhhcHB5ICBzaGFyZSB0aGF0ICBDbGFzcyAgQW5uYSB3aGF0ICAgICAgZ2V0cyAgcmlnaHQgc3VjaCBkZXNpcmUgIG5lZWQgIGNhbnZhcyAgSW5kaWEgICBwYXJ0ICAgaGFwcHkgd2l0aCB0aGF0IGVudHJ5IGludG8gICBiZWZvcmUgRGVsaGkgZWxlY3Rpb25zICBjYWxsZWQgcm9wZWQgICBkZWNpZGUgIFJhaHVsIHNob3VsZCAgY2FsbGVkIFZpY2UgUHJlc2lkZW50ICBQcmVzaWRlbnQgQ29uZ3JhdHMgICBqb2luaW5nIFVudGlsIGdvb2QgcGVvcGxlIGpvaW4gcG9saXRpY3Mgd2lsbCBuZXZlciBiZWNvbWUgQmVzdCBIb25lc3R5ICAgIHN1ZmZpY2llbnQgICAgZ29vZCBUaGVyZSAgb3RoZXIgcXVhbGl0aWVzIGFsb25nIHdpdGggZHJpdmUgIHBlb3BsZSBza2lsbHMgSW5mbGV4aWJsZSAgICBwaWxhdGVzIGNsYXNzIHdpdGggc3VwZXIgZmxleGlibGUgd29tZW4gIFNvbWUgbWVtb3JpZXMgIGJlc3QgZnJpZW5kICBtaW5lIG9wZW5lZCAgY29vbCByZXN0YXVyYW50IGNhbGxlZCBaaW5nbyBTdGFyICAgIGNoZWNrIFNvbWUgcmVmbGVjdGlvbnMgICBmaXRuZXNzIHJlc3BlY3QgIEZyYW5jZSAgZ2l2ZW4gICB0aGVpciBwZW9wbGUgIG1lZGlhIGhhdmUgYmFja2VkICBmcmVlIFVubGlrZSBwcmV2aW91cyAgY2FydG9vbmlzdCBraWxsaW5ncyAgYWN0dWFsbHkgICBtb3JlIGNhcnRvb25zICBleHBvbmVudGlhbGx5IG1vcmUgcGVvcGxlIHdhdGNoaW5nIFRoZXkgIHNheWluZyBIaW5kdXMgc2hvdWxkIGhhdmUgIGhhdmUgV2hhdCBkb2VzIHRoYXQgbWFrZSBIYWxmIFNheWluZyBIaW5kdXMgc2hvdWxkIGhhdmUgIGtpZHMgIHdvcmxkIGRvbWluYXRpb24gIHRlY2huaWNhbGx5IFdoYXQgIG90aGVycyBoYXZlIE5EVFYgTGVmdCBSaWdodCBDZW50cmUgIHRhbGtpbmcgYWJvdXQgICAgc3VnZ2VzdGVkIHRoaXMgQ2hldGFuIEJoYWdhdCBMb29raW5nIGZvcndhcmQgICBjb252ZXJzYXRpb24gd2l0aCAgIGJvb2sgSnVzdCB3YW50ZWQgICAgY29uZ3JhdHVsYXRlICAgeW91ciBnb29kIHR3aXR0ZXIgbG9uZyAgZXZlcnl0aGluZyBmYWxscyBpbnRvICBXYXRjaCBHdWVzcyAgbWFkZSBzdXJlICBjYXJ0b29ucyBwdWJsaXNoZWQgICBmcmluZ2UgbWFnYXppbmUgIEZyZW5jaCBiZWNhbWUgd29ybGQgR3Vlc3MgIHJlbGlnaW9uIGNvbnNpZGVyZWQgbW9zdCBiYWNrd2FyZCAgIHdvcmxkIGJlY2F1c2UgIHRob3NlICBjbGFpbSAgIHNhdmlvdXJzICB0aGF0IHdpdGhvdXQgIGRvZXMgc2F0aXJlIG1lYW5zIGp1c3QgZGVtZWFuICBtb3N0IHJldmVyZWQgcGVyc29uICAga2lsbCBUaG9zZSAga2lsbGVkICBjYXJ0b29uaXN0cyB5ZXN0ZXJkYXkgICBwcm90ZWN0IHRoZXkgb25seSB0YWludGVkICBUaGV5ICAgcmVhbCBibGFzcGhlbWlzdHMgU2hvY2tlZCBkaXNtYXllZCAgdGVycm9yIGF0dGFjayAgIGhlYXJ0ICBIb3BlIFdlc3Rlcm4gcG93ZXJzIHJlYWxpemUgIHBvd2VyZnVsIHNvbWUgcmFkaWNhbCBncm91cHMgaGF2ZSBiZWNvbWUgd2FudHMgSGluZHUgd29tZW4gIHByb2R1Y2UgY2xhaW1zICBwZW9wbGUgIGJvcm4gICB0aG9zZSBraWRzIEhpbmR1IE1pbmlzdGVycyAgIHdvcmtpbmcgaG91cnMgICBtYWtlIFBvbGl0aWNpYW5zICAgc3R1cGlkIHRoaW5ncyBXaGF0ICAgaW5jZW50aXZpc2luZyAgbGVhZGVycyB0aGF0IHdoZW4gIEhpbmR1IGxlYWRlciBzYXlzIHNvbWV0aGluZyBzdHVwaWQgIGJlY29tZXMgIG11Y2ggYmlnZ2VyIGRlYWwgdGhhbiB3aGVuICBNdXNsaW0gbGVhZGVyIGRvZXMgdGhpcyBmdXNzIGFib3V0ICBQYWRtYSAgb25seSBQYWRtYSAgbGlrZSBOb21pbmF0ZWQgIEluZGlhbiAgICAgdGhpbmsgICAgIHBvc3RpbmcgICBmYWNlYm9vayBUaGFuayBJbnRyb2R1Y2luZyAgICB3aGlwICBpbnRvIE9ubHkgdGhvc2UgdGhhdCBhY2NlcHQgIGxvdmUgICAgICBkZXNlcnZlIHlvdXIgIHJlc3QgZGVzZXJ2ZSB5b3VyIGJlc3QgZmFrZSBjb21taXQgIHRpZWQgIHdpdGggICBsb2NrZWQgICBzY2FyZWQgIGFscmVhZHkgZmVlbCBIYXZlIHRha2VuICAgZml0bmVzcyBIYXZlICBwb3N0IGRhdGEgIHByb2dyZXNzIGV2ZXJ5ICAgIHN0YXkgd2l0aCBGaXRuZXNzIHJlZ2ltZXMgaGF2ZSBhbHdheXMgc2NhcmVkIERlY2lkZWQgIG1ha2UgICByZXNvbHV0aW9uICBBbnlvbmUgd2l0aCAgc2FtZSBEZWNpZGVkICAgICAgY29tZm9ydCB6b25lIHdpdGggIFNoYXJlZCAgSm9pbiBUaW1lIHNvbWV0aGluZyAgIHllYXIgd2l0aCAgIGZpdG5lc3MgY29udHJvbCBzdW5zaGluZSAgICBlbmpveSAgICBncmF0ZWZ1bCAgIHdoaWxlICBUaGFuayBQYXJ0bmVyZWQgd2l0aCBBaXJibmIgIG1ha2UgaGVscGVkIHR1cm4gc3RyYW5nZXIgaW50byAgR3JlYXQgIG1lZXQgSGFsZiBXaGF0ICAgIGd1eXMgaGF2ZSBzdXBwb3J0ZWQgICBUaGFuayBXaGVuICAgZG93biAgc29tZWhvdyAgICAgc2VjcmV0IGFib3V0IG1ha2luZyBiYW5rICBtaWxsaW9uICAgeW91ciAgIGJhbmsgICAgdGhlaXIgdXNlZCAgaGVhciB0aGF0ICAgYmFua2luZyBzaW1wbHkgYXNraW5nICAgaW52ZXN0aWdhdGlvbiBzZXZlcmFsIHZlcnNpb25zIGZsb2F0aW5nIGRpcmVjdG9yIHJlc2lnbmluZyAgIHNlcmlvdXMgaXNzdWUgICAgbXVzdCBwcm90ZWN0ICAgaW5zdGl0dXRpb25zICBleGNlbGxlbmNlICB0aGVpciBXaGF0ICByZWFjdGlvbiAgSGF2ZSAgIGFjcm9zcyAgVGhhbmtzIHJlc3BlY3QgeW91ciBIb3BlICByZXNwZWN0IG90aGVyIHZpZXdzIGFydGljbGUgdG9kYXkgIG1vZGVyYXRlIE1vZGVyYXRlICAgICBSZWFkIHdpdGggb3BlbiBrbm93ICB1bmRpc2NvdmVyZWQgIHRvdXJpc3RzICAgYW1hemluZyBwbGFjZXMgICBzaGFyZSByZWdpc3RlciBmb3VuZCAgTXlzdGVyaW91cyBEcm93bmluZyBDaHVyY2ggICAgIGNvbGxhYm9yYXRpb24gd2l0aCBIb25kYSBDaGVjayBvbmx5IGNvbnZlcnNpb24gIHdhbnQgICAgSW5kaWEgdHVybmluZyBpbnRvICBkZXZlbG9wZWQgd291bGQgbG92ZSAgdGFsayAgIGFib3V0ICAgd2FudCB3b3JrIHRvZ2V0aGVyICBrZWVwIERlbGhpIHNhZmUgIHdlbGwgIGJyaW5nICB0ZWNoIHNob3VsZCAgc2ltcGx5ICAgcmVjdGlmeSAgIGVudGlyZWx5IGZhdWx0ICAgc3lzdGVtcyB0cmlja2VkIGludG8gZ3JlYXQgSW5kaWFuICBhcnRpY2xlIEdvdnQgc2hvdWxkICAgIGZvcmVpZ24gbWVkaWEgd2lsbCBpZ25vcmluZyBtaW5pc3RyaWVzIHdvcnRoIGluY2VudGl2aXNlZCBjb252ZXJzaW9ucyAgICAgdGhlbiB0aGV5IHNob3VsZCAgICBhbm90aGVyIHJlbGlnaW9uICAgdGhlbSBUaWVkICB3aXRoIEhvbmRhIEFtYXplICAgIGNvb2wgam91cm5leSBhY3Jvc3MgIHRoaXMgcHJvbW8gVmVyeSBkaWZmZXJlbnQgZXhwZXJpZW5jZSBIb25kYSAgZ2l2aW5nICAgYW1hemluZyBjaGFuY2UgIHRha2UgIGpvdXJuZXkgICBIb25kYSBBbWF6ZSAgZmVhdHVyZWQgICBleGNsdXNpdmUgRmluYWwgIHNwZWNpYWwgIHRob3NlICB0ZWxsIHdvbWVuICBjb3ZlciBob3BlICBnb3Zlcm5tZW50IHdpbGwgcmV2aXNpdCAgcHJpb3JpdGllcyAgIHdoYXQgIGltcG9ydGFudCAgIGZvY3VzIHdvbWVuICAgICAgIGxlYXN0ICAgIGNvbXB1bHNvcnkgU2Fuc2tyaXQgIEdpdGEgICBuYXRpb25hbCBVYmVyIGNvbm5lY3RzIGFwcHJvdmVkIGRyaXZlcnMgIFBob25lIGRpcmVjdG9yeSBjb3VsZCBoYXZlIGNvbm5lY3RlZCB0aGVtICAgZ292dCBmb3JiaWQgIGN5Y2xlIHJpY2tzaGF3ICAgdGFrZW4gIGdpcmwgICBidXNoZXMgIGRvbmUgIHdvdWxkICBnb3Z0ICBjeWNsZSBNYWtlICAgICBoaWRlICBmYWlsdXJlICAgc3lzdGVtICBibGFtZSAgIHRoZW4gV29yayB3aXRoIHRoZW0gIG1ha2UgdHJhbnNwb3J0ICAgY29ycnVwdCBwb2xpY2UgICB0aGF0IGVpdGhlciBoYXJhc3NlcyAgd2FudHMgYnJpYmVzICB2ZXJpZmljYXRpb24gYmFubmluZyAgcG9saWNlIGlzc3VlZCBjaGFyYWN0ZXIgY2VydGlmaWNhdGUgIFViZXIgIGRyaXZlciBDb3VydGVvdXMgICByZXNwb25kIHdpdGggICAgZGVhbCBndXlzIHNwYXJlICBzdGFmZiBIYXBwZW5zIGxpdGZlc3RzICB0aGVpciBjYWxsIHlvdXJzZWxmICBjaXZpbGlzZWQgY291bnRyeSB3aGVyZSBoYWxmICBwb3B1bGF0aW9uIGZlZWxzIHVuc2FmZSB0YWtpbmcgRGVhciB5b3VyIHN0YWZmICAgcmlnaHQgIHRoZWlyIHZpZXdzICAgdGhleSB0d2VldCB0aGVtIGZyb20geW91ciBvZmZpY2lhbCBoYW5kbGUgc2VlbSBUaGFua3Mgc29tZW9uZSBleHBsYWluICAgIG9mZmljaWFsIGdvdmVybm1lbnQgb3duZWQgY2hhbm5lbCBoYW5kbGUgICB0d2VldCBsaWtlIHRoaXMgIG1vY2sgbW9zdCB2aXJhbCBjb2x1bW5zICB3ZWFyIHdoYXQgIHdhbnRzIGJlY2F1c2UgIGxpdmVzICAgZnJlZSBjb3VudHJ5IGNhbGxlZCBUaGFuayAgIExvdmUgIFRoYW5rcyAgVGVhbSBUaGFuayAgIExvdmUgZ29pbmcgICAgd29yc3QgZGFuY2UgICBmcm9udCAgWWVhcnMgICBjb2x1bW5zICBpbnRlbGxlY3R1YWwgd29yayBjb21lcyB0aGFua3MgYW51cmFnIHdlYXIgd2hhdCAgd2FudHMgYmVjYXVzZSAgbGl2ZXMgICBmcmVlIGNvdW50cnkgY2FsbGVkICBDaGV0YW4gQmhhZ2F0IHRvdGFsICBCbGVuZGVycyBQcmlkZSBGYXNoaW9uIFRvdXIgcmFtcCBGcmVhayBzb3JyeSBhYm91dCAgIGlkZWEgYWJvdXQgQmVuZ2FsdXJ1ICAgQmxlbmRlcnMgUHJpZGUgRmFzaGlvbiBOZXJ2b3VzICBleGNpdGVkICAgICByYW1wIENvbWVkeSBOaWdodHMgd2l0aCB0aGlzIERlY2VtYmVyIFNwZWNpYWwgTWFqb3IgICAgcGFydCAgICBoYXZlIG1pbmlzdGVyIGFidXNlIGxpa2UgIGZpcnN0IHRpbWUgdGhpbmsgcGVvcGxlIGVsZWN0ZWQgdGhlbSBnaXZlICBkYW1uICAgdGhpbmsgd29tZW4gc2hvdWxkIHdlYXIgZ3VubnkgYmFncyAgaGlkZSAgdGVudHMgIHdvbWFuIHdpbGwgd2VhciB3aGF0ICB3YW50cyAgc2h1dCBEZWFyIEhpbmR1IHN0b3AgYXR0YWNraW5nIHdvbWVuIHdpdGggeW91ciBpZGlvdGljICBub3RoaW5nIEhpbmR1IGFib3V0IGNvbnRyb2xsaW5nIGluZGl2aWR1YWwgaG9uZXltb29uIHBlcmlvZCAgIGdvdmVybm1lbnQgIG9mZmljaWFsbHkgQ29tZSBDb29rICBqdWRnZWQgICBiaWxsaW9uIG1vdGhlciBDb25ncmVzcyBzb21ld2hhdCBnZXR0aW5nIHRoZWlyICB0b2dldGhlciB3aXRoIHRoZWlyICB3aWxsIHNvb24gbmVlZCBiZXR0ZXIgYW5zd2VycyB0aGFuIGFmcmFpZCAgIGFmcmFpZCAgIGZvbGxvd2luZyB5b3VyIGxpdGVyYXR1cmUgIHRoaXMgIGtpbmRhICBDb21lZHkgSGVhcmQgIEFuY2hvciAgZ2FmZmUgdmlkZW8gV2FudCAgdGVsbCAgbm9ib2R5ICBhZ2FpbnN0IHN0dWZmICAgICBsZWFybmluZyBtb3ZlIEluZGlhICByaWdodCBTb29uIGpvaW5zIGV2ZW4gIGNvbnRpbnVlcyB0cmFkaXRpb24gIGhvbGRpbmcgIHByb2R1Y3QgSGFwcHkgTGlrZWQgRmlsbSBkZXNlcnZlZCAgIG11Y2ggbXVjaCBEdW5ubyB3aGF0IGNvbmdyYXRzIEluc2FuZWx5IGZ1bm55ICBBbmNob3IgY292ZXJpbmcgICAgICBsYXVnaCBGcmVuY2ggZnJpZXMgICAgICBoYXZlICBzbWFsbCBPbmx5IHN1cGVyc2l6ZSBvcmRlcnMgbWFueSBjbG90aGVzIExvb3NlICAgaW5lZmZlY3RpdmUgIGZlZWxzICAgbWVkZGxlIHdpdGggICBvbmx5IGxlYWRzICBtb3JlIHdob2xlIHBhY2sgICAgY2hhaW4gc21va2VyICBidXlpbmcgbG9vc2UgY2lnYXJldHRlcyAgc21va2luZyAgY291cGxlICAgY2FyZGluYWwgbmV2ZXIgZm9yZ2V0IHRoYXQgICBzbWFsbCBwaWVjZSByZXBvc3RpbmcgICAgIG1vdmUgYmFjayBwbGVhc2UgbmV2ZXIgICAgICBoYXZlICBnb29kIHRoaW4gbGlwcyAganVzdCBUaGlzIEJpaGFyIHByb3Rlc3RlcnMgYnVybiBDaGV0YW4gQmhhZ2F0IGVmZmlnaWVzIG92ZXIgc3RheSBsb29rICAgIGNvbnNwaWN1b3VzbHkgICBsb29rICAgSGF0ZXJzIGZpbmQgIHJlYXNvbiAgR290dGEgU29ycnkgIHR3ZWV0IFRpbWVzICBsaXZlIGhhdmUgIHdyaXRlIGxldHRlciAgIGZhbWlseSAgRHVtcmFvbiBleHBsYWluaW5nICBtZWFuaW5nICBmaWN0aW9uICBpbWFnaW5hcnkgV2lsbCBoYXRlcnMgICAgY2hhbmNlICBzbGFtIGhvcGUgIGhhdmUgdmVudGVkICB5b3VyICAgd2lsbCBsZWF2ZSB0aGlzIHBlcnNvbiAgY2FsbGVkICAgICBuYW1lIHdhbnRlZCBtZWRpYSBhdHRlbnRpb24gICAgIHJ1bnMgIGJ1c2luZXNzICB3YW50cyBBbm90aGVyIGVhc3kgcXVlc3Rpb24gICAgIHNheWluZyAgIHB1Ymxpc2hlZCB3b3JrIHNvbWV0aGluZyBwcml2YXRlbHkganVzdCBjb21wYXJlIHF1ZXN0aW9ucyB0aGF0ICBtZWRpYSAgIGhhdmUgZ29uZSBzb21ld2hlcmUgIHJlc2VhcmNoICByZXZlYWwgIGhhdmUgIHN0b3J5ICBtaW5kIE5ldmVyICB0aGlzIE9ubHkgICBjYWxsZWQgICBiZWdnZWQgICB0YWxrICAgIHBsYW50ZWQgdGhpcyB2aXNpdGVkIFBhdG5hICBKYW51YXJ5ICAgcmV2ZWFsZWQgc29tZSBwbG90IHRoZW4gbmVlZCBSb2JlcnQgTGFuZ2RvbiAgZGVjb2RlICBVU1NSIHdpdGggIHRoZXNlIGNvZGVzIGZsb2F0aW5nIEZhbWUgICAgdG90YWwgYml0Y2ggd2hhdCBlbHNlICAgIEhhcHB5ICBzdG9yeSBhYm91dCAgd2FudCBXaWxsIHJlcXVlc3QgIG1lZGlhICBzaG93IHJlc3RyYWludCBldmVuIHRob3VnaCAgICBzbG93IG5ld3MgIHNlZWsgY29udHJvdmVyc3kgICB0aGluZ3MgZ2lybCBjYWxsZWQgUml5YSAgZmVlbHMgIGhhdmUgd3JpdHRlbiBIYWxmIEdpcmxmcmllbmQgICAgIHN0YWxraW5nIE90aGVyIGd1eXMgZmVlbCBNYWRoYXYgaGF2ZSBhbHNvICBvdGhlcnMgY2xhaW1pbmcgSGFsZiBHaXJsZnJpZW5kIGRlZmFtZXMgdGhlbSAgICAgcmVhbCAgaW50ZW50IHdpbGwgIGRpZ25pZnkgYmFzZWxlc3MgIHNlbnNlbGVzcyAgdGhhdCAgIGVub3VnaCAgIGhhdmUgIHBsYWdpYXJpemVkICBsb29rIGZyb20gUmFodWwgaGF2ZSBiZWVuIHdyaXRpbmcgIG92ZXIgeWVhcnMgIGhhdmUgYmVlbiBibGVzc2VkICBuZXZlciBuZWVkZWQgICB1bnRoaW5rYWJsZSBQbGFnaWFyaXNtICAgc2VyaW91cyAgICBzaW1wbHkgY29tcGFyZSAgcHVibGlzaGVkIHdvcmtzICAgICBOb2JvZHkgYm90aGVyZWQgU29tZSByYW5kb20gcGVyc29uIHNvbWV3aGVyZSBtYWtlcyAgc29tZWJvZHkgd2hvbSAgICBrbm93ICAgZmFtaWxpYXIgd2l0aCB0aGVpciBNZWRpYSBjYXJyaWVzIFN0dW5uZWQgbWVkaWEgdGFrZXMgICBzdG9yeSB3aXRoICBjcmVkaWJpbGl0eSAgbG9uZyAgICBGYWNpbmcgIGJydW50IFRpbWVzICAgSnVzdCBncmVhdCAgQ29tZSBSdXBlZSBjb2xsYXBzaW5nIGFnYWluIGRlc3BpdGUgZmFsbGluZyBjb21tb2RpdHkgQmVjYXVzZSBtYWtpbmcgd29ybGQgYmVsaWV2ZSAgSW5kaWEgd2lsbCB0YWtlIG1vcmUgdGhhbiBjaGFybWluZyBnb3Z0IGFsd2F5cyB3YW50cyBmb3JlaWduICBzdG9wIGJyZWF0aGluZyBkb3duIHRoZWlyIEhlbmNlICAgIHRha2Ugc21hcnRlc3QgdGhpbmdzICAgY291bGQgIHJpZ2h0ICAgZW5zdXJpbmcgTlJJcyBBbm90aGVyIGFydGljbGUgZGlzc2luZyAgIGhpbGFyaW91cyAgd3JpdGVyIGxvdmVzICAgb2JzY3VyZSB3b3JkcyAgZXZlcnkgRm91bmQgSGFwcHkgICByZXZpdmUgdGhhbmsgICBtdWNoIFVuYmVsaWV2YWJsZSBldmVudCAgY3Jvd2QgIFNoYXJqYWggSW50bCBCb29rIEZhaXIgVGhhbmsgYWJvdXQgICAgIGxpc3RlbiAgb3JnYW5pc2VycyBUaGVyZSAgIHVuY29uZGl0aW9uYWwgVGhlcmUgICB1bmNvbmRpdGlvbmFsIHN1cHBvcnQgTG92ZWx5IHNob3J0IGZpbG0gIGRpcmVjdG9yIFRob3NlIGxvb2tpbmcgIG1vcmFsaXR5ICBwb2xpdGljcyAgIHNhbWUgcGVvcGxlICByZWFkIFBsYXlib3kgYmVjYW1lICBoYWxmIGdpcmxmcmllbmQgTG9va2luZyBmb3J3YXJkICAgc2Vzc2lvbiAgIFNoYXJqYWggQm9vayBGYWlyICBOb3ZlbWJlciBEdWJhaSBzdHJlZXQgc2FtZSBwZXJzb24gd2l0aCAgc2FtZSBmYWNlIGNoYW5nZXMgIHByb2ZpbGUgICBzdXBwb3NlZCAgcHJlc3MgbGlrZSAgIGdhZ2EgICBjb21tZW50cyBldmVyeSBFeGNpdGVkICAgcGFydCBsb3ZlICAgQ3JlYXRlIGFwcHMgIGlubm92YXRlIGFsd2F5cyBmZWx0ICAgICBtb3N0IGFydGljdWxhdGUgaW50ZWxsaWdlbnQgQ29uZ3JhdHMgICAgcm9sZSAgIGhhdmUgIGxlYXZlIEJlZW4gd3JpdGluZyAgIGVkaXQgcGFnZSAgTmV2ZXIgdGhvdCB3b3VsZCAgIGVkaXQgYWJvdXQgQWFrYXIgQ3JpdGljcyByYXJlbHkgICAgVGhhbmtzICBTdW5kYXkgdGhlbiB0aGVyZSAgcGF0cm9uaXNpbmcgdHlwZXMgICAgYWx3YXlzIGRlZmVuZCAgIGludGVsbGVjdHVhbCAgIHRoYXQgICB0aGFuayBldmVuIHRhbGtpbmcgYWJvdXQgIHdpbGwgd2FpdCAgYW5zd2VycyAgIHByZXZpb3VzIHRob3Ugc2hhbGwgIHR3ZWV0ICB1bmRlcnN0YW5kIGNvbW1pdCAgdGhvdSBzaGFsbCAgIGFuYXJjaHkgbWFrZSBiYXNlbGVzcyBjb25zcGlyYWN5IHRoZW9yaWVzIGhhdmUgc2lsbHkgbGVmdGlzdCBlY29ub21pY3MgIGNoYXNlIHRoYXQgICAgZm9ybSAgbmVlZCAga25vdyB3aGF0IHdpbGwgdGhleSBJbmRpYSBiZWdpbnMgICBjb250cmlidXRpb24gICBTd2FjaGNoIEJoYXJhdCAgY29sdW1uIHRvZGF5ICAgIHNlc3Npb24gd2l0aCBUaG9zZSAgRnVsbCBBcHBsZSAgc2F5cyAgIHByb3VkICAgICB3b3VsZCAgIEJlY2F1c2UgIGJ1cnkgIGhlYWRzICBzYW5kICBqdXN0IHRhY2tsZSBwbGVhc2UgIGdpdmUgcHJpZXN0cyAgaW1hbXMgIG11Y2ggIG5ldmVyIHNhaWQga2VlcCAgYWdlbnQgIHJlYWNoIG1haW5zdHJlYW0gbWVkaWEgZ29lcyBzaWxlbnQgIHRoZWlyIHJldmVyZW5jZSAgIHBvd2VyZnVsICBmaWxsIFBhbm9yYW1hIFRoaW5ncyBwaG9uZXMgICB0aGVzZSBIYXBweSBCaXJ0aGRheSAgVGhhbmtzICBtYWtpbmcgb2ZmaWNlIHdvcmsgbGVzcyB0ZWRpb3VzICB0aGVuICB3b3JsZCAgYmV0dGVyIERlcGVuZHMgIHdoYXQga2luZCAgV2hlcmUgIE1pc3MgdGhpcyAgc2Vzc2lvbiAgIE11bWJhaSBzaGFsbCAgICBmZW1pbmlzdCBhcHByb3ZlZCBmaXJzdCBCZWZvcmUgIHdyaXRlICB3aG9sZSBhcnRpY2xlIHRoZXJlICAgcmVhc29uICBoYXZlIGJ5Z29uZXMgIGZpcnN0ICAgICBhZG9yYWJsZSBIYXBweSBjb21lIGJhY2sgTWFrZSBSb2NrIEhhcHB5IERpd2FsaSBUaGlzIGxpZ2h0ICBsYW1wICB5b3VyIGhlYXJ0IHNvbWV3aGVyZSAgIGRlbGhpIGhhcmlkd2FyIGhpZ2h3YXkgIGRoYWJhIHN0b2NrcyAgbGF0ZXN0IGZyb20gV2hhdCBjcmF6eSBKdXN0IGZpbmlzaGVkIHJlY29yZGluZyAgQ29tZWR5IE5pZ2h0cyB3aXRoICAgbWlzcyB0aGlzIHNjYXJpZXN0ICBjcmF6aWVzdCBhc3NpZ25tZW50cyAgaGF2ZSAgU3RheSBGdW5ueSAgc2VsZiByaWdodGVvdXMgdHlwZXMgIGNhbGxpbmcgYWxtb3N0ICBhcnJhbmdlbWVudCAgTWFoYSBwb3N0IGVsZWN0aW9ucyBSZWFsIHBvbGl0aWNzIGJyZWFraW5nICAgYWxzbyBtZWFuIHRob3NlICB2b3RlICBzdXBwb3J0ICAgaGF2ZSAgZGVmZWN0ICBzdXBwb3J0IHN0YWJpbGl0eSBuZWVkcyBtb3JlIHNlYXRzICBUYWtlIGZyb20gQnJlYWsgZWFjaCBmcm9tIGtub3cgd2hlbiB0aGV5IHdpbGwgIHdpbGwgICBkaGFtYWthIGNvbmdyYXRzIHZvaWNlICBjcml0aWNhbCAgZHJpdmluZyBzb2NpYWwgY2hhbmdlICBldmVyeWRheSAgICBsZXR0ZXIgZnJvbSBNck1ycyBJZGVhICAgcmVjb3JkICBlcGlzb2RlIHRoYXQgbWl4ZXMgY29tZWR5ICAgICB3YXRjaCB3aGVuZXZlciAgIGZlZWxpbmcgbWF5YmUgICBzdGlsbCBiZWF0ICAgYmFua2luZyAgaW52ZXN0bWVudHMgIERvdWJsZSBwb3RlbnRpYWwgcGhvdG9zaG9vdCB3aXRoIEpvaG4gQWJyYWhhbSBBbHNvIGtub3duICBraWxsZXIgICBvbmx5IEpvaG4gY291bGQgdGFrZSAgIHdpdGggU2hvb3RpbmcgIENvbWVkeSBuaWdodHMgd2l0aCBLYXBpbCBTaWRodWppICBUcmlwbGUgV291bGQgdG90YWxseSByZWNvbW1lbmQgIE5vYmVsIHBlYWNlIHByaXplICBzb21lb25lICAgIFR3aXR0ZXIgdHdlZXQgICByZWZlcmVuY2UgIFRob3NlICByZWFkIEV2ZXJ5IHRpbWUgc29tZSBpZGlvdCB3cml0ZXMgICAgVG9sc3RveSAgVGFnb3JlIHNhaWQgICAgIGFja25vd2xlZGdlcyB0aGF0ICBtaWdodCBkZXNlcnZlIHRoYXQgTW9kZXJhdGUgc3RhbmNlIHRha2luZyAgdmlld3MgaW50byBhY2NvdW50IGNyZWF0ZXMgbGFzdGluZyBwb3N0dXJpbmcgIGV4dHJlbWUgdmlld3MgYWNoaWV2ZXMgaW5jbHVkZWQgdGhpcyAgSW5kaWFuIGVtb3Rpb25zICBHcmF2aXR5ICAgIHRoaXMgbG92ZWx5IHN0YXRlcyB0aGlzIGV2ZW5pbmcgIExpZmVPSyBjaGFubmVsICBXYXRjaCAgcmVsaXZlIEpheWEgICAgR29vZCAgV29uZGVyIHdoYXQgIHNvdWxzICAgc3VwcG9zZWRseSBjb21taXR0ZWQgICBhcnJlc3Qgd291bGQgU3Ryb25nIERlbW9jcmFjeSAgYWJvdXQgIHN0cm9uZyBydWxpbmcgcGFydHkgIHN0cm9uZyAgbGF0dGVyICBnb25lIFNvbWVvbmUgbmVlZHMgIHN0ZXAgICBzdGVwIERpc2FwcG9pbnRlZCBnb3Z0IGJlaW5nICBjYWdleSBhYm91dCAgYmxhY2sgbW9uZXkgZGlzYXBwb2ludGVkIHRoZXJlICAgb3Bwb3NpdGlvbiBsZWZ0ICAgY291bnRyeSAgdGFrZSB0aGVtIHRoYW5rICAgb3JnYW5pc2luZyBUaG9zZSAgQmFuZ2Fsb3JlIG1lZXQgIHRvbW8gZXZlbmluZyAgRm9ydW0gTWFsbCAgIGJvb2sgQWlydGVsIGhlbGxvIHR1bmVzIGJsYWNrIGhvbGUgIHJlcGxhY2UganVtbWUgIHJhYXQgd2l0aCBhbG1vc3QgYW55dGhpbmcgZWxzZSAgc3RvcCBDaGFsbGVuZ2UgeW91cnNlbGYgd2l0aCBzb21ldGhpbmcgICBFbHNlICBmZWVsIHdoYXQgIHdhbnQgICAgIHNvY2lhbCBtZWRpYSAgdGhlbiAgZXZlcnlvbmUgIHRhbGtpbmcgYWJvdXQgc3Bva2VzcGVyc29uIHJlbW92ZWQgIHByYWlzaW5nIHNvbWVvbmUgY2xlYXJseSBzaG93cyAgc3Bva2VzcGVyc29uICAgZXhwZWN0ZWQgIGhhdmUgIG9waW5pb24gIGp1c3QgICBwYXJ0eSBBbHdheXMgICBpc3N1ZSB3aXRoIHNjaG9vbHMgc2F5aW5nIG1ha2Ugc2VudGVuY2VzIHdpdGggICBhYm91dCBtYWtpbmcgc2VudGVuY2VzICBleHByZXNzIHlvdXJzZWxmICAgc2ltcGxlc3QgRnVubnkgIG1hbnkgc3RpbGwgYmVsaWV2ZSBHb29kIEVuZ2xpc2ggVXNpbmcgICBlZHVjYXRpb24gc3lzdGVtIHRlYWNoZXMgc2VudGVuY2VzIE1pc3NlZCAgbGl0ZXJhdHVyZSAgbGVhc3QgICBpbnZpdGVkICBUaGFua3MgQWx3YXlzIHdhbnRlZCAgbWVldCAgICBiZWNhbWUgZ2l2ZSAgc29tZSB0aXBzICAgIHRha2UgdHJpcCAgIHdpbGwgdG90YWxseSB0YWtlIFNob290aW5nIEhhcHB5ICAgICAgaW50ZXJ2aWV3IHdpdGggICByZWxldmFuY2UgV2FsayAgVGFsayBzaG93IHdpdGggICB3YWxrIGFyb3VuZCAgIGNhbXB1cyAgRGVsaGkgQm9vayBUYWxrICB5ZWFycyBDaGV0YW4gQmhhZ2F0IHNheXMgYmV0dGVyIHByZXBhcmVkICBmYWNlIGNyaXRpY3MgSW5kaWEgSW5zaWdodCBDb25ncmF0cyAgTWFsYWxhICBLYWlsYXNoIFNhdHlhcnRoaSAgd2lubmluZyAgTm9iZWwgUGVhY2UgVGhhbmtzICBtYWtpbmcgIHdvcmxkICBiZXR0ZXIgRGV0YWlscyAgIGV2ZW50IHdpdGggICBWaXZla2FuYW5kYSBDb2xsZWdlIENoZW1idXIgIGF0dGFjaGVkIEhhdmUgIHRha2VuICBwbGVkZ2UgbWFrZSBlcXVhbCByZWFsbHkgbWVhbiBXaWxsICB0YWxraW5nICAgc3RhdGUgcHJlc2lkZW50ICAgIG1ha2UgTWFoYXJhc2h0cmEgICBzdGF0ZSB0aGlzIFJhZGlvICB0YWxraW5nIGFib3V0IG11c2ljICAgTGlzdGVuIGxpdmUgYmVzdCB3b3JkICBtb3V0aCAgICBib29rcyAgVGhhbmsgY29tbWVudHMgcmVjZWl2ZWQganVzdCBMb3ZpbmcgICB5b3VuZyBJbmRpYSB0YWtpbmcgIHNvbWUgZXh0cmFvcmRpbmFyeSBjaGFsbGVuZ2VzIEp1c3QgICAgIGJlc3QgbWVhbHMgICBsaWZlICBNYW1hIEhvbmcgS29uZyBTdG9yeSB0aGF0IHdpbGwgdG91Y2ggIGhlYXJ0cyAgYmlsbGlvbiBTaG9wICBIYWxmIEdpcmxmcmllbmQgIEZsaXBrYXJ0IHRob3VzYW5kIENocmlzdGluYSBUaGFuayAgICAgIGV2ZXJ5b25lICBvdmVyIHVuZmlsdGVyZWQgcmVhZGVyIHJlYWN0aW9ucyB3YW50ICBmbG9vZCB5b3VyIHRpbWVsaW5lIHdpdGggICBjb2xsYWdlICBlYXJseSBUaGFuayBCZWNhbWUgIGRlbGl2ZXJ5ICB5ZXN0ZXJkYXkgIFdoYXQgIEhlcmUgICB2aWRlbyAgd2hhdCBPdmVyd2hlbG1lZCAgc3R1bm5lZCB3aXRoICByZXNwb25zZSAgZXZlcnlvbmUgIGNhcmluZyBhYm91dCAgICBMaXZlICAgR29vZCB0aGFuayAgICB0aG91c2FuZHMgICAgTXVtYmFpICBjYW1lICAgIG1hZGUgICBMb3ZlIEp1c3QgZG9uZSB3aXRoIG11bWJhaSBsYXVuY2ggbWFkZSBmYWJ1bG91cyAgVGhhbmtzICBtdWNoIFRoZXNlICBjdXBjYWtlcyBmcm9tICB0aGF0IGxvb2sgbGlrZSBHaXZlbiAgICBhdHRlbmQgbGF1bmNoIE11bWJhaSBsYXVuY2ggICB3aWxsICBsaXZlIHN0cmVhbWVkICAgIHZpZXdlZCAgdGhpcyBjdXRlc3QgdmlkZW8gIEJhYnkgIHlvdW5nZXN0IGN1c3RvbWVyICAgQ2F0Y2ggc2hvcnQgbm90ZSAgIHRob3VnaHRzIHJpZ2h0IHN0YXJ0ZWQgZGVsaXZlcmllcyBzaW5jZSAgICAgIHBvc3RzICBmaXJzdCBmcnVpdHMgIGFjdGlvbiAgeW91ciAgICBhdHRhY2ggeW91cnNlbGYgICAgR29vZCBuaWdodCB3aWxsIG5lZWQgdG9tbyB3aGVuICAgeW91ciAgIHVuYm94aW5nIHZpZGVvICBoYXNodGFnIFdpbGwgIGJlc3Qgd2lubmVycyBXYXRjaCAgR29vZ2xlIGhhbmdvdXQgbGl2ZSByZWxlYXNlcyB0b21vICAgICAgQm9va3Mgb3V0bGV0cyAgSmFzaGFubWFsIEJvb2sgIG1vcmUgY2FsbCBUd2l0dGVyICAgZm9sbG93ZXIgY291bnQgU3RhdGVzIHJlbGVhc2UgUmV2b2x1dGlvbiBIYWxmIEdpcmxmcmllbmQgQW1tYSAgSVNSTyAgTW9kaSAgICB5ZWFycyBub2JvZHkgd291bGQgaGF2ZSBvZmZlcmVkICAgbWlsbGlvbiBvZGRzIHdvdWxkICAgZ29vZCB0aW1lICBzaGFycGVuIHRob3NlIGhhdGVyICBraW5kIHRvb2sgIHRocmVlIERhbW4gc3dlZXQgICAgIGJvb2sgIGNhdGVnb3J5ICAgZmlsbSByZWxlYXNlcyBuZXh0IHByaW50ICAgYm9va3MgYXBwcm94IHdlaWdodCAgQXNpYW4gZWxlcGhhbnRzIFR3ZWV0ICAgc2NyZWVuc2hvdCAgeW91ciBwcmVvcmRlciAgIHdpbGwgc2VuZCBzb21lICAgIHNwZWNpYWwgTmVlZGxlc3MgIHNwZWVjaCAgIEdhcmRlbiAgTG90cyAgbGVhcm4gICBIb3BlIGFjdGlvbnMgZm9sbG93IFN0dW5uZWQgICBIYWxmIEdpcmxmcmllbmQgY2xvdGhlcyBXaWxsICAgIHBvc3QgcGljcyAgd2lsbCBuZWFybHkgcGVvcGxlIGhhdmUgYWNjZXB0ZWQgIGF0dGVuZCAgbWVnYSBsYXVuY2ggIE11bWJhaSAgIFNpZ251cCBuYXRpb24gIGxvdmUgIGJhc2ggIG11Y2ggICAgbmF0aW9uICBsb3ZlIGF0dGVudGlvbiBmcm9tICBtdWNoIFdlbnQgIElTS0NPTiAgc2VlayBibGVzc2luZ3MgIHRoaXMgcGhvbmUgcGhvdG8gSnVzdCAgIGRpdmluaXR5IFNvcnJ5IE5EVFYgRGlhbG9ndWVzIHNwZWNpYWwgIHdpbGwgY29tZSAgIG5leHQgbWlzcyBORFRWIERpYWxvZ3VlcyB3aXRoICAgICBzcGVjaWFsICBFbmdsaXNoIHBsZWFzdXJlICAgYmVzdCAgIHVwY29taW5nIEZ1bGwgdHJhbnNjcmlwdCAgIEJpbGwgTWVsaW5kYSBHYXRlcyBzZXNzaW9uIHdpdGggQ2hldGFuIERpZ2lmbGlwICBXaXRoICBKdXN0IHNoYXJlIHlvdXIgU2ltcGxlIFR3ZWV0IHlvdXIgIHF1b3RlIGZyb20gICBoYXNodGFnICBzaWduZWQgU2hvdyAgU3BlY2lhbCBXb21hbiAgeW91ciBsaWZlICBtdWNoICBjYXJlICB0YWtpbmcgIHBsZWRnZSAgbG9uZyBDbGljayBwbGVkZ2UgIEZhc3QgIEFudXNoYSAgICBub21pbmF0ZSBzZXNzaW9uICBDcm93bmUgQnVuayBvZmZpY2UgVmlzaXRlZCBtZWdhIHdhcmVob3VzZXMgIHRoZXkgcHJlcGFyZSAgZGVsaXZlciAgYmlnZ2VzdCAgSW5kaWEgYWNyb3NzIHByb2R1Y3QgSGFsZiBHaXJsZnJpZW5kIG1lZ2EgIFRob3NlIHRoYXQgdGhlcmUgIHBhcnRpZXMgICBNYWhhcmFzaHRyYSBwbGVhc2UgdGVsbCAgd2hpY2ggICBnb2luZyBTaGl2IFNlbmEgICAgc2hvdWxkIGhhdmUgSnVzdCAgZWFybHkgbW9ybmluZyBoZWFydGZlbHQgYWJvdXQgVGhvc2UgYXR0ZW5kaW5nICBIYWxmIEdpcmxmcmllbmQgIE11bWJhaSAgIHBsZWFzZSBhY2NlcHQgIHRoaXMgIGV2ZW50ICAgIGhlbHAgcGxhbiBXb3VsZCBsaWtlICBpbnZpdGUgICBNdW1iYWkgICBsYXVuY2ggIEhhbGYgSW5maW5pdGkgR3JlYXQgIE5vYm9keSBkb2VzIHR3aXR0ZXIgY29udGVzdHMgbGlrZSBtaXNzICBjb250ZXN0IFdoYXQgIGtub3cgICAgZm91ciB3aWxkbHkgc3BlY3VsYXRpdmUgc3RvcnkgbGluZXMgIENoZXRhbiBQYXRpZW5jZSBIYXZlICBncmVhdCBMZXNzIHRoYW4gZGF5cyAgICAgb2ZmaWNpYWxseSBlbnRlcmluZyBmcmVhayBtYXliZSAgd2lsbCB0YWtlIG92ZXIgUGFraXN0YW4gIHRoZW4gICAgS2FzaG1pciBiZWxvbmdzICB5b3VyIGNvdW50cnkgIFdoYXQgaGFyZCAgICAgd2hhdCB0aGV5IG5vbWluYXRlICAgIHdpc2ggVmlkZW8gZnJvbSAgcGFydCAgIHNlc3Npb24gd2l0aCB0cnVseSBhbWF6aW5nICBpbnNwaXJpbmcgc2Vzc2lvbiB3aXRoICBNYW5hZ2VkICBzZWxmaWUgTG9va2luZyBmb3J3YXJkICAgd29uZGVyZnVsIGRpc2N1c3Npb24gd2l0aCAgIGxpdmVzIGhhdmUgZXF1YWwgbGF0ZXIgSGFsZiBHaXJsZnJpZW5kIGJvbnVzIGV4Y2VycHQgSGFsZiBIYWxmICBtb250aCAgIEhhbGYgSGFsZiB0aGVtIGp1c3QgbmVlZHMgICBwbHVnZ2VkICAgdGhhdCBib29rIEhhbGYgR2lybGZyaWVuZCB3aWxsIHJlbGVhc2UgICAgIGp1c3QgYWJvdXQgIHdhaXQgICBndXlzICByZWFkIE1vaGl0ICAgICBtb3N0IHNvdWdodCBhZnRlciBkaXJlY3RvcnMgIGN1cnJlbnQgSG9ub3JlZCAgY2hvc2UgQ2VsZWJyYXRpbmcgICBwYXJ0bmVyc2hpcCB3aXRoIHdpdGggdGhpcyAgdGFrZSAgIGZhbW91cyBjaGFtcGFnbmUgRGVsaWdodGVkICBhbm5vdW5jZSBzdXBlcnRhbGVudGVkIE1vaGl0IFN1cmkgd2lsbCBkaXJlY3QgIGZpbG0gYmFzZWQgICBuZXh0IGJvb2sgSGFsZiBHaXJsZnJpZW5kIGtpbmQgICB0d2l0dGVyICB3b25kZXJzICAgaGF2ZSAgcHJvYmxlbXMgICAgdGhpcyBwZW9wbGUgIGhhdmUgIGRpZmZlcmVudCBvcGluaW9ucyAgICB0aGVtIGhhdmUgICAgICAgIGhhcmQgIHR3aXR0ZXIgd2hhdCBhYm91dCBjZW50dXJ5ICB0aW1lIEZlZWRiYWNrICBvbmx5ICAgY29tZXMgZnJvbSAgcGVyc29uICBjYXJlcyAganVzdCBpZ25vcmUgIGNvbXBsZXRlbHkgICB3aXRoIHlvdXIgaGVhciB0aGV5ICB2aXNpdGluZyBtdW1iYWkgbGF0ZXIgSGFwcHkgIGhvbm91cmVkICBtb2RlcmF0ZSAgc2Vzc2lvbiB3aXRoICAgU2VwdGVtYmVyIENvdXBsZXMgc2VuZGluZyB2aWJyYXRpb25zICBoZWFydGJlYXQgc2Vuc2F0aW9ucyAgZWFjaCBMb3ZlIFdhdGNoZXMgcmVkZWZpbmVkIEhhcHRpYyBtZXNzYWdpbmcgd2lsbCByZWRlZmluZSBtZXNzYWdpbmcgIHJlbGF0aW9uc2hpcHMgTWluZGJsb3dpbmcgICBjb21wZXRpdGlvbiB0aGluayAgIHRoaXMgICB3aWxsIHRoZXkgY29weSAgdGhpcyBXaGVuICAgbGl2ZSAgICBwZW9wbGUgYWRvcmUgeW91ciBicmFuZCAgZ2l2ZSAgd29yZCAgbW91dGgganVzdCBhYm91dCAgYWJvdXQgIGNvbW11bmljYXRpb25zIGV2ZW50IHRoYXQgICBwbGFuZXQgU2VlaW5nIEthc2htaXIgcmVsaWVmIHdpbGwgdGhvc2UgIHNhaWQgSW5kaWEgY2FyZSBhYm91dCBNb2RpIGNhcmUgYWJvdXQgYWRtaXQgdGhleSB3ZXJlIHRoYXQgIHRoYW5rICAgdGhhdCBsaWtlICAgIHVuZGVzZXJ2ZWQgIHdpbGwgdGFrZSB3b3JrIHRvZ2V0aGVyICBpc3N1ZXMgY291bnRyeSBuZWVkcyAgIHJhdGhlciB0aGFuIGRyYWdnaW5nICBhbm90aGVyIGhlbHAgIHRoYW5rcyBhZ2FpbiBlZGl0b3IgdHdlZXRlZCB0aGV5IGhhdmUgY2hhbmdlZCAgaGVhZGxpbmUgICAgbWlzbGVhZGluZyBBcHByZWNpYXRlIHN0aWxsICAgaGVhZGxpbmUgICBwbGVhc2UgdGhhbmtzICAgICBwbGVhc2UgcmVtb3ZlIHRoYXQgbWlzbGVhZGluZyBoZWFkbGluZSAgICAgd291bGQgYXBwcmVjaWF0ZSBIYXZlIG1hbnkgc3VnZ2VzdGlvbnMgIEhhdmUgbm90aGluZyBhZ2FpbnN0IHRoZW0gICB0aGV5IG5lZWQgICBjYWxtIHdoaWxlICAgIGRlYXIgICAgc3RvcCBiYXNoaW5nICBjYXVzZSB5b3VyICBrbm93ICAgdmVudCBOZXZlciBtZW50aW9uZWQgYW50aWNzICB3aGVuICBzZW5zaXRpdmUgaXNzdWUgIGdhaW5pbmcgdGhlaXIgbWlzcmVwcmVzZW50aW5nIGhpZ2hsaWdodGVkICBjb25zZXJ2YXRpdmVzICBmZWVsIGFib3V0ICAgIHR3aXN0ZWQgICAgIHRoYXQgIHN1cHBvcnQgRmlyc3Rwb3N0IGRlY2lkZXMgIHdyaXRlICBhcnRpY2xlICAgIGFydGljbGUgcHJhaXNlcyAgICBoZWFkbGluZSAgdHdpc3RlZCAgYXR0cmFjdCBIZXJlICAgY291bGQgICBtb3JlIGJsYXRhbnQgIHN1cHBvcnQgICBtYW55ICBwZW9wbGUgYW50aWNzIHdvdWxkICAgICBmYWN0IHRoZXkgY2hvc2UgIHNlbnNpdGl2ZSBpc3N1ZSAgIHR3aXN0ICB3b3JkcyB3aGljaCAgcmVzcGVjdCAgc29tZSBnb29kICBjb25zaXN0ZW50IGJpYXMgYWdhaW5zdCAgICBwb2ludCAgdHdpc3RpbmcgIHdvcmRzIG1ha2luZyBmYWtlIHRoZXkgZGl2aWRlIERlbGhpIGJldHdlZW4gICAgbGlrZSB0aG9zZSBmYWNlcyAgZmFpcm5lc3MgY3JlYW0gICAgd2hpY2ggc2lkZSBkb2VzICBiZXR0ZXIgTW9zdCBwZW9wbGUgIGxvb2sgZG93biAgbWFya2V0aW5nIHVzdWFsbHkgc3VjayBBcHBsZSBrbm93cyBOb25lICB0aGVpciBjb21wZXRpdG9ycyBMaXRmZXN0ICAgTGl0bGl2ZSAgVGltZXMgTGl0ZXJhcnkgIEphaXB1ciBpUGhvbmUgR2V0dGluZyAgZXhwZWN0ZWQgc2hhcmUgICAgICBhY2NvbGFkZXMgVGhhbmsgIGNvbHVtbiBtaWxsaW9uIHNpbGx5ICBzb21ldGltZXMgICAgd2hpY2ggbWFrZXMgIGxpZmUgd29ydGggZWRpdG9yaWFsIE9jdG9iZXIgICByZWxlYXNlIGRhdGUgYW5ub3VuY2VtZW50IEhhcHB5IHRoZXkgbWFkZSBUaGFuayBzb3JyeSBwbGF5ZWQgIGRydW1zICByZXNwZWN0ICBjb25uZWN0ICAgY3VsdHVyZSAgIEphcGFuZXNlICAgcGxheWluZyB3aXRoIGJlZW4gY2hlY2tpbmcgICBnb29kIGZvb2Qgd2hhdCBQZW9wbGUgIGhhdGUgdGhlaXIgam9icyBvZnRlbiBldmVudHVhbGx5ICAgaGF0aW5nIHdoYXQgYWJvdXQgaHVncyBzZW50IG92ZXIgIGh1Z2dnIGVhcmx5IHJlYWRlcnMgIEhhbGYgIGxvdmVkICAgIGluc3BpcmVkICBuZXh0IGJvb2sgaW5zcGlyaW5nICBkZXNpZ25lciBIYXBweSAgc2hhcmUgIHBhcnRuZXJzaGlwIHdpdGggY29vbCBkZXNpZ25lciB0aGF0IHdvdWxkICAgbXVjaCBtb3JlIHRoYW4gQ2xpbWJpbmcgIFdoYXQgIGhhcmQgIGZhbGxpbmcgZG93biAgZ2V0dGluZyAgTGVhcm4gdGhhdCAgIHdpbGwgICAgcGVhayBkYXlzICAgcHJvdmUgbG9naXN0aWNhbCBwcm93ZXNzIGRlbGl2ZXIgcmVjb3JkIEhhbGYgR2lybGZyaWVuZCBFYWNoIHByaW50aW5nIHByZXNzICAgIHByZXNzZXMgd2lsbCB3b3JrICAgcmVhZHkgcHJpbnQgaGF0ZXJzICB5b3VyIGJlc3QgY29tcGV0aXRpb24gIGFwcHMgbGlrZSBDYW5keSBDcnVzaCAgc2F5cyBDaGV0YW4gQmhhZ2F0IE5ld3MgSW5kaWEgVG9kYXkgc2FpZCAgd2FudCAgICAgY292ZXIgIEV2ZXJ5b25lICAgcm9vbSAgeWVhcnMgTG9jYWwgdHJhaW4gcGhvdG8gSW50ZXJ2aWV3ICAgRXhjbHVzaXZlIENyYXp5IEluZGlhIFRvZGF5IGlzc3VlIGNvbWluZyBwaWNzIGZyb20gIGNvdmVyIHBob3RvIHNob290IHdpdGggUm9oaXQgSXNzdWUgIHRoaXMgY3JhYiBtZW50YWxpdHkgICB0aGlzICAgY29udGV4dCAgTmFtZXMgIHN0aWxsIHJlbGV2YW50IEFueWJvZHkgICAgSW5kaWFucyAgYmFkbHkgd2FudCAgZmluZCAgY2hpbmsgIHRoZW0gIGJyaW5nIHRoZW0gZG93biAgbWFrZSAgZmVlbCBiZXR0ZXIgYWJvdXQgSW5kaWFucyBwcmlkZSB0aGVtc2VsdmVzICByZW1lbWJlcmluZyBRdWVzdGlvbmluZyBtYWtlICBSZW1lbWJlcmluZyBzdHVmZiB0ZWxsICB3aGF0ICBLZWVwaW5nICBleHBlbnNpdmUgb2ZmaWNlIHdpdGggIHJlYWwgcG93ZXJzICAgcGFybGlhbWVudGFyeSBGdW5ueSAgIHJlY2FsbGluZyBuYW1lIG1ha2VzICAgbm9ib2R5IGRpc2N1c3NlcyAgICAgcHJlc2lkZW50ICBiZWNvbWUgaXJyZWxldmFudCAgIHlvdXRoIG1vc3QgaW5kaWFucyBwcmVmZXIgdmFsdWUgICAgIGVpdGhlciAgIHRoaW5rIGJvdGggc21hbGwgICBmb3JtYXRzICAgd2lsbCBuZWVkICAgVHJpZWQgIGV4cGxhaW4gICBzaW1wbGUgICBjb2x1bW4gaW5ub3ZhdGlvbnMgaHVydCAgIGFuc3dlciAgIHNob3VsZCAgc3RvcCBoYXZpbmcgR29vZCAgVHJpZWQgIHNpbXBsaWZ5ICBjb25jZXB0IGxpa2UgbWFrZSAgSW5kaWEgIGNvbHVtbiBjb3VudHJ5IHN0YW5kcyAgIGZ1bmRhbWVudGFsaXNtIGxpa2UgICB0aGF0IExvdmVseSBuYXRpb25hbCBhbnRoZW0gZG9uZSAga2lkcyAgaGF2ZSAgbG9vayAgc2hvdyAgIHlvdXIgd2FudGVkICAgICAgIHNhaWQgIHdpdGhvdXQgIHR3aXR0ZXIgdGhpcyBMYXN0IHllYXIgIHRyYXBwZWQgcHVwcGV0IGdhdmUgIGZyZWVkb20gVGhpcyAgbGVhc3Qgc29tZW9uZSBwZW9wbGUgY2hvc2Ugc3BlYWtpbmcgIEhhcHB5IEluZGVwZW5kZW5jZSBLaWRzICAgVGFrZSBwYXJ0ICBTY2hvbGFyc2hpcCBRdWl6IHRvZGF5IHVzaW5nIHlvdXIgQmVzaWRlcyBsZWFybmluZyAgIHByaXplcyB0aGluayB0aGVyZSBzaG91bGQgICBzY2hlZHVsZWQgbGlzdCAgICB3aGljaCBqb2tlcyAgIGFueWJvZHkgSGFwcHkgSW5kZXBlbmRlbmNlICAgIGZvcmVmYXRoZXJzICAgIGZyZWVkb20gdGhlbiB0aGV5IHdpbGwgY2FsbCAgZGVraCBXYXRjaGluZyAgZW5qb3lpbmcgc2hvdyB3aXRoIFZpZHlhICBpbnNwaXJpbmcgU3VjaCBwb3NpdGl2ZSBlbmVyZ3kgR2xhZCBJbmRpYW4gYm9va3MgIGJlaW5nIGRpc2N1c3NlZCAgbWFueSBwYXBlcnMgdGhpcyBIYXZlIHNvbWUgZ29vZCAgaGF2ZSBBbHRob3VnaCAgbWVudGlvbnMgIGNvbHVtbiBtYWRlICBCaGFnYXQgIFNhbG1hbiBFbmdsaXNoIGNhc3RlIHdvcmsgc3RvcCBUYWtpbmcgIGJyZWFrICB3YXRjaGluZyB0aGlzIEtpY2sgIHRoaW5rIHNvb24gIGV4cHJlc3NpbmcgZmlsbXMgICBDb25ncmF0cyBUZXh0ICBjYXJzIGJsb3dpbmcgZmFtb3VzICBwcmV0dHkgU2ltcGxlIEhhbGYgR2lybGZyaWVuZCBwcm9tbyBjcm9zc2VzIGhhbGYgbWlsbGlvbiBsYXVuY2ggZXZlbnQgICBjb29sIGZpbG0gc3RhcnJpbmcgSnVkZSAgIEJsdWUgU29tZSAgSGFsZiAgdGhhdCAgc2l0ZSBNYWtlIHRoZW0gcG9zaXRpdmUgIHNhZmUgcGxhY2VzICBTYW1lICAgIGluY2lkZW50IG1lYW4gICBldmVyeXRoaW5nIEFwcHJlY2lhdGUgICAgIHJlYWxseSB3YW50cyBDb25nICB3YW50ICByZWFkIHRoaXMgZnJlZSB1bndhbnRlZCBoYWxmICAgYXNrcyAgZXZlciB3b25kZXJmdWwgICAgY29sdW1uIEhhbGYgV2hhdCAgZmFudGFzdGljICBCdWxsICAgY291bGQgbWFrZSB3aXRoIHNob3RzICBzb21lb25lIG5hcHBpbmcgIHRoZW4gc3VkZGVubHkgc2NyZWFtaW5nICAgd2VsbCBNdXN0ICBzb21lIGpva2VzIHdlcmUgcmVhbGx5IFRoaXMgIHdhbGwgIHJlYWxseSBjcmFja2VkIHRob3NlIG11c2ljICBIYWxmIEdpcmxmcmllbmQgdGVhc2VyICBmcm9tICAgIGJhY2tncm91bmQgdHJhY2sgU2VyaW91c2x5IFBvbHlub21pYWwgbW9kZWxzICBwcmVkaWN0ICBudW1iZXIgIENoZXRhbiB1cGNvbWluZyBib29rIEhhcHB5IEJpcnRoZGF5ICBkaXJlY3RvciBNb3ZpZXMgIENhbmR5IENydXNoICAgcml2YWxzICBvdGhlciBDaGV0YW4gQmhhZ2F0IFZpZGVvcyB0aGFua3MgIHN1cGVyIGNvbmdyYXRzIGxvb2tpbmcgZm9yd2FyZCAgIHRoYW5rcyAgICAgZnVsbCBsaXRmZXN0ICAgbGl0ZmVzdCByZWFkICBmaXJzdCBjaGFwdGVyIGZpcnN0IGNoYXB0ZXIgIEhhbGYgR2lybGZyaWVuZCAgICAgIGNyYXNoZWQgICB0cmFmZmljICB3aWxsICAgV2lsbCBzaGFyZSBsaW5rIEVuZ2xpc2ggICAgY2FzdGUgSGFsZiBHaXJsZnJpZW5kIGV4cGxvcmVzIHRoaXMgYXNwZWN0ICAgc29jaWV0eSBUaGV5IHRvbGQgIG5vYm9keSBjYXJlcyBhYm91dCAgIG9ubHkgICBhbHNvICBJbmRpYW4gRnJvbnQgZnVsbCBib29rIGFmdGVyIHRoZXJlIG1heWJlICBkaXNjb3VudCB3aWxsIGhhdmUgbW9yZSB0aGFuIGVub3VnaCB0aGFuayB0aGFua3MgIG11Y2ggIHRoYW5rcyAgeW91ciBraWNrIG1lc3NhZ2UgZWFybGllciBzaXRlICBXaWxsICAgTWVhbndoaWxlICAgd2F0Y2ggIHRlYXNlciBkaXJlY3RseSAgeW91dHViZSBIYXBweSAgYW5ub3VuY2UgIG5leHQgYm9vayB0aXRsZWQgIHNob3J0IHRlYXNlciBUaGFuayAgICB0YWtpbmcgY2FyZSAgICBMZWF2aW5nIHRvbW9ycm93ICB5b3VyIEZyaWVuZHNoaXAgIFJha2hpIG5leHQgV291bGQgYWR2aXNlICBndXlzICBrZWVwICBtZXNzYWdpbmcgIGdpcmxzICB0aGlzIFN0YXkgV2lsbCAgIHdvcnRoIFJlbWVtYmVyIG1lZXRpbmcgICBqdW5pb3JzICBTdGF0ZXMgYm9vayBzYXlpbmcgICAgIHNtYWxsICBzYWlkICBUaGV5IHNhaWQgRmxpcGthcnQgcmFpc2VzICB0aGVpciBzZW5pb3IgbWFuYWdlbWVudCB3b3JraW5nIHBhc3Npb25hdGVseSB3aXRoICAgIGJvb2sgQW1hemluZyBHcmVhdCBiZWluZyAgbGFzdCBGdWxsIHlvdXR1YmUgbGluayBhY3R1YWxseSB0aWdlciB3b3VsZCByYXRoZXIgICBzaGVlcCAgc2xlZXAgTG9va2luZyBmb3J3YXJkICAgaW50ZXJ2aWV3ICB0b25pZ2h0ICBJbnNvbW5pYWNzICB3YXRjaCAgbGl2ZSBDYXRjaCAgdG9tbyBjaGF0dGluZyB3aXRoICBhYm91dCAgd3JpdGluZyBDaGFuZCAgQmxlc3NpbmdzIHRoaXMgIHNlY3JldCAgIGhhcHBpbHkgbWFycmllZCBTdXBlcmIgIFBlcHNpIHlvdXR1YmUgZGlyZWN0ZWQgIHN1cGVyIHRhbGVudGVkICAgIGRpcmVjdG9yICB5b3Vyc2VsZiAgbW92ZWQgdmlkZW8gdGhhdCB0ZWxscyAgICBmZWVscyB3aGVuIHdyaXRlcnMgIGFza2VkICB3b3JrIEtpY2sga2lsbGluZyAgICAgV2lsbCBjb2xsZWN0IGJlZm9yZSAgc29tZSBqdXN0IHBhaWQgQ29uZ3JhdHMgV2F0Y2ggICAgbGF0ZXN0ICAgcGFydGljaXBhdGUgICAgIHNjaG9sYXJzaGlwcyB3b3J0aCB3b3VsZCAgICBuZXJ2b3VzIGFib3V0IEZyaWRheSBOaWNlIGludGVydmlldyAgY29udHJvdmVyc2lhbCB0d2VldHMgIG1vcmUgV29uZGVyIHdoYXQgICAgaGFwcHkgV2VsbCBoYWhhIHRoaW5rIHRoZXJlICAgbWFoaW5kcmEgdHJhY3RvcnMgbGVtbWUgSGFwcHkgIHBsYXkgIHJvbGUgICBjaGFjaHUgIGxhdW5jaCAgICAgS2lkcyBMaXN0ZW4gIFJhZGlvT25lIE11bWJhaSB3aXRoIHRvbW8gIGZyb20gIEtpY2sgIGxpc3RlbiBUd2lucyB0dXJuIFNvdW5kaW5nIGxpa2UgIHVuY2xlcyAgd2FudCAgIGhlcmUgIHRpbWUgSGFwcHkgQmlydGhkYXkgICAgIG9ubHkgdGFsZW50ZWQgbmV3cyAgU2hpdiBTZW5hICBidWxseWluZyAgZm9yY2luZyBzdGFmZmVyICAgZHVyaW5nICBSYW16YW4gZmFzdCAgICBkaXN0dXJiaW5nIGV4cGVjdCAgYmF0dGVyeSBvcGVyYXRlZCAgIFNwZWFrICAgb3duZXIgICB3YW50IEtpY2sgcHJpbnQgQ2FzdCAgY3JldyB0cmlhbCB0b21vIFNvbWVob3cgaG91cnMgc2hhbGwgZGF5cyAgT25seSBkYXlzICAgICAgT25seSAgIGNhc3QgIGNyZXcgU3VwZXIgQ2hldGFuICBhbHdheXMgZm91bmQgU2FsbWFuIEtoYW4gdGVhbSB3aWxsIGRlY2xhcmUgIHdpbm5lcnMgICBjb250ZXN0IFdpbGwgICAgIGZvbGxvdyB0aGVtIFdoZW4gIGhhdmUgY29sb3JmdWwgIHdvcmxkIHdpbGwgICBjbGlwIE1ha2Ugc3VyZSAgIGhpZ2ggZW5vdWdoIGJlZm9yZSAgb3BlbiBSZWxlYXNlIHdlZWsgIGFsd2F5cyBsaWtlIHN0YW5kaW5nICAgZGl2aW5nIGJvYXJkICBqdW1waW5nIGRvd24gd2l0aG91dCBrbm93aW5nICB0aGVyZSAgd2F0ZXIgYmVsb3cgQ2hldGFuIG5leHQgbm92ZWwgYWJvdXQgcnVyYWwgdXJiYW4gZ2lybCBsb3ZlIHN0b3J5IE5ld3MgSW5kaWEgVG9kYXkgV2hhdCBnaXZlcyBDaGV0YW4gIEtpY2sgIEhpbmR1IHdlbGwgd3JpdHRlbiBpbmZvcm1hdGl2ZSAgbmV1dHJhbCBwcmltZXIgIE11c3QgV29ya2luZyAgICBib29rIFNoYWxsIG9wZW4gV2l0aCAga2ljayBsZWFkcyBGaXJzdCBLaWNrICAgdGhpcyBtb3ZpZSAgIENoZXRhbiBCaGFnYXQgUmVhbGx5ICAgaGVhciBhYm91dCBTdHJhbmdlIHdvcmxkICBsaXZlIHRpY2tldHMgIHdoZW4gU2VuZCAgIG1hbnkgZW50cmllcyAgICBXaWxsICBpbnRlcmVzdGluZyBlbnRyaWVzICB3aW5uZXJzIG5hbWVzIENhcHRpb24gQ2FwdGlvbiB0aGlzIEhhc2h0YWcgd2lubmVycyAgdGlja2V0cyAga2ljayB0aW1lICAgIGNhcHRpb24gQ2FwdGlvbiB0aGlzIHBpY3R1cmUgIGhhc2h0YWcgd2lubmVycyAgdGlja2V0cyBhYm91dCAgIEtpY2sgd2lubmVycyAgdGlja2V0cyAgd2F0Y2ggS2ljayAgZmlyc3Qgd2Vla2VuZCBvbmxpbmUgdGhvc2UgIHN1cHBvcnRlZCAgICBhYmxlICBpbmRpdmlkdWFsbHkgcmVzcG9uZCAgIHRoYW5rIE1lYW5zIEFsbW9zdCAgY29tbWVudHMgICAgYXJ0aWNsZSAgICBndWVzcyAgZXZlciB3cml0ZSBhcnRpY2xlICB0aGF0IHRob3NlICBhZ3JlZSBUaG9zZSAgcmVzcGVjdCAgdmlld3MgIGFncmVlICBkaXNhZ3JlZSAgbW92ZSAgIGdheWEgYmVmb3JlICBwbGF5ICBpbWFnaW5lIHJvY2tldHMgdG9zc2VkIGV2ZXJ5ZGF5ICBJbmRpYSAgeWVhcnMgIHdoYXQgd291bGQgIHdhbnQgeW91ciBnb3Z0IHVuZGVyc3RhbmQgcGVvcGxlICBoYXZlIGRpZmZlcmVudCB2aWV3cyAgICAgZW50aXRsZWQgIE5laXRoZXIgICBhYnVzaW5nICBzaG91bGQgc3RyYXRlZ3kgIGtlZXAgcHJvdm9raW5nICBwbGF5ICBsb2NhbCBwb2xpdGljcyAgd29ybGQgR3Vlc3MgIHdvcmtzIGV2ZXJ5dGltZSBTb21lb25lICBmaXJzdCBwb3N0ICAgd3JpdGUgIGhhdGUgYXJ0aWNsZSAgIHRpbWUgIGhlcmUgZGF5cyAgd2FpdCAgICAgIHNpbmdsZSBzY3JlZW4gdGhlYXRyZSBwYWNrZWQgd2l0aCBTYWxtYW4gV2hhdCAgICBHYXphIGNlYXNlZmlyZSBlbmRzIGFmdGVyIEhhbWFzIHJlamVjdHMgcHJvcG9zYWxzICByZXN1bWVzIHJvY2tldCBhdHRhY2tzIHdhbnQgIHNhdmUgIGhhcmRseSAgdmlldyAgbGF6eSBFdmVyeW9uZSBQb2ludCAgICAgaGFuZCBTb21ldGhpbmcgIGNsZWFybHkgd3Jvbmcgd2l0aCAgZWR1Y2F0aW9uIHN5c3RlbSB0aGF0IHRoZXJlICAgbWFueSBwZW9wbGUgIHdvdWxkIHJhdGhlciBmb2xsb3cgIGhlcmQgdGhhbiBoYXZlIFdoZW4gcGVvcGxlIGFidXNlICAgdGhlaXIgIGtub3cgdGhleSBoYXZlICBhbnN3ZXIgICBoYXZlICAgVGlyZWQgIGxhenkgZXh0cmVtZSB2aWV3IGNhc2UgIHNpdHVhdGlvbiAgdGFraW5nIGZpeGVkIGRlZmluaXRpb25zIHVsdGltYXRlbHkgbWFrZSB0d2l0dGVyIHN1Y2ggaGF2ZSAgYmlhcyB0b3dhcmRzIHdoYXRldmVyICAgbXVjaCByZWFkIG1pc3F1b3RlIHJpZ2h0IG9wZW4gIG1pbmQgbGFzdCB0aHJlZSB0d2VldHMgc2hvdWxkICByZWFkIEFueW9uZSBwb3N0aW5nIHRoZW0gc2VsZWN0aXZlbHkgIGNsZWFybHkgcXVvdGluZyBpbnRlcmVzdGluZyB0aG91Z2ggICBtYW55IHJpY2ggSXNsYW1pYyBjb3VudHJpZXMgICByZWdpb24gICB3b3JkICBpbnRlcnZlbmUgd2hlbiBHYXphIHRoaW5rIElzcmFlbCAgbWFkZSAgcG9pbnQgV2lzaCAgd291bGQgc3RvcCAgIGJyaW5nIHBlYWNlIHRhbGtzICAgdGFibGUgV2hhdCAgaGFwcGVuaW5nICBHYXphIGZhaXIgIHNhZGx5IHRoYXQgICBvbmx5ICBzb21ldGltZXMgdGVycm9yaXN0IG9yZ2FuaXphdGlvbnMgIHRoZWlyIHN1cHBvcnRlcnMgbGVhcm4gdGhpbmsgICAgZ2lybCB3b3JlICAgIHdvdWxkICAgICBhbGxvdyBjb21wYXJlZCAgIEJSSUNzICAgICBtZWV0aW5nIFRoYXQgbW9tZW50IHdoZW4gIGhlYWRwaG9uZXMgIHVucGx1Z2dlZCBmcm9tICBwaG9uZSAgIHdob2xlIGZsaWdodCBmaW5kcyAgICBsaXN0ZW5pbmcgIEhhdGUgU3RvcnkgbW9yZSBJbmRpYSBpbnRlZ3JhdGVzIHdpdGggICBiZXR0ZXIgICAgd29ybGQgIG1vcmUgdGhhbiBCYW5nbGFkZXNoIHRoZXkgYmVhdCB0aGFua3MgIHlvdXIgV2l0aCAgb2ZmZW5zZSAgIHVudGlsIEluZGlhIHJpc2VzIGFib3ZlIG9ic2Vzc2luZyBhYm91dCBCaHV0YW4gIHdpbGwgbmV2ZXIgcmVhY2ggSW5kaWEgaGVscGVkIGZvcm0gIGJhbmsgICBCUklDcyAgIG9ic2Vzc2luZyBvdmVyICByYW5kb20gbWVldGluZyB3aXRoICB0ZXJyb3Jpc3QgICByYW5kb20gbnVtYmVyICBwZW9wbGUgIGtub3cgICBzdGlsbCBsb3ZlICBleGNlZWRzICBudW1iZXIgIGZpbmdlcnMgIGhhdmUgICAgICB2ZXJ5IGx1Y2t5IHNpbXBsZSBqb3lzICBlZGl0aW5nICBsb3ZlIHN0b3J5ICAgcmFpbnkgIHdpdGggV2lsbCByZXZlYWwgICBkZXRhaWxzIGFib3V0ICAgU3RheSBBbWF6aW5nICBldmVyeSBnb3Z0IGFubm91bmNlcyB3aWxsIHNwZW5kICAgICAgZXhwZWN0cyBtb25leSBjb2xsZWN0ZWQgZnJvbSBzcGVudCBGdW5ueSB0aGluZyAgcGVvcGxlIGlnbm9yZSAgIHBpY3R1cmUgICBnb3Zlcm5tZW50IHNwZW5kICBzcGVuZCB0aW1lIGFuYWx5emluZyAgc3RhdHVlICBtb3JlIGJlc3QgYnVkZ2V0IHdvdWxkICAgIHRoYXQgcmVkdWNlcyBHb3Zlcm5tZW50IHN0aWxsIHdhbnRzICBjb250cm9sICBleGlzdGluZyBidXNpbmVzc2VzIHN1Y2sgICBnb3Z0ICAgIHdpdGggIGxldHRpbmcgV2l0aG91dCBzb21lIHNwZWNpZmljIHJlbWFya2FibGUgaW52ZXN0b3IgIGJ1c2luZXNzIHNlbnRpbWVudCB1bmxpa2VseSAgaGFwcGVuIHRoaW5rIHBlb3BsZSBsaWtlICBzdXBwb3J0IHRlYW1zICBjb3VudHJpZXMgd2l0aCBXaGF0IGJldHRlciAgIHR3ZWV0ICB0aGFuICBidWRnZXQgV29uZGVyICB0aGVyZSAgIEJyYXppbGlhbiBXaGF0ICBzaG93IHRoYXQgd291bGQgYmV0dGVyIHNodWRkZXIgIHRoYXQgbWF0Y2ggIFJpY2t5IFBvbnRpbmcgcmFtcGFnZSBsaWtlIHRoYXQgQ2hldGFuIFNoYXJtYSBiZWluZyAgICBsYXN0IGJhbGwgIG1vbWVudCBtdWx0aXBsaWVkIHRoYW5rIHNvbmdzICBtb3ZpZSByZWxlYXNlcyBqdXN0IGZyb20gdGVsbCAgIGNvbGxlZ2UgICB0ZWxscyAgc29tZXRoaW5nICByZWFsbHkgd3Jvbmcgd2l0aCAgZWR1Y2F0aW9uIFJ1c3NpYSBob21vc2V4dWFsaXR5ICBXaGljaCBjbHViIHNob3VsZCBJbmRpYSBkYXJrIGFyZWFzIGhvbW9zZXh1YWxpdHkgc3RpbGwgdGVjaG5pY2FsbHkgUmVzdCBwYXJ0ICAgd29ybGQgIHdhbnQgSW5kaWEgUHJhaXNpbmcgIGdvdmVybm1lbnQgb25jZSBtZWFuICAgbmV2ZXIgY3JpdGljaXplICB2aWNlIGNhc2UgIEZ1bm55ICBzb21lIHBlb3BsZSBuZXZlciBkcmFjb25pYW4gICBiYWNrIHRoaXMgcGV0aXRpb24gIHJlbW92ZSBXaGF0IG1ha2VzIHRoZXNlIGhhdGVycyAgbmFzdHkgdGhpbmdzIG9ubGluZSAgICB0aGV5ICBrbm93ICBodXJ0IHRoZXkgICB0aGV5IFdoYXQgdHJpZ2dlcmVkIGhhdGVyIERpc3R1cmJpbmcgYXJ0aWNsZSBhYm91dCAgIGtpbGxlZCBoaW1zZWxmIG92ZXIgc29jaWFsIG1lZGlhIGFuc3dlciAgIG9ubHkgc3R1biB0aGVtIGludG8gc2lsZW5jZSB3aXRoICBzbGFwICBnb29kIE5ldmVyIHVuZGVyc3Rvb2QgcGVuYWx0eSBsaWtlIGRlY2lkaW5nICBkcmF3biB0ZXN0IG1hdGNoIHdpdGggZnJlZSBQdWJsaWMgb3BpbmlvbiAga2VlcCAgZ292ZXJubWVudCAgIGdvdnQgY2Fubm90ICBhbHdheXMgIHRoZXkgIGNvdXJzZSBjb3JyZWN0IGJhc2VkICBwdWJsaWMgaW1hZ2luZSAgICAgZG9jdG9yIGhlYWx0aCBtaW5pc3RlciAgSW5kaWEgYmFucyAgUmVhbGx5IHNob3dzICAgIHByb2dyZXNzaXZlIERlYXIgZGVhbCB3aXRoIFlvdXRoIGJhY2tlZCAgIHRoaXMgdGltZSAgdGFrZSBJbmRpYSBmb3J3YXJkICBvcGVuICAgYnJpbmcgIHRoZWlyIGJhY2t3YXJkICBtb3N0IG91dGRhdGVkIFRoZXNlIGN1c3RvZGlhbnMgIEluZGlhbiB3aGljaCBvZnRlbiBpbXBsaWVzICBjdWx0dXJlICBhY3R1YWxseSBTY2hvb2xzIHRlYWNoIFBhcmVudHMgdGFsayBhYm91dCAgICAga2lkcyBzaG91bGQgbGVhcm4gYWJvdXQgIGZyb20gcG9ybiBjbGlwcyBIaWdobHkgZGlzdHVyYmVkICBkaXNhcHBvaW50ZWQgIHN0YXRlbWVudHMgICBkb2N0b3IgaGVhbHRoIG1pbmlzdGVyIGJhbm5pbmcgICAgICAgcmVncmVzc2l2ZSBFZHVjYXRpb25hbCBzeXN0ZW0gICAgcGVvcGxlIHdpdGggbGl0dGxlIGluZHVzdHJ5IFNwb3J0cyAgdGhvc2UgIGhhdmUgbmV2ZXIgdGhlbiAgICBoYXZlICBwcm9ibGVtIGVhc2llc3Qgd2F5cyAgZ292ZXJubWVudCAgc2hvdyB0aGV5IGNhcmUgICBkaWZmZXJlbnQgICBjbGVhbiAgc3BvcnRzICBmcm9tIFN0aWxsIGdyZWF0IGFjYWRlbWljcyAgZGVzaWduIHRoZXNlIGN1cnJpY3VsdW1zIGV2ZXIgIGRvd24gd2l0aCBpbmR1c3RyeSAgc3R1ZGVudHMgdGhlbXNlbHZlcyAgZmlndXJlIGtpZHMgIHN0aWxsIGdvaW5nICBidW5rIFNlcmlvdXNseSBob3BlICAgYXZvaWRhYmxlIHNpbGx5IGNvbmZ1c2lvbiAgcmVzb2x2ZWQgTmVlZGVkIG1ha2V1cCBHdWVzcyAgaGVscGVkICAgICBwaWNzIHdpdGggS2ljayBDaGljayBuZWVkICBidXNpbmVzcyBtYW5hZ2VyICAgR2VuZXJhbCBvZmZpY2UgTXVtYmFpIEFwcGx5IGJ1ZGdldCAgV29ydGggYW5hbHl6aW5nIGdvdnQgICAgc3RpbGwgIGVhcmx5IGRheXMgIHJlYWxseSAgIG1lYW5pbmdmdWwgUmFpc2luZyBmYXJlcyAgcXVhcnRlciAgIHllYXIgICBzYW1lICAgYW5udWFsIFdoYXQgc291bmRzIHJhcmVseSB3b3JrcyB3ZWxsIFJhaWwgZmFyZSBoaWtlICBjb21tdW5pY2F0aW5nICBuZWVkICAgIGJlZm9yZSBkb2luZyAgIGFsc28gIHN1cmUgICBsYXR0ZXIgSGF0ZXJzIGplYWxvdXMgIFRoZXkganVzdCB3YW50ICBrbm9jayAgZmluZCAgZmxhdyAgICBiZW5jaG1hcmsgIGhpZ2ggIG5ldmVyIGxvb2sgU29tZW9uZSAgaGFwcHkgIGFub3RoZXIgIHJhdGhlciB0aGFuICBoYXBweSB0aGV5IG1ha2UgIHBvaW50ICBleHBvc2luZyAgZmxhdyAgdGhhdCBhaXJwb3J0ICBhY2NpZGVudGFsbHkgICBib2FyZGluZyBwYXNzICB0aXNzdWUgIHdpcGUgeW91ciBoYW5kcyAgdGhyb3cgRXZlcnl0aGluZyBhYm91dCB0aGlzIGZpbG0gIGxvb2tpbmcgICBGaXJzdCBzb25nIGZyb20gV2hlbiBodW1pbGl0eSBncm93dGggQXJyb2dhbmNlICAgIGJpZ2dlc3Qgc3BlZWQgdGhpbmsgIHNob3VsZCByZXNldCAgY2FsZW5kYXIgZnJvbSAgIHdoZXJlICBzZWNvbmQgIHN0YW5kcyAgQWNjaGUgSW5zdGVhZCAgcmVwbGFjaW5nIENvbmdyZXNzIGdvdmVybm9ycyB3aXRoICAgIGJldHRlciAgZGlzY3VzcyAgcmVhbGx5IG5lZWQgZXhwZW5zaXZlIHN0YXRlIGdvdmVybm9yIG9mZmljZXMga25vdyAgcG9wdWxhdGlvbiAgQmh1dGFuICBsZXNzIHRoYW4gIHBvcHVsYXRpb24ga2ljayB0cmFpbGVyIHdlbnQgZnJvbSB2aWV3cyBhcm91bmQgICAgdmlld3MgTGlmZSBzaG91bGQgIE1ha2Ugc29tZSBtb3JlIHBsYW5zICBtb25leSAgUmVwZWF0IHVudGlsIEtpY2sgcHJvbW8gbmVhcmx5IHZpZXdzICAgTWFueSBzYXlpbmcgdmlzdWFscyBtYXRjaCAga3Vkb3Mgc29tZXRoaW5nIGFib3V0IGxvdmUgRG9uZSB0aGV5ICBkcmF3ICAgbGlrZSBub3RoaW5nIFRoZXJlICAgZmluYWxpemF0aW9uICAgY2FzdCAgUmV2b2x1dGlvbiBSZXN0ICAgdGVhbSB3aWxsICB3aGF0ICAgIG1ha2UgICBiZXN0IGZpbG0gbWVnYSB0cmFpbGVyICBzY3JlZW5wbGF5IHdpdGggU29ycnkganVzdCAgIGNvbXB1dGVyIGFmdGVyICBraWNrIHRyYWlsZXIgIGhlcmUgICBtdWNoIGJ1enppbmcgRXhwZWN0ZWQgICB5b3V0dWJlICBPbmx5ICBNYWtlIGV4aXN0aW5nIFNhbG1hbiBmYW5zIEZvcnR1bmF0ZSB3aWxsICB0aGVyZSAgd2l0bmVzcyAgICBtb3N0IGluc2FuZSBwcm9tbyByZWxlYXNlcyBLaWNrIEdhaWV0eSBQYWNrZWQgd2l0aCBTYWxtYW4gRGVhciBtYWtlIHN1cmUgIGhhdmUgZXh0cmEgc2VydmVyIHNwYWNlICBoYW5kbGUgIHRyYWlsZXIgIEtpY2sgcmVsZWFzZXMgIHdpbGwgbmVlZCBUaGVyZSAgZmlsbSAgdGhlbiB0aGVyZSAgU2FsbWFuIEtoYW4gZmlsbSAgdGhlbiB0aGVyZSAgIEtpY2sgV2hhdCBtYXR0ZXJzIG1vcmUgdGhhbiB3aGF0ICBhdWRpZW5jZSAgIGNyaXRpY3MgdGhpbmsgIHlvdXIgIHdoYXQgICB0aGluayAgeW91ciBkb2VzIFNhbG1hbiBoYXZlICBjcmF6aWVzdCAgQW5zd2VyICAgcGFzc2VzICBwcm9tbyBFbGVjdGlvbnMgIFdoYXQgIEluZGlhICBXb3JsZCAgRm9vdGJhbGwgIHF1aXRlICBzYW1lIEV2ZXJ5dGhpbmcga2VwdCB1bmRlciB3cmFwcyB1bnRpbCB0cmFpbGVyIFN1cGVyYiAgcmV2ZWFsZWQgdGhpcyByZWxlYXNlZCAgIE11bWJhaSBzaW5nbGUgc2NyZWVuIHBhY2tlZCB3aXRoIFNhbG1hbiBJbWFnaW5lICBXYW5uYSBGb2xsb3cgc2hvdWxkICBBYXJ0aSAgIFJldm9sdXRpb24gVGhpbmsgIFRoYW5rcyAgeW91ciB5b3VyIGtpbmdkb20gICAgIFBhbmRhdmFzIHdpbGwgbmV2ZXIgIGludGltaWRhdGVkICBDb25ncmVzcyBNZWRpYSBibGFtZXMgIGdvdnQgIERlbGhpIHBvd2VyICBibGFtZXMgQ29uZyBibGFtZXMgICBibGFtZXMgIHdpbGwgaGF2ZSAgcGVyZmVjdCByZWN1cnNpdmUgQ29uc3RhbnQgZ3VpbHQgICBiZWluZyBnb29kICBzZWVraW5nIGFwcHJvdmFsIGZyb20gIHdvcmxkIHJhdGhlciB0aGFuIGZvY3VzIE1hbnkgIHNjZW5lcyAgc3RhdGVzIG1ha2UgICAgZmluYWwgTWVldGluZyBGb2xsb3cgIEtpY2sgIG9uY2UgIFNhbG1hbiBhbHdheXMgIFNhbG1hbiBLeXVua2kgIGJhYXIgIGJoYWkgIGNvbW1pdG1lbnQgTWFraW5nIGdvdnQgcGVyZm9ybSAgZGFpbHkgbmV3cyAgc2FtZSAgbWFraW5nIENFT3MgcGVyZm9ybSAgcXVhcnRlcmx5IENvbXByb21pc2VzIG92ZXIgc2hvcnQgTWVkaWEgd2FudHMgIGNvdmVyIGdvdnQgbGlrZSAgY3JpY2tldCBCYWxsICBiYWxsIEFjY291bnRhYmlsaXR5IG1lYW4gdHVybiBnb3Z0IGludG8gc3BlY3RhdG9yIFdhdGNoaW5nICBBcHBsZSAgIGxhdW5jaCBMb3ZlIExvdmUgZXZlcnl0aGluZyBBcHBsZSBvZnRlbiAgIG1vc3QgY2FwYWJsZSAgdGFsZW50ZWQgICAgYmVzdCAgICAgbW9zdCBtb3RpdmF0ZWQgb25lcyBXaGVuIGV4dGVybmFsIHJld2FyZHMgIGluY2VudGl2ZSBzdHJ1Y3R1cmVzICB3b3JrICBpbm5lciBNZWFuaW5nIGVtcG93ZXJtZW50IG1hdHRlciBtb3JlIHRoYW4gZG9lcyAgbW90aXZhdGUgb2ZmaWNpYWxzIHdpdGggcGVybWFuZW50IGpvYnMgIGhhdmUgIGluY2VudGl2ZSAgIFJhcmUgZ292dCBiZXN0IHBvbGljaWVzICBpbnRlbnRpb25zIGJyaW5nIGZydWl0IHVubGVzcyAgdGVhbSBmZWVscyBtb3RpdmF0ZWQgIEdsYWQgbWluaXN0ZXIgc2Vuc2l0aXZlIEhhdmUga25vd24gIERlZGljYXRlZCAgZnVsbCAgICBwcmFjdGljYWwgSW5ub3ZhdGl2ZSAgdGhpbmsgICBpbnRlZ3JhdGlvbiBEZWxpZ2h0ZWQgIGhvbm9yZWQgIGFkZHJlc3Mgc2VuaW9yIG9mZmljaWFscyAgbWVyZ2VkIG1pbmlzdHJpZXMgdW5kZXIgY29hbCAgR3JlYXQgd2VyZSAgc3BlY2lhbCBjb21wYW55ICAgc3BlY2lhbCBzYWNyaWZpY2VzICBzdWZmZXJpbmcgdGhleSBtYWtlcyB5b3VyIGhlYXJ0IGJsZWVkIFdpdGhkcmF3ICBhaXJwb3J0IFByaXlhbmthIEdhbmRoaSBzYXlzIEp1c3QgIGxpdHRsZSBtb3JlIHdhaXQgIFNoYXlhZCAgIFR3aXR0ZXIgbW9uZXkgICAgZnJvbSAgICBTdGlsbCBvbmx5IGJlY29tZSBDTURzICBzdGFmZiAgd2FudCBmcmVlYmllcyAgbGlmZSAgZmFtaWx5IGZyb20gIHNob3VsZCBhbHNvIGFzc3VtZSBzb21lICAgQmFua3J1cHQga25vdyAgICByZW1haW5lZCBzaWxlbnQgd2hlbiAgY291bnRyeSAgcm9iYmVkIHdoZW4gIGNvdWxkIGhhdmUgZG9uZSAgRWR1Y2F0aW9uICBjYXBhYmlsaXR5ICBkaWZmZXJlbnQgYWJzb2x1dGVseSAgICAgICByYXJlIHdpbm5lciAgc3RpbGwgaHVtYmxlICB3b3JrcyAgaGFyZCBBcnRpY2xlICAgICAgbXVzdCBmaXJzdCBjb252aW5jZSBLYXNobWlyaXMgYWJvdXQgUmVhbGx5IHdpc2ggbWVkaWEgd291bGQgc3RvcCB0YWdnaW5nIG1pbmlzdHJpZXMgICAgIHZlcnkgaW1wb3J0YW50ICBqYWFnaXIgR3JhbmQgIGh1bWJsZSBTdWJ0bGUgSW52aXRpbmcgc29jaWV0eSBMZWFuIGFkbWl0ICBnb3Z0ICAgZmlyc3QgYmFsbCBzbWFsbCBpbnZpdGUgZnJvbSAgc2hvcnQgZmxpZ2h0ICAgZ2lhbnQgbGVhcCBIb25vcmVkICAgaW52aXRlZCAgICAgZ292dCBjZXJlbW9ueSAgIGJpZ2dlc3QgIGJpbGxpb24gZmluYWxseSBncmVhdCAgY291bnRlZCAgZmxpZ2h0cyAgICAgZGVzdGluYXRpb25zIG5pY2UgICBiYWNrICBJbmRpYSBhZnRlciBTdHJhaWdodCAgc2V0cyAgICBzcGVjaWFsIHByZXZpb3VzICBmcm9tIGFyb3VuZCAgSWRpb3QgcmVmZXJyZWQgYmVzdCB2YWNhdGlvbiBhZnRlciAgbG9uZyAgVGltZSAgaGVhZCBUaGFua3MgTGFzdCBldmVuaW5nICBiZWF1dGlmdWwgICAgICBtaXNzICB0aW55IENocmlzdCBSZWRlZW1lciBDaHJpc3QgICAgICBsb29raW5nIG92ZXIgSGluZHUgcG93ZXIgICAgY2FtZSAgY291bnRpbmcgIG1pc3NlZCBwb3N0aW5nIFNoYXJpbmcgZW5vdWdoIGRpZ2dpbmcgICAgZ3V5cyAgaGF2aW5nICBnb29kICAgVmlldyBmcm9tIENvbHVtbiAgRmFjZWJvb2sgZmlyc3QgZG9uZSAgdGhhdCBwcmVkaWN0ZWQgTW9kaSB2aWN0b3J5IGV2ZXJ5IE1hbnkgbGF1Z2hlZCBleHBsaWNhYmxlIGh1cnJ5ICBjb21wZXRlICAgICBvcHRzICAgICBkb25lIGhvcGUgaGF0ZSB3b3JrICBJbmRpYSBub2JvZHkgQ29uZ3JhdHMgICAgaGlzdG9yaWMgZWFzeSAgIHZpY3RvcnkgQ2hlc3QgdGh1bXBpbmcgIG11c2NsZSBmbGV4aW5nICBuZXZlciBXaW5uaW5nICBncmFjZSAgaGFuZCBDYW1lcmEgcGhvbmUgR2l2ZXMgICBpZGVhICAgc3BlY3RhY3VsYXIgdGhpcyBwbGFjZSBNaXNzIFNwYXJlICB0aG91Z2h0ICAgbmV3cyBXaGF0IHdpbGwgdGhleSBzaG93IGFmdGVyICBlbGVjdGlvbnMgICBkcmFtYSBIZWFyZCAgYmFzZWQgICByZWFsIHN0b3J5ICBNYW5qdW5hdGggS3Vkb3MgICB0ZWFtICBob3BlIHBlb3BsZSBoYXZlICBjaGFuY2UgIGNhdGNoIGRheXMgICAgSG9wZSB0aG9zZSAgIHNoYWxsIHJlbWFpbiBodW1ibGUgIHRob3NlICBsb3NlIHdpbGwgdGFrZSByZXNwb25zaWJpbGl0eSAgIGJsYW1lIGhpdHMgQ29uZ3JhdHMgICBlbnRpcmUgdGVhbSAgIGd1eXMgIG1hZGUgZnJvbSBTdGF5aW5nICBob3RlbCBidWlsdCAgIG5hcnJvdyBnYXVnZSBMb2JieSAgIE1pc3Mgd2VsbCAgZGVsYXkgICAgdmlzYXMgIGZpbmFsbHkgbWFkZSBmaW5hbGx5IG1hZGUgVGhhbmtzICAgRnJlbmNoIENvbnN1bGF0ZSAgaGVscGluZyBCYWNrICB0cmFjayAgUGVydSAgS2lkcyAgZGlzb3duaW5nIFJvZ2VyIEZlZGVyZXIgIHR3aW4gZ2lybHMgeWVhcnMgICAgYW5vdGhlciAgIHR3aW4gIG1peGVkIGRvdWJsZXMgY3V0ZW5lc3MgIGx1Y2t5IGdpdmVuICAgd29yayAgIHdpdGggd2hhdCAgICAgIGFib3V0ICB3aWxsIGJhY2sgRGVyZWsgUGVvcGxlIFdoYXRldmVyIHBvbGl0aWNpYW5zIGdhdmUgICBtb3N0IGVudGVydGFpbmluZyBlbGVjdGlvbiAgSW5kaWFuICB0aG9zZSAgZ3V5cyAgdGhhbmtzIENvdW50ZG93biBiZWdpbnMgIEVsZWN0aW9uIGRheXMgIFdpbGwgdGhlcmUgICBHdWphcmF0aSBKaG9vbGEgVHJpZWQgY29udmluY2luZyBraWRzIENhcnRlciBSb2FkICBCYW5kcmEgICBkaWZmZXJlbnQgZnJvbSAgQW1hem9uICBzdXJlICB0aGV5IGJvdWdodCBQZXJ1IGhvbGlkYXkgIGtpZHMgbmVlZGVkICBGcmVuY2ggdHJhbnNpdCB2aXNhICBjaGFuZ2UgcGxhbmVzICBCYWNrIGZyb20gdmFjYXRpb24gTG9uZyBsb25nIGZsaWdodCAgICAgUGVydSAgUGFyaXMgIFdpbGwgdHdlZXQgeWVhcnMgc2luY2UgRml2ZSBQb2ludCB5ZWFycyAgICAgIHRoYW5rcyAgVGhhbmsgIGxpdHRsZSBub3RlIFdoaWNoIGFjY29yZGluZyAgICBjb29sZXN0IGJyYW5kICAgICBXaWxsIHRlbGwgIG1vcmUgU21pbGV5cyBjbGVhcmx5IGluZGljYXRlIHRlYXNpbmcgIHRoYXQgc29tZXRoaW5nICBLaWNrIGZpcnN0IGxvb2sgdGhpcyBLSUNLIEZpcnN0IExvb2sgVGhpcyBNb250aCB3b3VsZCBsaWtlIHBlb3BsZSAgIGNvdW50cnkgIGtub3cgZGlmZmVyZW5jZSBiZXR3ZWVuICBhY2NvdW50YWJsZSBsZWFkZXIgICAgc2NhbSBidWNrIHN0b3BzIHN1Z2dlc3RlZCBuYW1lICBtYWRlICBZb3VyIGltYWdpbmF0aW9uICBjb25uZWN0aW9uICBhbm90aGVyIHBsYXkgY3JpY2tldCAgc2lzdGVyICAgIGdvb2QgUGxlYXNlIG1ha2UgICBJbmRpYW4gZWxpdGlzdHMgIExvdmVseSBkZXRhaWxlZCBHdWFyZGlhbiBTaG91bGQgIGxpc3RlbiAgbG92ZSAgIHBlb3BsZSAgIHJlbWluZGVkIHZvdGUgdG9tbyB0aGVuIHdhdGNoIGFnYWluIEphbWVzIFRoaXMgc29uZyB0ZWxscyAgdGhlcmUgIHN0aWxsIGxvdmUgc3RvcmllcyBTdGF0ZXMgZ2lmdHMgQ2hldGFuIEJoYWdhdCB0aGlyZCAgICAgQnVzaW5lc3MgcHJpbmNpcGFsIHVzZWQgY29sbGVnZSByZXNvdXJjZXMgIHBvc2l0aW9uICByZWFjaCAgIGJldHdlZW4gICAgdHJ1c3RlZXMgICBwcmluY2lwYWwgdGhleSB0aGluayBwZW9wbGUgaGF2ZSAgcmlnaHQgIGdpdmUgdGhlaXIgcG9saXRpY2FsIGV2ZW4gIHN0dWRlbnRzICB0aGluayBXaGVuICAgbGFzdCB0aW1lIHBlb3BsZSBsaXN0ZW5lZCAgdGhlaXIgY29sbGVnZSAgdGhpbmsgICB0YWN0aWNzIGp1c3QgbWFkZSBzdXJlIHdpbGwgYmxvY2sgdm90ZSBmdWxmaWxsICB3YXJtcyAgICB0aGF0IHdhcm10aCAgTWFyaWx5biBNb25yb2UgdGhhbmtzIG5hdGlvbmFsIGF3YXJkIGludGVybmF0aW9uYWwgb25lcyBhbWl0ICB0aGFua3MgICBtdWNoICAgYmVhdXRpZnVsIHRoYW5rcyB3aXNoICAgIGJlc3QgdGhhbmtzIGhhdmUgc2VlbiAgY29udmljdGlvbiAgIHJpZ2h0IGV2ZW4gIGlnb2luZyBhZ2FpbnN0IHBhcnR5ICAgYmVzdCBBbXVsIFRvcGljYWwgQm9sbHl3b29kIHJlbGVhc2UgdGhhbmtzICBtdWNoIHRoYW5rIEFjdHVhbGx5IHRob3QgdGhpcyAgIHNhcmNhc3RpYyAgIENoZXRhbiBuYXRpb25hbCB0cmVhc3VyZSBCdXNpbmVzcyBTdGFuZGFyZCBXaGVuICAgY2FuZGlkYXRlICAgYmlnZ2VzdCBkZW1vY3JhY3kgcmVtZW1iZXJzIHlvdXIgYmlydGhkYXkgIHBvc3RzICBoYXZlICAgZmVlbHMgbmljZSB0aGFuayAgd2lzaCAgICBiZXN0ICAgb3BpbmlvbiBwb2xscyBzdWdnZXN0IGtub3cgIGxlYWRlciAgIHlvdXRoIHB1bHNlIHdoZW4gICBkaXNjdXNzICBjcmVhdGlvbiAgIHN0aWxsIGdvb2QgZm9sa3MgICBnaXZpbmcgYXdheSBjb3BpZXMgICAgbmVlZCAgICBzaG9wICB0aGVpciBzY3JlZW5wbGF5IHNpbXBseSBlbnRlcnMgIExvb2sgd2hhdCAgICAgbWFrZSBoZXJlYnkgYW5ub3VuY2UgIG5hbWUgICBnaXZlbiAgbGVhZGluZyBsYWR5IHBvc2l0aW9uICBDdXJyZW50bHkgc2hvb3RpbmcgU29tZXRpbWVzIHdoZW4gbGlmZSBmYWlscyAgZ2l2ZSAgeW91ciAgY29tZSBiYWNrcyAgIGxhdGVyIHdpdGggY29tcG91bmQgU3RhdGVzIG9wZW5pbmcgd2tuZCBzaW1pbGFyICBJZGlvdHMgb3BlbmluZyBPbmx5IHRoaXMgd2l0aCBkZWJ1dCB1cGNvbWluZyBNaXJhY2xlcyBPZmZpY2UgQnVzaW5lc3MgaGl0cyBTb21ldGltZXMgd2hlbiAgd29yayAgbmV4dCAgYmVlZnkgZ3V5cyAgICBmbGV4aW5nIHRoZWlyICBzZWNyZXRseSB3aXNoICBjb3VsZCBzaG93IHRoZW0gIG1hcmsgd29yayAgbmV4dCAgdGhpcyAgd2lsbCBvbmx5IGdpdmUgVGhhbmtzIGxvdmVseSBldmVuaW5nICB5b3VyIFdpdGggICAgIG1vbWVudCB0aGFua3MgICBjYXRjaCAgIGVsZWN0aW9uIHVuYWJsZSAgcmVjb25jaWxlICBleHRyZW1lbHkgd29yZCAgbW91dGggICBjZXJ0YWluIGhpZ2ggaGFuZGVkIFRoaXMgbmFpbHMgQ2hldGFuICB5b3V0aCAgIHRoZWlyIGdvaW5nICAgUGFzc2VuZ2VyIGtub3cgIGxvdmUgIHdoZW4gICAgRG9lcyAgR29vZCBOZWVkICBleHRyYWN0IG15c2VsZiAgICBiYWNrICBjb21wbGV0aW5nICBib29rICAgIHJlYWR5ICByZWxlYXNlICAgIHJpZ2h0IHRoaW5nIGluc3BpcmF0aW9uICBTdGF0ZXMgY2FtZSBmcm9tICAgbGlmZSBDaGV0YW4gQmhhZ2F0IExhdGVzdCBNb3ZpZSBGZWF0dXJlcyBCb2xseXdvb2QgSHVuZ2FtYSBMaXRlcmFsbHkgdGhvdXNhbmRzICBBcG9sb2dpZXMgIGJlaW5nIHVuYWJsZSAgcmVwbHkgICBoYXZlIGRlZmluaXRlbHkgcmVhZCB0aGVtIHNlbmQgIFN0YXRlcyAgICBtYWRlIFNob3Agd2l0aCAgbW9iaWxlICB0b2RheSAgbHVja3kgY3VzdG9tZXJzICAgYm9vayB0YWtlIGNhcmUgIERvaW5nICAgIHRha2UgY2FyZSAgIHlvdXRoIHRoZWlyIHdpbGwgc2xlZXAgcHJvcGVybHkgYWZ0ZXIgdGhhbmtzIG9uY2UgYWdhaW4gdGhhbmsgIGdvb2QgeW91ciBibGVzc2luZ3MgICAgbWVudGlvbiAgdHJ1c3QgY3JlYXRlZCBzaWxlbnQgc3VwcG9ydCAgIGJpZ2dlc3QgVG9kYXkgIGRpc3BsYXllZCAgICBUaGFuayAgICBwaGVub21lbmFsIFRoYW5rIEJ1bXBlciBXZWVrZW5kIEV4cGVjdGVkICBPZmZpY2UgSW5kaWEgcHJlbWllciBmaWxtIHRyYWRlIG1hZ2F6aW5lIE9mZmljZSBzdG9ybXMgIEJvbGx5d29vZCBIdW5nYW1hIE5lZWQgIGd1eXMgSnVzdCAgdGhlcmUgIFRoYW5rIGxpdmUgY2hhdCB3aXRoIEFsaWEgIEFyanVuIHRvZGF5IGJlZ2lubmluZyAgYm9yZGVyICBUaGFuayAgIHlvdXIgIHRlYW0gd2lsbCBkZWxpdmVyIHRoaXMgTG92ZWx5IGFmdGVybm9vbiBkaXNjdXNzaW9uIHdpdGggeW91dGggIE1pdGhpYmFpIGNvbGxlZ2UgYWxvbmcgd2l0aCAgIHN0YXRlICAgbmF0aW9uIGxpa2UgdGhpcyBoYW5kbGUgbmFtZSAgbWFueSBtb3JlICB0aGlzIEx1Y2t5IG90aGVyIGhhcmQgcmVzdCBtYW55IGZpcnN0ICBmaXJzdCAgIGxlYXN0ICBmaXJzdCAgdHlwZXMgb3RoZXIgaGFyZCAgc3RlYWwgd2hhdCAgbWFrZXMgIHJlc3QgQWRkaW5nIHRhc2tzICB5b3VyIFdhdGNoICBmaXJzdCAgIG1vcmUgICAgc3BlY2lhbCB0cmVhdCB0aW1lICBib29rIEJvb2tlZCBXaGljaCBDaGFybXMgbWFrZXMgIHRvdWNoZXMgICBldmVyeSBkZXB0IHlvdW5nZXIgdGhhbiAgICB5b3V0aCAgICAgICB5dXZhIHRoaXMgIGNvdW50ZG93bnMgaGF2ZSBmb3Jnb3R0ZW4gIHR1cm4gQ2hldGFuIEJoYWdhdCAgICBCb29rICBHZXR0aW5nIFRocm91Z2ggIEJ1Y2tldCBSZWFsIGxpZmUgc3RhdGVzIGNvdXBsZXMgdGFsayBhYm91dCB0aGVpciBNYW55IGludGVybmF0aW9uYWwgcHVibGljYXRpb25zIGtlZW4gICBzdG9yaWVzICAgcHJvZ3Jlc3NpdmUgVGhleSAgbG92ZSAgcHJvZ3Jlc3Mgc3RvcmllcyBJbmRpYW5zIGhhdmUgZGVjaWRlZCB0aGVpciBPbmx5IGZvcm1hbGl0aWVzICAgICBrbm93IHdoYXQgIGdvaW5nICBXaGF0ZXZlciAgIG11c3QgUmVhZCBwYXRyb25pemluZyBsZXR0ZXIgIHN1cGVyIGludGVsbGVjdHVhbHMgd2FybmluZyBhYm91dCBwb2xpdGljYWwgb3V0Y29tZSAgICBzbWFydCBwZW9wbGUgcHVibGlzaCB3cm90ZSAgUmVkaWZmIFdhdGNoaW5nIHdpdGggTWlzc2luZyAgZW50aXJlIEtpY2sgdGVhbSAgIHNob290aW5nIEJvbGx5d29vZCBzdWRkZW5seSB0dXJuaW5nIHBvbGl0aWNhbCAgZmluYWxseSB0YWtpbmcgIFdoYXRldmVyIHRoZWlyICAgUG9wdWxhciBldmVuIG1vcmUgV2hlbiAgIHN1cGVyIHNvbWV0aW1lcyAgb25seSB0aGluZyB0aGF0IHdvcmtzICB3YXRjaGluZyBCYWJ5ZG9sbCAgIGxvb3Agd2l0aCBwb2xpdGljYWwgIHlvdXR1YmUgcGVvcGxlIGhhdmUgd29ya2VkICB3aXRoIE1hbnkgaGF2ZSAgdGhlaXIgY2FyZWVycyAgIHdvbmRlciAgV2FudCAgIHdvcmsgVG9mZmVlIGFjdHVhbGx5IHJlZmVycyAgIHNwZWNpZmljIGNhcmFtZWwgdGVybSB1c2VkIFRvZmZlZSBzY2FtIHdvdWxkICAgY3V0ZSBsaWtlIEZvb2QgU2VjdXJpdHkgQmlsbCBzaG91bGQgaW5jbHVkZSBjb21wbGV0ZSBndWlkZSAgIGFic29sdXRlbHkgdGVycmlmaWMgd29tZW4gIENoZXRhbiBib29rcyB0aGluayAgIHdvcnRoIHNwZW5kaW5nICBtdWNoIHRpbWUgY29udGV4dCAgb2Z0ZW4gZm9yZ290dGVuICBtb3ZlIHdhbnQgIGJsYW1lIHRoZXkgbmVlZGVkICB0aGV5ICBoYXBwZW5zIGhhaGEgdGVsbCAgaG9uZXN0bHkgICBhbnN3ZXIgICAgICAgIHJpZ2h0IGFuYWxvZ3kgYmVjYXVzZSAgICBzaG93aW5nIHNraW4gdGhleSAgICBnaXZlICAgc3VpdGFibGUgYW5zd2VyICAgICBwb29uYW0gdGhlbiAgYW5zd2VyaW5nICAgICBwb29uYW0gdGltZXMgaG9wZSAgbXVjaCAgIHRydXN0ICBhbHNvIHJlYWQgd2hhdCAgICAgYWJvdXQgd29tZW4gICBsYXN0IGtub3cgICBoYXZpbmcgICAgam91cm5vIHVuZXRoaWNhbGx5IHR1cm5lZCAgcXVvdGUgZ2VuZXJpYyB3aGlsZSAgIHJlc3BvbmRpbmcgIGFuYWxvZ2llcyByZWFsbHkgd2FudCAga25vdyAgdGhvdHMgICBsYXN0IFBvc3NpYmx5ICBtb3N0IG1lbW9yYWJsZSBzY2VuZSBmcm9tICAgIGRpYWxvZ3VlICBtaWNrZXkgbW91c2UgZHJhd2JhY2tzICBiZWluZyAgICAgbmV2ZXIgICAgcHJvZHVjdHMgY2FsbGVkIENvbG9zc2FsICBNYXliZSBIYXZlICAgdGhlc2UgQWxpYSAgY2x1YnMgIG11Y2ggY3V0ZXIgIHN3ZWV0ZXIgdGhhbiAgcG9saXRpY2FsICBCb3RoIGZpbGwgdGhpcyAgICBhY3R1YWwgY3VycmVudCBjbGFzcyAgcGVyZm9ybXMgIFN0YXRlcyBzb25ncyAgIGZyb20gaWRlYSAgd2FpdGluZyAgc29tZXRoaW5nIG1ha2VzICBtb3JlIEFuZHkgV2FyaG9sIGhlbHAgdGhpcyBTdGF0ZXMgIGhvZ2EgIElzbGl5ZSBCZXN0ICAgd2F0Y2ggV2F0Y2ggIFdpdGggIE9uY2Ugd2l0aCBPbmNlIHdpdGggZXh0ZW5kZWQgTGVzcyB0aGFuIHdlbGwganVzdCAgc29tZXRpbWVzICBncmVhdCBtb3RoZXIgY3JlYXRlcyAgZ3JlYXQgZGF1Z2h0ZXIgdGhhbmsgc3RhcnRlZCAgd3JpdGUgIHN1cmUgIHdhbnQgIHdyaXRlICB0aGlzIGV2ZW4gIENoZXRhbiBCaGFnYXQgIFN0YXRlcyB0aGluayAgbWFqb3IgcGFydCAgZ3Jvd2luZyAgIGZhY2luZyB5b3VyIGZlYXJzICB2dWxuZXJhYmlsaXRpZXMgIHN0aWxsIGJlaW5nIHByb3VkICAgIFN0aWxsIG5hdGlvbiBhd2FpdHMgZGlyZWN0b3Igc2xhdmVzICBuaWdodCAgbWFrZSBmaW5hbCBmcmFtZXMgZXZlbiBtb3JlIHNob3cgSW50ZXJ2aWV3IHdpdGggUG9zc2libHkgIG1vc3QgIGhhdmUgb3BlbmVkIE5leHQgIEp1c3QgbWlsbGlvbiB1c2VycyAgRmFjZWJvb2sgICB0aGV5IHNhaWQgc29jaWFsIG1lZGlhIGZvdW5kIHJlc3BlY3QgIHBvbGl0aWNpYW5zICBsaXZlIHRocnUgdW5jZXJ0YWludHkgIGVsZWN0aW9uICBoYW5kbGUgIHJlbGVhc2UgICBtb3ZpZSAgZXZlbiB2b3RpbmcgICB2b3RlICBwZW9wbGUgICB0aGluayAgbGVhZCAgbmF0aW9uICBtYWtlIEluZGlhICBJbmRpYW5zIHJlYWNoIHNoYWxsIHBsYW4gc29tZXRoaW5nIGNvbWluZyAgd2F0Y2ggIHdpdGggbWV0aG9kIHVzZWQgIGRldGVybWluZSB3aGljaCBwb2xpdGljaWFuICBtb3N0IGFibGUgIGJyYWlud2FzaCBEZW5uaXMgQWRvbmlzIFRoYW5rcyAgdGhvc2UgIGp1c3QgdHdlZXRlZCAgdGhlaXIgICAgbGlmZSBUaGFuayB0aGF0IHRob3NlICBjbGFpbSAgY2FyZSAgY291bnRyeSAgZ2FuZ2luZyAgIHRocmVhdGVuaW5nICB3aXRoIGNvbnNlcXVlbmNlcyAgIHNwZWFrIFBsZWFzZSBpZ25vcmUgdGhvc2Ugc3ByZWFkaW5nIGZhbHNlIHJ1bW9ycyBhYm91dCBNYW55ICBjeWJlciBidWxseWluZyAgdGhlc2UgICAgIGZvcm0gIFBsZWFzZSBjb25kZW1uIHZpb2xlbmNlIGFnYWluc3QgIHBvbGl0aWNpYW4gIGV2ZW4gQmVpbmcgdXBzZXQgICBleGN1c2UgIEhvcGUgICBiZWluZyBleHRyZW1lbHkgU3RhdGVzICBzY3JlZW4gIGNyYW5raW5nIGdhbWUgICBtdWNoIHJhbmRvbW5lc3MgICB0YWxlbnQgIGNhcGFiaWxpdHkgY291bnRzICAgdXNlZCAgc2lsbHkgVGhlcmUgICB3YXlzICBwaXNzICBwZW9wbGUgIHRoaXMgIHNvbWV0aGluZyAgc29tZXRoaW5nIERvaW5nIHNwZWNpYWwgZXZlbnQgcGx1cyBtb3RpdmF0aW9uYWwgdGFsayAgeW91bmcgdm90ZXJzICBNdW1iYWkgICAgIGdpdmluZyBtaXNzZWQgY2FsbCBFbGVjdGlvbnMgICAgIFNlbmQgcGljcyAgICBmcm9tIHRoZXJlICB2b3RlZCAgIHZvdGVkIEluZGlhICAgcHJldHR5IHN1cmUgd2hhdCAgZ29pbmcgICBwb2ludCBvdmVyIGRpc2N1c3NpbmcgcG9saXRpY3MgbW92aWUgY292ZXIgZWRpdGlvbiAgU3RhdGVzIHdpdGggQWxpYSAgQXJqdW4gIG1hbGwgQ29tZSBkYXlzICBQYW5pYyBhdHRhY2tzIEFsd2F5cyBoYXBwZW5zIGJlZm9yZSBOZWVkIHlvdXIgc3VwcG9ydCBsaWtlIG5ldmVyIFN0YXRlcyBtb3ZpZSBlZGl0aW9uIGJvb2sgVG9tbyAgSW5maW5pdGkgTXVtYmFpIGV2ZXJ5ZGF5ICBtb3ZpZSBtYWtlcyAgd2FudCAgICBuYXRpb25hbCAgUXVlZW4ga2lzcyAgIGp1c3QgIHNob3cgIGludGltYXRlICBsaWJlcmFsICBjb3VwbGUgIGNvbnRyYXN0ICB0cmFkaXRpb24gdGhhdCBoaXRzIHJlc3BlY3QgeW91ciBpbm5lciAgICAgbGVzc29ucyBpbnNwaXJlZCAgIHdvbmRlcmZ1bCBmaWxtIHJlbGVhc2UgQXByaWwgR3Vlc3Mgd2hhdCAgIG1hdGNoIHRoYXQgIENoZW5uYWkgQ2hlbm5haSBXaGVuICAgc2VsZmllIHBpY3MgIGNvbWUgIG11Y2ggV2VudCAgIHRhbGsgYWJvdXQgSW5kaWFuIGVsZWN0aW9ucyAgV2hhdCAgICBmcm9tIG91dHNpZGUgaGF2ZSBTdGF0ZXMgd2l0aG91dCAgUHVuamFiaSAgSGVyZSAgICB2aWRlbyBSYXJlICBmaWxtbWFrZXJzICAgIHBvc3RlciB3aXRoIGFkYXB0ZWQgYm9vayBUb2xkICBhYm91dCAgTmF2cmF0cmkgZmFzdCAgY2hlZiBzZW5kcyAgIHN1cnByaXNlIE5hdnJhdHJpIHRoaW5rICAgYW1hemluZyBzeW1ib2xpc20gQXByaWwgIGNhbWUgICBtaWRkbGUgIGVsZWN0aW9uIGV2ZW4gdGhvdWdoICAgcGFpbnN0YWtpbmdseSAgdHdlZXQgc2F5aW5nICAgY29udGVzdGluZyBWYXJhbmFzaSAgQ29uZyB0aWNrZXQgIHJlcXVlc3QgVGhpcyAgc3VycHJpc2UgbmVlZCAgc3VwcG9ydCAgIGZpbmFsbHkgdG9vayBSYWh1bCBjb250ZXN0IFZhcmFuYXNpICBDb25nIEZseWluZyAgICB0b25pZ2h0ICB0aGVuIExvbmRvbiAgICBwcm9tb3RlIHRyeWluZyAgdHJpY2sgIHRyYW5zZmVycmluZyAgc29uZyAgIGhlYWQgICAgIHN0b3AgdGhpbmtpbmcgYWJvdXQgZG9sbCBtYWluIHNvbmUgQ2FsbGluZyAgICB0aG9zZSAgIGFkZGljdGVkICB5b3VyIHNvY2lhbCB5b3VyIFRvbGQga2lkcyAgICAgY29tcHV0ZXIgIG1ha2UgIFRoZXkgbWFkZSBraXNzaW5nICAgbXVjaCAgIHN0YXRlcyBtb3ZpZSBpZGVhICB0aGVyZSAgIE1vZGkgd2F2ZSAgICB0aGVyZSAgZGVmaW5pdGVseSAgd2F2ZSAgcGVvcGxlIHNheWluZyB0aGVyZSAgIE1vZGkgZmVlbCBiZXRyYXllZCAgcHJhaXNlZCAgcGFydHkgZmlyc3QgICBjcml0aWNpemUgIHNob3VsZCBoYXZlICBjb3p5IGFycmFuZ2VtZW50ICBwdXJlIGZyaWVuZCBwb2ludHMgd2l0aCAgaGF2ZSBEb2VzICAgIGNoYW5nZSAgY3VsdHVyYWwgYXR0aXR1ZGVzIHRvd2FyZHMga25vdyAgd3JpdGUgZWRpdG9yaWFscyAgICAgbG92ZSB0aGlzICBzdXBlciBjYXRjaHkgQmFieSBEb2xsIGRvbGwgbWFpbiBzb25lIEJob3BhbCAgIFN0dW5uZWQgICBzdHJvbmcgYnV6eiAgV2l0aCBncmFjZSAgeW91ciB0aGlzIGZpbG0gIGdvaW5nICBzdXJwcmlzZSBMaXZlICBldmVudCB0aHJvdWdoIHRoaXMgYmxvZyAgR29vZCBMb29raW5nICBtb3JlIGZyb20gU29tZSAgIHBhZ2VzIGJsYXN0ZWQgIHBpY3R1cmVzIHNob3dpbmcgICAgZXZlbiAgIGNsYXJpZmllZCAgIHN0b3AgaGVscGVkICBtZWV0IGZyaWVuZHMgIGJlY2FtZSBBdHRlbmRlZCBjaGFpICBjaGFyY2hhICBhcG9saXRpY2FsIFdpbGwgaGVscCBwb2ludCAgb25seSAgc2hvdyAgIGNyZWRpYmlsaXR5ICBIYXZlIGNhbGxlZCAgQ29uZyBkaW5vc2F1cnMgd2l0aCB0YWlscyBXb3VsZCAgbmljZSAgIGFsc28gc3RvcHMgZG91YnRpbmcgaW50ZW50aW9ucyAgY2FsbGluZyB0aGVtIGFnZW50cyAgIHdpdGggIEp1c3QgZGlmZmVyIHdpdGggcG9saWNpZXMgIGZlZWwgbWFkZSBtaXN0YWtlcyAgaHVydCB0aGVpciBicmFuZCAgIG5ldmVyIGhhdmUgZG91YnRlZCB0aGVpciBKdXN0IENob3AgTW9kaSAgcGllY2VzIENvbmdyZXNzICB0aWNrZXQgQW1hemluZyB3aGF0IHNlY3VsYXJpc20gdGVhY2hlcyBmaXJzdCB0ZWFzZXIgZGlhbG9ndWUgcHJvbW8gY3JpY2tldCAgICAgIG1hdGNoIHRvZGF5IGNvdWxkIFNob3QgIGxhc3QgZXBpc29kZSAgIE1hbXRhIGFpcnMgdGhpcyAgV2lsbCBtaXNzICBncmVhdCBzdGFuZCAgICB3YW50ICB0ZXN0ICBnaXZlICBBYnJhaGFtIExpbmNvbG4ga25vdyAgdGhpcyBzb25nIG1hZGUgICB3aGVuICB3YXRjaGVkICBnb3JnZW91cyB2aWRlbyBmcm9tIG1lcmkgamFhbiBuZWl0aGVyICBzdXBwb3J0IGFueW9uZSBibGluZGx5ICAgICAgICB0aG90IFN0YXRlcyByZWxlYXNlcyBBcHJpbCBzYW1lIHdlZWsgICBBcHJpbCBoYXZlIGFza2VkICAgYmV0dGVyIENvbmcgbWFuaWZlc3RvIGNvbWluZyBIb3BlIHRoZXkgIHJldmlldyAgYmVmb3JlaGFuZCAgbm9ib2R5IG5lZWRzICBjb21lICB0ZWFyIGVsZWN0aW9uIENoYW5jZSAgcG9saXRpY2lhbnMgIHNob3cgdGhleSBjYXJlIGFib3V0IG1vc3QgbG92ZWQgIGNoYW5jZSAgc2hvdyB0aGV5IGNvcnJ1cHQgcG9saXRpY2lhbnMgIHBsYXkgQkNDSSAgZW50ZXJ0YWlubWVudCB0aGV5IGNvcnJ1cHRpb24gaGVscHMgbWluZCBCQ0NJIGNsYXNzaWMgZXhhbXBsZSAgY29ycnVwdCBlbnRlcnByaXNlICAgIGluY2VudGl2aXplZCAgcHJvbW90ZSAgbGlrZSB3YXRjaGluZyBTaG93cyAgY29ycnVwdGlvbiBoYXJkIEluZGlhbiBjcmlja2V0IG11c3QgIGNsZWFuZWQgIG11c3QgbG9vayAgc3BvcnRzIG90aGVyIHRoYW4gY3JpY2tldCAgIG1vbm9wb2x5ICBjYXVzaW5nICBJbmRpYW4gc2F5cyBTcmluaSBzdGlsbCBoZWFkaW5nIEJDQ0kgICBwb2xpdGljaWFucyAgQkNDSSBzcGVhayAgIGxlYXN0ICAgd3JvbmcgdGhlbiBwZW9wbGUgIGdvaW5nICBmb2N1cyAgZHJhbWEgICAgc2VhdHMgdGhhbiBzdWJzdGFudGl2ZSBuYXRpb25hbCBpc3N1ZXMgIGRlc2VydmUgIGtpbmQgIGdvdmVybm1lbnQgR29vZCAgdHJ5aW5nICBtYWtlIEluZGlhICBmaWdodGluZyBlYWNoIG90aGVyIFdoYXQgIHRoZXkgICBJSU1BICBtYWtpbmcgYWZyYWlkICBib2xseXdvb2QgYWN0aW5nIGdpZ3Mgd291bGQgICAgbGVzcyBjaGFsbGVuZ2luZyAgIHRoYW4gIGRyYW1hICBoYXZlICBmYWNlIHJpZ2h0IGJyb3RoZXIgbW9yZSBpbnRlcmVzdGluZyBxdWVzdGlvbiAgIHJlbmFtZXMgaGltc2VsZiBBbm5hICB3aWxsIGxpc3RlbiBTdGF0ZXMgbGllcyAgIGJvb2sgc2hlbGYgZXZlbiBBcmp1biBLYXBvb3IgIFRpbWVzICBJbmRpYSBndWVzcyB0b2RheSAgdGhpbmdzICBsZWFybnQgZnJvbSBDaGV0YW4gcG9saXRpY2FsIG1vb2QgcG9sbCBGaXJzdHBvc3QgTGlrZSAgcGFydHkgICBtYW55IGxlYWRlcnMgIHdhbnQgICAgU29tZSBoZWFkcyBuZWVkICBxdWlldGVuIFNlZWluZyBkcmFtYSAgc2VuaW9yICBsZWFkZXJzIGFzc2VydGluZyB0aGVtc2VsdmVzICBEYXJlIENvbmcgbGVhZGVycyAgIHNhbWUgd2l0aCBhdXRob3JpdGFyaWFuIG1hbnkgY29uZ3JhdHMgc3VyZSAgd2lsbCAgIGxhbmRtYXJrICBpbmRpYW4gY2FsbGVkIG15c2VsZiAgY2xvc2V0IFRoaXMgbGFkeSAgICAgICAgZGFyZSAgY2xhaW0gR3Vlc3NpbmcgZ2FtZSAgICBsaWZldGltZSBkb21lc3RpYyBjb2xsZWN0aW9ucyAgUmVmZXJlbmNlIGRhdGEgIGZpbG1zIEJhbmtpbmcgU29jaWFsICBpbXBvcnRhbnQgdGhpbmdzIExhdW5jaGluZyAgYmFua2luZyBzb2x1dGlvbiAgIGNvb2wgYmxvZ2dlciBtZWV0IHRvZGF5ICBCYW5rIGFjY291bnQgaW50ZWdyYXRlZCB3aXRoIEVsZGVyIHBvbGl0aWNpYW5zIGRlc2VydmUgV2hldGhlciB0aGV5IGRlc2VydmUgdGlja2V0cyAgIGRlcGVuZHMgICB0aGV5ICBTaW1wbGUgbGVhZGVycyBsdXJraW5nICAgc2lkZWxpbmVzIGhvcGluZyAgIE1vZGkgICBzaG90ICAgc2hvdWxkIGtub3cgc3VjaCB0cmlja3Mgd2lsbCBkaXNhcHBvaW50IGdldHRpbmcgaW50byBMTVNVIExhc3QgbWludXRlIHNjcmV3IE9uY2UgdGhleSBzbWVsbCAgbWFueSB3YW50IHRoaW5rICByZXBsYWNlbWVudCB3b3JkICAgICAgYmFodXQgRGVhciB3aWxsICAgY29ycnVwdGlvbiB3aGVuIENvbmcgYnV5cyBsaWtlcyAgc2ltcGxlICBuZXh0ICBJbmRpYW4gZmFrZSBLaWNrIHRlYW0gbmVlZGVkICB3aGl0ZSAgYXNrZWQgICByb2xlICB3cm90ZSBhYm91dCAgIEZpbmFuY2lhbCBXaGF0IGZyaWVuZCAgaGVhZHMgdG9vayAgc21hbGwgcm9sZSBzdXJ2ZXlzICAgICB0aW1lICB0YWtlIHRoZW0gbW9yZSBzZXJpb3VzbHkgdGhhbiAgICAgIHdvcnRoIGlnbm9yaW5nICAgaG91ciBnbG9iYWwgYnVyc3QgIENvbmcgc3VwcG9ydCAgbGlmZSBzdXJ2ZXkgIHNvbWV0aGluZyBsaWtlIHRoaXMgICBDb25nIENoYWxvIGltcG9ydGVkICBDb25nICBsZWFzdCAgc29tZSBtb3JlIGxpa2VzIHRoaXMgV2VsbCBwb3N0IHdoaWNoIHNheXMgIGxpa2UgICBzdXBwb3J0IFRoZW4gICBuYW1lcyAgdGhvc2UgY29sb3IgICBIb3BlICAgIFRoYW5rcyAgYmVpbmcgSGFwcHkgaG9wZSAgcmVkdWNlIGVsZWN0aW9uICAgc2hhbGxvdyBib3hpbmcgcmluZyB0YW1hc2hhICBhY3R1YWxseSAgICBlbGVjdCBnb29kIGxlYWRlcnMgIGNvdW50cnkgYmFjayAgdHJhY2sgb2ZmaWNlIHdpbGwgY29udGFjdCBNb2RpIGNvdWxkIHN1cnZpdmUgIHRocml2ZSBkZXNwaXRlIHllYXJzICAgICB3b3VsZCAgICBHdWphcmF0aSBsaWtlcyAgd2FzdGUgdGhlbiAgbXVzdCBMaXN0ZW4gIHNvbWUgcG9saXRpY2lhbnMgUmVtaW5kcyAgIHRoaXMgb25seSAgZXhpc3RpbmcgcG9saXRpY2FsICBlbm91Z2ggdm90ZXJzIHdvdWxkIGNhcmUgYWJvdXQgc3RpbGwgdHJ5aW5nICBtYWtlICAgICAgIGRheXMgICB3aGF0IE9mZm8gIExvY2hhIFlvdXIgdGhpcyBzb25nIGRlZGljYXRlZCBoaW1tYXR3YWxpICAgICBSZWFsbHkgIHJlYWR5ICAgY291bnRyeSByZW1haW5zIGdvb2QgcGVvcGxlIGVudGVyIHBvbGl0aWNzICAgc3RheSBpcnJlc3BlY3RpdmUgICAgZ29vZCBDb25ncmF0cyAgYmVzdCB3aXNoZXMgIGZyaWVuZCAgZ2lybCAgc3dpdGNoaW5nIGNhcmVlcnMgIGpvaW5pbmcgZm9sbG93ICB0YWxlbnRlZCAgZGlyZWN0b3IgIFN0YXRlcyBBYmhpc2hlayBWYXJtYW4gZ29pbmcgICAgdGVybSBjYWxsZWQgcG9zdCBBcHJpbCBmcm9tIGNvbGxlZ2Ugcm9tYW50aWNzICBmcm9tIGNhbm5vdCAgICBoYXZlICBjaG9vc2UgYmV0d2VlbiBzb21lIGZhbGxpYmxlIFRoYXQgICBmYWN0IFNvcnJ5ICBzb21lICAgcG9saXRpY2FsIHZpZXdzIGhhdmUgIG1hdGNoZWQgeW91cnMgIGh1cnQgSnVzdCB0cnlpbmcgIGtlZXAgeW91ciBsZWFkZXJzIGFuaW1hbHMgICBzb21lIGFuaW1hbHMgIG1vcmUgZXF1YWwgdGhhbiBHZW9yZ2UgQW5pbWFsIEZhcm0gU29uZyByZWxlYXNpbmcgICBjYWxsZWQgTG9jaGEgbWVhbnMgdHVybW9pbCAgVWxmYXQgICBwZXJzaWFuIHdvcmQgIEhlbmNlIHN0YXRlcyBzb25nICAgIENsYXNzaWMgZHJ1ZyBhZGRpY3Rpb24gS2VlcGluZyAgaG9va2VkICAgbW92aWUgIGdpdmluZyAgc21hbGwgSnVzdCBhYm91dCAgbW9udGhzICAgICAgICAgd2VyZSBNYW5tb2hhbiAgcmVuZXcgIFRhdGEgIHN1YnNjcmlwdGlvbiBpbnRlbGxpZ2VuY2UgIGtpbmRuZXNzICAgRmluZGluZyB0aGVtICB0b2dldGhlciBleHRyYW9yZGluYXJpbHkgQ29uZyBndXlzICB0d2l0dGVyIHNob3VsZCAgdG9nZXRoZXIgICB0aGlzIFNpY2sgIHBvbGl0aWNhbCBUYWtlICBjaGFydGVyIHBsYW5lICByZWFjaCAgZmx1bmcgdGFrZSAgICAgIHBsZWFzZSAgIGNvdW50cnkgd2VsbCBqdXN0IGFib3V0IHRha2luZyAgbG9jYWwgICBhbHNvIGFib3V0ICAgZ3V5cyAgdGFrZSBsb2NhbCB0cmFpbnMgd2lsbCBoYXZlIHRoZWlyICBjYXJzIFRvb2sgIGZpcnN0IHJpZGUgZnJvbSBDYXJ0ZXIgICBzbGljayBzaG93cyAgY2hlY2sgIExvdmUgT2J2aW91c2x5ICBwdW5pc2ggIEluZGlhbiBzdHVkZW50cyB1c2luZyBJbmRpYW4gY29sbGVnZXMgIHN0dWR5ICBjaGVlcmVkICB3b3VsZCBsb3ZlICBrbm93IHRoZWlyIFJlYWxseSAgcmVhZHkgICBjb3VudHJ5IHJlbWFpbnMgZ3VhcmRpYW5zICBjb3JydXB0aW9uIGV2ZW4gcmVtZW1iZXIgYW55bW9yZSB0aGF0IHRoZXJlICAgQ29hbCBzY2FtICAgZ292dCB0aGF0IHNhaWQgIHBvbGl0aWNpYW5zIGRlc2VydmUgIEJlYXQgdGhpcyB3aGF0cyAgIGh1cnJ5ICAgdHdpc3Rpbmcgc3RhdGVtZW50cyB3ZWxsICBoYXZlICBkaWZmZXJlbnQgbG9zaW5nIGNyZWRpYmlsaXR5IGhlbHAgYWNoaWV2ZSAgaGVuY2Ugc2xvdyBzb3JyeSBhYm91dCAgd2lsbCB1bmRlcnN0YW5kICBjb25jZXJucyBndWVzcyBjdXRzIGJvdGggIGd1ZXNzICAgbmV1dHJhbCBvbmx5ICAgIHNpbGVudCAgcGFzc2l2ZSBHb29kIE1vcm5pbmcgcG9saXRpY3MgVGhhbmtzICAgZnJpZW5kIGhlcmUgIHdpdGggIGN1dGUgZnVsbCBzb25nICBzb21lb25lICBtYWtlICBseXJpY3Mgd2lsbCAgaGFwcHkgIHR3ZWV0IHRoaW5rICAgIGNsb3NldCB5b3VyIGRlZmxlY3QgeW91ciBwYXJlbnRzICB0ZWxsaW5nIHRoZW0gIG1pc3Rha2VzICAgICBzY29yZWQgICAgbG9zdCBTb21lIElJTUEgYWx1bW5pIGJlY29tZSAgVGhlcmUgIG90aGVycyAgdGhpbmsgICBzdG9yaWVzIGludm9sdmluZyBtYWtpbmcgICBjYW1wdXMgc2V4eSAgc3dlZXQgIHJvbWFudGljIGZpcnN0IHNvbmcgZnJvbSBjYWxsZWQgU2hvdCB0cmVlIGZhbGxzICAgICBtZWRpYSBjb3ZlciAgIG1ha2UgUmVhc29uIHdoZW4gIGRpc2FncmVlIHdpdGggICBtYWtlIHBlcnNvbmFsIGFsbGVnZSBub25zZW5zaWNhbCBiYXNlbGVzcyAgY29vbCBnb2luZyAgbGFuZCAgdW5hbm5vdW5jZWQgICBQcmV6IG9mZmljZSB3aXRoIG1lZGlhICBvYnZpb3VzbHkgY29ycnVwdCAgc2NhcmVkIHByb21vIHRvdWNoaW5nIHZpZXdzICAgIHJld2FyZCAgIHByb21vIHdhdGNoZXJzICB0aGVpciBnb29kICAgc29uZyByZWxlYXNlcyB0b2RheSB0aW1lICAgICAgY291cGxlICBUYWtlIGNhcmUgIGhhdmUgIGdyZWF0IGFjY29yZGluZyAgcmVzcG9uc2VzIGZyb20gIHN1cGVyIGJyYWlueSBTYXZlIHRob3NlIGNoZWNrIEFscmlnaHQgIG5lcmRzICAgICAgQ29uZyAgV2hhdCAgeW91ciBndWVzcyBjdXJyZW50IFRvdGFsbHkgcmFuZG9tIE1vZGkgd2l0aCAgICAgYWJsZSAgZGVsaXZlciAgIHlvdXRoIE51bWJlcnMgRXNzYXkgdGFsa3MgIGZhaWx1cmVzICBwb2xpdGljaWFucyBwcm9taXNpbmcgIG11Y2ggcGVvcGxlIGV4cGVjdGluZyAgbXVjaCBmcm9tIGdvdnQgd2hpbGUgcGVvcGxlIGhhdGluZyBnb25lIHdyb25nIHdpdGggICAgZmFudGFzdGljIGVzc2F5ICBBcHBsaWVzICBJbmRpYSBiaWdnZXN0IGRlbW9jcmFjeSAgICB0aGlzIGNoYXJ0IHNob3dzICBzY2hlZHVsZSBxdWl0ZSBNYXJrIGVsZWN0aW9uIEZ1bm55ICBtYW55IGZvdW5kZXJzICBOUkVHQSB3aWxsIGxvc2UgdGhlaXIgIGVtcGxveW1lbnQgdGhhdCBUaG9zZSAgZGVjcnkgIEluZGlhbiBzeXN0ZW0gIGNhbGwgICAgICBub3RlICBoYXJkIHdvcmsgICBwdXRzICAgICBwb2xscyAgcHJvdGVjdCByZW1lbWJlciAgd2hhdCBoYXBwZW5zIHJlc3VsdHMgIGNoYW5naW5nIG92ZXIgICAgbGlrZXMgIHB1YmxpYyAgICBzb2NobyBxdWFydGVyICAgYmFzZSBnb25lICAgQ29uZyAgY2hhcnQgc3VydmV5cyAgZnVsbCAgIHRoZXkgIGludGVyZXN0aW5nICBjb21wYXJlIG92ZXIgICAgcmVhbCBEb25lIHNpbmNlIGFub3RoZXIgIHBvbGl0aWNhbCBtb29kIHN1cnZleSAgICBXaWxsIHBvc3QgcmVzdWx0cyBBbG1vc3QgIHN0YWJsZSBnb3Zlcm5tZW50ICBiZXR0ZXIgdGhhbiAga2ljaGRpIGtub3cgdGhhdCBmZWVsaW5nICBndWlsdCB3aGVuIGdvb2QgdGhpbmdzICAgZmVhciB0aGF0IHNvbWV0aGluZyB3aWxsICBEdW5ubyBTdGF0ZXMgVHJhaWxlciBBbmFseXNpcyBDaGVtaXN0cnkgV2lucyB0aG9zZSAgZGV0b3ggIHRyeWluZyAgZnJvbSB0aGlzIGNvbXBhbnkgdmlld3MgIHByb21vICAgVGhhbmtzICBjYXNlICBoYXZlIGJlZW4gIFNpYmVyaWEgICBzZWVuIERvaW5nICAgb25seSBkcmluayBib3R0bGVzICBqdWljZSAgIFN0aWxsIGtpbmRhIGZlZWxzIGdvb2QgVGhhbmsgVGhhbmsgVGhhbmsgICAgaW5zcGlyZSBIb3BlICAgICBzYW1lICBHb29kIE5EVFYgIE5pZGhpIHNob3cgIGRpc2N1c3MgICAgcmVmcmVzaGluZyAgU3RhdGVzIGZpbmFsbHkgIHdhaXQgIERlbGlnaHRlZCAgc2hhcmUgd2l0aCAgIFN0YXRlcyBob3VyICBWZXJ5IHNwZWNpYWwgICAgIFRoYW5rcyAgbWFraW5nICAgaGFwcGVuICBNZWFuIFN0YXRlcyBwcm9tbyAgIGhlcmUgICBmdWxsIGZhbWlseSB0b3RhbCBzb2NpYWwgbWVkaWEgYmFzZWQgIENvbmdyZXNzIGNvdWxkICAgY291bGQgV2lsbCAgdG90YWxseSBhd2Vzb21lICAgQ29uZ3Jlc3MgcGFydHkgYm91Z2h0ICB3aWxsIHRyZW5kIFR3aXR0ZXIgICAgc2NhbSAgIGNyb3JlICAgdW5kZXJlc3RpbWF0ZSAgcG93ZXIgICBjb21tb24gRmFjZWJvb2sgYm91Z2h0ICB0aGluayBTaGluZGUgd2lsbCAgIEZhY2Vib29rICBvcmRlciBhbmFseXplIGZpbG1zICAgIHJlYWN0ICBmYWtlIHRoaW5ncyAgIGxvdmUgcmVsaWdpb24gc29tZSBGYWNlYm9vayAgd2hpY2ggIGhhdmUgY2xhcmlmaWVkIGJlZm9yZSAgZmFrZSAgcmVhY3RlZCAgIHVuYmVjb21pbmcgYWlzZSBFdmVyeW9uZSBuZWVkcyBtb3RpdmF0aW9uICAgRXZlbiAgbW90aXZhdGlvbmFsIFRob3NlICAgcHVsbCB0aGVtc2VsdmVzICB3aGVuIGZpbmFsbHkgbWFrZSBMb3ZlbHkgZm9vZCAgICAgdGhlcmUgdGhpcyB3ZWVrICAgc2VudCAgICAgICBjb29sIGNoYW1waW9uICBnb25uYSBoZWFyICAgIHBpY2sgIHRoaXMgc29uZyB3b3JrcyAgUHJlZmVyIHRoaXMgdGhhbmsgd2FpdCAgRmlyc3QgIGZpcnN0IHNob3cgd29yZSBwZWFjb2NrICAgc2lsdmVyIGJhbmdsZXMgRXhjbHVzaXZlIHN0aWxsICAgbGVhZCBwYWlyIGZyb20gU3RhdGVzIHByb21vICBjb21lICAgd2lsbCBzaGFyZSAgZXhjbHVzaXZlIHN0aWxsIGZyb20gIG1vdmllIHdpdGggU29tZW9uZSAgaW5jaXRpbmcgIGNvbW11bml0eSB3aXRoIG9ibm94aW91cyBiYXNlbGVzcyBoYXRlIHR3ZWV0cyBhYm91dCAgd29uZGVyICAgIGxlZ2FsIHNoYWluYSAgaW52aXRlZCAgICBwb2xpdGljYWwgICByZWFkICB0d2VldHMgdGhhdCBHb29nbGUgIGNvbHVtbnMgYWdhaW5zdCBwcm9oaWJpdGlvbiAgIHJvdWdoIGVkZ2VzIGhhcmQgICB0aGV5ICBtb3JlICBudW1iZXIgIHRydWUgYWNrbm93bGVkZ2luZyAgIGxvc3QgIHNlY3Rpb24gIHN1cHBvcnQgICBzb21lIG1heWJlICAgd2hhdCB0aGV5ICByZWxldmFudCAgYmVpbmcgbmV1dHJhbCBuZXZlciBwb2ludGluZyAgIG1pc3Rha2UgIG90aGVycyAgZG9pbmcgU2VuaW9yIENvbmcgbGVhZGVycyBzYWlkIHRoZXkgICByZXNwZWN0IGNvdXJ0IGV2ZW4gIFJhaml2IEdhbmRoaSAgIGRpZmZpY3VsdCAgICBzYW1lIGJlaW5nIGFibGUgIHRha2UgaGF2aW5nICBibGFjayAgd2hpdGUgdmlldyAgIHdvcmxkICBncmV5ICBpbW1hdHVyaXR5IHBvbGl0aWNhbCBDcml0aWNpemVkICBwYXJ0aWVzICBDYWxsZWQgIENvbmcgIGxpdHRsZSBDYWxsZWQgIEZsb29kZWQgd2l0aCAgUG9pbnQgV2hhdGV2ZXIgeW91ciB2aWV3cyAgICBtdXN0ICAgc2hvdWxkICBiYWNrIHZpZXcgIGtlZXBpbmcgcG9saXRpY2lhbnMgQm90aCAgcGVyZm9ybWVkIGFtYXppbmdseSAgbHVja3kgIGhhdmUgIENvbmdyYXRzIEdvb2QgTW9ybmluZyAgY29sdW1uIFRoYW5rcyAgb3ZlcndoZWxtaW5nIGZlZWRiYWNrICAgU3RhdGVzIGZpcnN0IFRoaXMgIGp1c3QgIEF3ZXNvbWVuZXNzIHNoYWxsIG9ubHkgVHdlZXQgdXNpbmcgICAgcHJvZHVjdGlvbiBob3VzZXMgYmVoaW5kIHdpbm5lcnMgIHNpZ25lZCBEZWFyIFR3aXR0ZXIgZGVsaWdodGVkICBzaGFyZSB3aXRoICAgZmlyc3QgbG9vayBXaWxsICBoYXZlIHNvbWV0aGluZyAgc2hhcmUgd2l0aCAgIG5vb24gIGhvcGUgRmluZ2VycyBpbW1pZ3JhdGlvbiBzdGFmZiBzdGFtcCBwYXNzcG9ydHMgIFRoZW4gIGNoZWNrcyAgdGhvc2UgcGFzc3BvcnRzICAgdXNlbGVzcyBCb3R0bGVuZWNrIHdvdWxkIGNvbnNpZGVyICAgbWFqb3Igc3RlcCAgcHJvZ3Jlc3MgICAgICAgdGhvc2UgYW5ub3lpbmcgcmVkdW5kYW50IGNhYmluIGJhZ2dhZ2UgIGxvdmUgQW1hemluZyAgYWlycG9ydCAgSW1taWdyYXRpb24gc3RhZmYgVGhleSB3ZXJlIHNheWluZyBub2JvZHkgbGlzdGVucyAgICBIb3BlIFNlZWluZyAgICBvdmVyICBJbnN0ZWFkICBjbGV2ZXIgYmFubmVycyB3b3VsZCAgdGltZXMgbW9yZSBlZmZlY3RpdmUgIHRoZXkganVzdCBXaGF0IGRvZXMgICBhYm91dCBjaXRpemVucyAgIGNvdW50cnkgd2hlcmUgc2V0dGluZyBmcmVlIHRlcnJvcmlzdHMgIGtpbGxlZCAgICBzZWVuICAgcG9saXRpY2FsIEJlZm9yZSBHdW5kYXkgcGVwcGVyIHNwcmF5ICBrbml2ZXMgIEJlZm9yZSBTdGF0ZXMgbW92aWUgZmlyc3QgbG9vayBiaWxsICB0dXJuIHR3ZWV0IG1heWJlIHRoZXkgd2lsbCByZWxlYXNlICBsb29rICAgY29udGVzdCBCZWVuIHBsYXlpbmcgd2l0aCAgIGZsZXggd2l0aCAgZmVhdHVyZSAgICB0aGlzIGV4Y2l0ZWQgYWJvdXQgIFN0YXRlcyBNb3ZpZSBQcm9tbyBXaWxsIHNoYXJlIGRldGFpbHMgIHNvb24gRmFjZWJvb2sgcG9saXRpY2FsIG1vb2Qgc3VydmV5ICAgcmlzZXMgIGZhbGxzIENvbmcgV2hhdCAgZWFydGggICBzdHVwaWQgdHdlZXRzIGxpa2UgIHByZXZpb3VzICAgcmV0d2VldGVkIEhhdmUgdGhlc2UgIHRyb2xscyBsb3N0IHNsYW5kZXJpbmcgbGlrZSBlYWNoICBldmVyeSBhY3Rpb24gIHdoYXQgICAgICAgICBibGluZCBoYXZlIG5vdGhpbmcgYWdhaW5zdCAgcG9saXRpY2FsICAgc3VwcG9ydCAgR3Vlc3MgdGhhdCAgIGhhcmQgIGNvbmNlcHQgIHNvbWUgR2xhZCAgICBjaGFuY2UgIHdhdGNoIFdpbGwgcGFzcyAgeW91ciBjb21tZW50cyAgIGNvbnRlbnQgQXBwcmVjaWF0ZSB5b3VyIGxpdHRsZSAgIGxlYXJudCAgIG9ubHkgbmVlZCBob25lc3QgIGFsc28gV2hlbiAgZ29vZCB0aGluZ3MgICAgd2l0aCAgb3Bwb3NpdGlvbiAgICBwdXNoaW5nIHRoYXQgIHRoaW5nIHRoYXQgIGtub3cgVXBvbiBmcmllbmQgc3RpbXVsYXRpbmcgZG9uZSAgIENvbmcgICByZWFkIG11Y2ggaW50byBjb3VudHJ5IExveWFsdHkgIHdoZW4gIGRlc2VydmVzIE1hcmsgVHdhaW4gd2VsbCB0aGlzICAgb2J2aW91c2x5ICB0aGluayAgY291bnNlbCBiZWluZyBmcm9tICAgIHJlYWxseSBsaWtlZCB0aGlzIFNvbWUgICAgIGhhdmUgIGdyb3VuZCBwb2xpdGljYWwgZXhwZXJpZW5jZSAgYmVjYXVzZSAgICAgICAgbG9vayAgdGhpbmdzIG1vcmUgb3RoZXIgcGVyc29uICBpZ25vcmVkICBhZHZpY2UgIE5pdGlzaCAgIGJyZWFrIExvb2sgd2hhdCBoYXBwZW5lZCBIb3BlICAgIGRlY2xpbmUgIHRoZWlyIHByb2plY3RlZCBzZWF0cyAgIGJsYW1lIG90aGVycyAgICB0aGV5ICBpZ25vcmUgdW5hdXRob3JpemVkIHJhbmRvbSBzZW5hcyAgdmFyaW91cyBwbGVhc2UgdGFrZSAgZWFzeSAgd2lsbCAgIGdpcmxmcmllbmQgIEhhcHB5IFdoZW4gd29yayB0aGV5ICBhY2N1c2VkICBoYW1wZXJpbmcgV2hlbiB0aGV5IHRoZXkgIGFjY3VzZWQgIFdoYXQgIHBlb3BsZSBrZWVwIHJld2FyZGluZyBsYXdicmVha2VycyB3aXRoICBtYXR0ZXIgIG5vYmxlIHRoZWlyICAgaGFybWluZyAgbmF0aW9uICAgY2l2aWxpemVkIHBhcnQgICBQZXBwZXIgU3ByYXkgd2lsbCB3YW50ICAgICAgY29uc3RpdHVlbmN5ICAgbG9vayAgZm91Z2h0ICAgIHBlb3BsZSBtaWdodCB2b3RlIHByZXR0eSBjbGVhciAgICAgICAgYWJvdXQgZG9pbmcgc29tZSBvdGhlciB3b3JrIHBlb3BsZSAgYWdyZWUgV291bGQgIHRvdGFsbHkgYXdlc29tZSAgbGFzZXIgICBhbGxvd2VkICAgd291bGQgIGV2ZXJ5IFBlcHBlciBzcHJheXMgIGtuaXZlcyAgICAgICBoYXZlIGdvbmUgaG9ycmlibHkgUGVvcGxlICAgICBqb2luIHBvbGl0aWNzICAgbGlrZSBvYnNlcnZpbmcgICB3YXRjaGluZyBkb2luZyBwb3JuIHRvdGFsbHkgZGlmZmVyZW50IEhvcGUgIHByZXZpb3VzICBhcnRpY2xlcyBtYWtlICBhbXBseSBjbGVhciAgc3RhbmNlIGFnYWluc3QgY3JvbnkgY2FwaXRhbGlzbSAgdGhhdCAgIHdyaXRlIGFib3V0IGFydGljbGUgIGRvbmUgIHdoaWxlIGJhY2sgIHdvcnRoICB3aXRoIGFydGljbGUgIGNyb255IGRvbmUgIHdoaWxlIGJhY2sgIHdvcnRoICAgR3JlYXQgSW5kaWFuIFNvY2lhbCBOZXR3b3JrIHdoYXRldmVyIHNvbWUgIGhlcmUgIHN1Z2dlc3RlZCB0ZWFtICAgZXBpc29kZSAgR2xhZCB0aGV5IEFpcnMgdGhpcyBUaGVyZSAgIHRlbXBvcmFyeSBldXBob3JpYSBhYm91dCBiZWluZyBwYXJ0ICAgTWFrZXMgIGZlZWwgUmVhbGl0eSBOYXN0eSBIYW5nb3ZlciBDcm9ueSBjYXBpdGFsaXNtICBPbmx5ICAgICAgIGVsZWN0ICBnb29kICAgbWFrZSAgZWNvbm9teSBncm93ICAgIFN0aWxsIGRpZmZlcmVuY2UgYmV0d2VlbiBqdXN0IGJlaW5nICBob25lc3QgICBiZWluZyAgaG9uZXN0ICB3aXRoICBwb2xpdGljYWwgaW5jZW50aXZlICB0YXJuaXNoIFN1Y2ggYW50aWNzIHdpbGwga2lsbCAgWW91bmcgSW5kaWEgd2lsbCAgICAgVGhhdCBkcml2ZXMgIE5vdGhpbmcgYWJvdXQgICBhYm91dCAgbWVzc2FnZSBiZWluZyBzZW50ICBwcml2YXRlIFN0YXRlICBidWxseSBzbGFuZGVyICB3aXRob3V0IHByb2Nlc3MgV2hlbiAgIHJlYWxpemVzIHdoYXQgdGhleSBoYXZlIGRvbmUgIHRoZXkgd2lsbCBjb21lICB0aGVpciBVbnRpbCBlbmpveSAgIGNhcmVzIGFib3V0IERlYXIgSW5kaWFuICAgaW52ZXN0ICAgcmVndWxhdGVkIGJ1c2luZXNzIGRhcmUgIHNob3cgICBzaGFsbCAgZGVlbWVkIGNvcnJ1cHQgICBwZXJmZWN0IEV2ZXJ5dGhpbmcgYWJvdXQgIGRlbGliZXJhdGVseSBrZXB0IHVuZGVyIHdyYXBzICBsb25nIHRpbWUgQXdlc29tZW5lc3MgZXJ1cHRzICBmb2xsb3cgcGxlYXNlIGZvbGxvdyAgb2ZmaWNpYWwgaGFuZGxlICAgICBoZWFyIHNvbWV0aGluZyBmcm9tIHRoZW0gYW55dGltZSBDcml0aWNpemVkICBtYW55ICBwb2xpdGljaWFucyAgRnJhbmtseSBub25lICB0aGVpciBzdXBwb3J0ZXJzIGF0dGFja2VkICAgbXVjaCAgIHNsaWdodGVzdCBjcml0aWNpc20gdGhpbmsgIGNsZWFyIHNpZ24gIGN1bHQgIHdoZW4gIGdyb3VwIGNsYWltcyB0aGV5ICBhbHdheXMgcmlnaHQgIGV2ZXJ5b25lIGVsc2UgIG1pc2d1aWRlZCByZWFkICBhYm91dCAgZ3V5cyAgdmlldyBhYm91dCBhcnRpZmljaWFsbHkgY3JlYXRlZCBNb2RpIGN1bHQgbW92ZW1lbnQgICBiZWdpbiB3aXRoICBzb2xlbHkgYmVsb25nICAgIHdpdGggdHVybmluZyBpbnRvICAgdGhpcyBjaGVja2xpc3QgIHdoYXQgbWFrZXMgIHRoZW4gYmVlbiBidXN5IHdpdGggICBmZWVkYmFjayAgQWxzbyB3aXRoICBibGVzc2luZ3MgIEZpbG1mYXJlICBLYWlwb2NoZSB0aG9zZSAgbWlzc2VkIHJlcGVhdHMgIHRvbW8gICBtaXNzIG5leHQgQnJhbmQgVGhhbmtzICBmZWVkYmFjayAgICAgdGVsbCBub3RoaW5nICBjb21tZW50cyAgQ29tbWVudHMgIGdvb2Z5IG1vcmUgcmVsYXhlZCAgcmVjb3JkaW5nIGVwaXNvZGUgIEd1ZXNzIGdldHRpbmcgaGFuZyAgQWlycyB0b25pZ2h0IHJlcGVhdHMgdG9tbyBzdG9yeSBUb25pZ2h0IGNvdmVycyBjb250cm92ZXJzaWFsICAgYW5jaG9yIFNjcmlwdCB3aXRoICBoZWFkbGluZXMgdG9kYXkgd2l0aCBhZG1pdCB0aGF0ICAgYWRkaWN0ZWQgT3Bwb3NpdGlvbiAgZ29vZCAgIHNlZW0gICAgaXRlbSBzb25nIHRoZXNlIGRheXMgIHlvdXR1YmUgd2l0aG91dCBzZWVpbmcganVzdCAgIHNvbWVvbmUgICAgY3JhdGUgICBidWxscyBiZWZvcmUgbWFraW5nIHRoZWlyIHNwZWVjaCB5b3VyIG9wZW4gIGN1dGxlcnkgdGFrZSAgIHNwb29ucyAgZ2l2ZSB0aGVtICAgUmFodWwgZmVlbHMgcmlnaHQgR29vZCBzcGVlY2ggIEdvb2QgYWN0aW9ucyB3b3VsZCAgbmljZSB3aGF0ZXZlciAgc2hhc2hpICB3b3JrZWQgaGFyZCAgIGdvb2Qgd29yayAgdGhhdCByZXN0ICBmbHVmZiBwcmV2aW91cyByZXR3ZWV0IHNob3dzIGV4YWN0bHkgIGtpbmQgIGFycm9nYW50IENvbmcgc3RhdGVtZW50cyB0aGF0IGhlbHAgR3Vlc3MgcGVvcGxlICBnb2luZyAgaGF2ZSAgIGxhdWdocyAgICAganVkZ2Ugd29yayAgIGRvbWVzdGljIGRpc3R1cmJhbmNlICBNb3ZlIGd1eXMgICBrbm93ICB0aGluZ3MgIG1vcmUgIHRoYW4gIHR3aXR0ZXIgc2NhbmRhbCAgZmFjdCAgIHdob2xlIGRyYW1hICAgcG9saXRpY2FsIG1lcmVseSBnaXZpbmcgIGV4YW1wbGUgIGFub3RoZXIgYW55d2F5IGdvb2QgIGtub3cgIHdhcnMgcGxlYXNlIG9ubHkgZ2l2ZSAgeW91ciBDb21lICAgaW50ZW50aW9uICBkZWNsYXJpbmcgICAgIGdvdmVybm1lbnQgIG1hZGUgIGNsZWFyIHVucHJlcGFyZWQgcGFydHkgY29tZXMgICBkZWNsYXJlcyAgICBXaGF0IHdpbGwgcGFydHkgc3ltcGF0aGl6ZXJzIFRoZXkgIGdpdmUgdGhlbSBLaG9icmFnYWRlICBvdXRyYWdlICBBZnJpY2FuIHdvbWVuIHJhY2lhbGx5IGFidXNlZCBjYXZpdHkgc2VhcmNoZWQgIERlbGhpIGNhbm5vdCBsb3NlICBiYXR0bGUgIGNob29zZSAgIFNlYXNvbmVkIHBvbGl0aWNpYW5zIGtub3cgTmV3YmllcyBHb29kIG9wdHMgICAgIHRvdGFsbHkgICAgbGFkb28gIGhhcHBlbmluZyAgTWFubW9oYW4gd2hhdCAgdHdlZXQgZHVyaW5nIE1hemEgIGNoYWxhIHdhcnkgIGJyaW5naW5nIGRvd24gICB0aGV5ICBnb29kICAgY3VzdG9kaWFucyAgIGltcG9ydGFudCBzdWRkZW4gIG1hbnkgTW9kaSBmYW5zIGhlbHBlZCAgIERlbGhpIFNvb24gIHR1cm5lZCBhZ2FpbnN0IEd1ZXNzICB0aGV5IGhhaGEgICBsYWR5IHNwb2tlc3BlcnNvbnMgIHBhcnRpZXMgICBkZWJhdGVzIG9mdGVuIGRvbnQgaGVscCBicmVha2luZyBldmVyeXRoaW5nICAgICBjaGlja2VuICBoYXRjaGluZyAgICBzbWFzaGluZyAgQXJub2xkIEdsYXNvdyBTdHVubmluZyBwb2xsIG1vdmUgICAgc3VwcG9ydCBiYXNlIHNlZW1zIG1pc3Rha2VzIFJlY29uc2lkZXIgRWFybGllciAgcG9sbCAgIENvbmcgICBDb25nIFNpZ25pZmljYW50IHN3aW5nIE5ld3MgcG9sbCAgIENvbmcgICAgbWVyZWx5IHJlc3VsdHMgIGRpZmZlcmVudCBnaXZlbiBXaWxsIHBvc3QgdHJlbmRzIFNsb3cgSGFzdGUgbWFrZXMgIHBhc3QgeW91ciB2aWN0b3J5IFVuZGVycHJvbWlzZSAgU2F5aW5nIHNpbmNlIE1lcmkgc3VudGEga2F1biBKdXN0IGRpc2NvdmVyZWQgICAgIGNoYXBhdGkgaW5zdGVhZCAgIGZpbmdlciAgdG91Y2ggR2VuaXVzICBzdHJpa2UgZ29vZCAgIFNhbG1hbiBLaGFuIHRyeWluZyAgaGFuZCAgZmx5aW5nICBmbGV3ICBraXRlcyB3ZWxsIHBvbGxzICAgcmVwcmVzZW50YXRpdmUgIGVudGlyZSAgICBzaXphYmxlICB2b2NhbCBzZWdtZW50IHdvcnRoIHRyYWNraW5nIHRyeWluZyAgZ3JvdyAga2VlcCAgIGJhY2sgc3dpdGNoZXJzICAgc29tZXRoaW5nIHJlbWFya2FibGUgSW50ZXJlc3RpbmcgdGhhdCBDb25nIHZvdGVzICAgaGF2ZSBtb3ZlZCAgICBnaXZlbiBoaWdoZXIgIGFic29sdXRlIGxvc3Mgc2lnbmlmaWNhbnQgICAgdGhvc2UgaGF2ZSBjb21lIGZyb20gZG93biBmcm9tIGZyb20gIGZyb20gcG9sbCBUb3RhbCAgIENvbmcgUHJldiAgIENvbmcgbXVjaCB5b3VuZyAgZG9udCB0aGluayB0aGVyZXMgICBiaWFzICAgIGJpYXMgIHN1cmUgc3Rha2Vob2xkZXJzICBwcm9ncmVzcyBtdXN0ICBrZXB0IGp1c3QgeW91ciByZWZsZWN0aW5nIHRoaXMgIGdvb2QgIGNyb3dkIGNsYXBzIE1hbnkgc3Rha2Vob2xkZXJzIGludm9sdmVkICBtYWtpbmcgIHByb2dyZXNzaXZlIG5hdGlvbiBnb3Z0cyAgbW9zdCAgcGFydGllcyBvbmx5IGZvY3VzICB2b3RlcnMgUmFodWwgIEFwcHJlY2lhdGUgIE1heWJlIGFscmVhZHkgbW9zdCBzaGFyZWQgY29sdW1ucyAgdGhvc2UgIGZpcnN0IHNhdmUgIG5hdGlvbiAgICAgY29tZSAgdGhpbmsgYWxsaWFuY2UgICBncm91cCAgbmFtbyAgIHdvdWxkICBuaWNlIGhlYXJkICBoZXJlICBpbnZvbHZpbmcgc21hcnQgc2VhdCAgc3dlZXAgc2VhdHMgd2l0aCAgQ29uZyBwb2xscyBzaG93ZWQgICB0YWtlbiAgICAgQ29uZyBzdXBwb3J0ZXJzIEVhcmx5ICBwb2xsICAgIENvbmcgUG9sbCBSdW5uaW5nICBpbmFjY3VyYXRlICBzdGlsbCAgIHRlc3QgcG9sbCAgICAgdXNpbmcgcG9zdHMgSW5kaWEgIHBvbGl0aWNhbCBwYXJ0eSBTaW1wbGUgcHJpbmNpcGxlIHdoZW4gIGNvbWVzICAgcG9saXRpY2FsIHdyaXRpbmcgdGhpbmsgQWxvayBOYXRoICAgc2hvdWxkICBmaXJzdCBSYWh1bCBiaGFpeWEgaGVscGVkICBwYXNzIHRoZXNlIExva3BhbCB3aGVyZSBMaWtlICBoYXRlcyBoYXRlcyB0YWxsIGVhY2ggd2VyZSByaWdodCB0aGluZ3MgaGF2ZSByZXBlYXRzICAgICB0aGluZyAgaGVhciAgIHF1aXRlIGFub3RoZXIgIHdhdGNoIFRoYW5rcyAgIG92ZXJ3aGVsbWluZyBwb3NpdGl2ZSBmZWVkYmFjayAgIHdpbGwgY29udGludWUgIG1ha2UgIHNob3cgZXZlbiBSZXBlYXRzIHRvZGF5IGZpcnN0IGVwaXNvZGUgICBldmVuIGFpcmVkICAgYWxyZWFkeSBnZXR0aW5nIE11c3QgIGRvaW5nIHNvbWV0aGluZyB0aGFuayAgIGRpZmYgbGVhZ3VlIHRob3NlICBSYWNlIENvdXJzZSAgICBzaG93IGRyYW1hdGl6ZXMgbGlmZSBqb3VybmV5cyAgIHdpdGggIGludGVuZGVkIHNob3cgc3RhcnRzIHRvbmlnaHQgICBGaXJzdCBlcGlzb2RlICAgZG9jdWRyYW1hIHNlcmllcyAgdmFyaW91cyAgY2FuZGlkYXRlcyB0aGlzIHNhaGliIHRoaW5nIGZlZWQgICBqdXN0IGZhY2Ugd2hhdCAgbmV2ZXIgZmVlZCBHdWVzcyAgc2hhcmVkICBzaW1wbGUgZ2hhciAgZGFiYmEgbHVuY2ggd2l0aCBNb3JlICAgc2hvdyB0aGF0IGFpcnMgTGFzdCAgd2l0aCBRdWl0ZSAgYmVzdCBkZWJhdGUgbWlzcyB3YXRjaGluZyB0aGFua3Mgc2hla2hhciAgZXZlcnkgIGxvdmVkICBzaG93ICBodWdnZ2dlIHByZXNzdXJlIEZpcnN0IGVwaXNvZGUgIHdpbGwgIHRvbW8gICAga2lja3Mgc2hvdyAgIGhvc3RpbmcgIFN0YXJ0cyBldmVyeSAgIHByb2ZpbGVzIGV4Y2l0ZWQgIHNoYXJlIHdpdGggICBzaG93ICBhaXJzIHRvbW8gICBQcm9tbyBDb25ncmVzcyBwdXNoaW5nIFJhaHVsIEdhbmRoaSAgIGFsb25nc2lkZSBNb2RpICBLZWpyaXdhbCAgbGlrZSByZWxlYXNpbmcgTG92ZSBTdG9yeSAgc2FtZSAgICBDaGVubmFpIFN0b3AgY3JpdGljaXNpbmcgbGVhcm4gZnJvbSB0aGVpciAgICB3aGVuICBzYWlkIHNhbWUgdGhleSBkaWRudCBsaXN0ZW4ganVzdCB0aG90IHdpbGwgIHNvbWV0aGluZyAgZWxlY3Rpb24ganVzdCBwcm9maWxpbmcgZm91bmQgV29sZiAgV2FsbCBTdHJlZXQgR3Vlc3MgbW92aWUgZ2V0dGluZyBleHRyZW1lICBndWVzcyAgIGF0dHJhY3RlZCAgIGNyYXp5IGRvaW5nICAgdGhpcyB0aW1lIGZhY2luZyAgICAgbmVlZCB5b3VyIHRlYXNlciBFeGFjdGx5IGRheXMgICAgIFJlbGVhc2VzIG51bWJlciAgU2NyZWVuIEF3YXJkIG5vbWluYXRpb25zICAgICAgZmlsbSAgQ29uZ3JhdHMgdGVhbSBoZWxwICBwb2xpdGljYWwgcGFydGllcyBkZWNpZGUgIHNob3VsZCAgICB5b3VyIHZpZXcgICAgIGhhc2h0YWcgQm90aCAgQ29uZ3Jlc3MgICAgbmVlZCAgZmlyZSBzb21lIHBlb3BsZSAgIGZyZXNoIGZhY2VzICAgTG9va2luZyBtb3JlIGphZGVkIGV2ZXJ5IFllZGR5IGJhY2sgIFdoYXQgd2VyZSB0aGV5IFBlb3BsZSB3aWxsICAgbGlrZSBTdGV2ZSBKb2JzIGJlaW5nIGJyb3VnaHQgYmFjayBoYXZlICAgRGVsaGkgY29sbGVnZXMgb3BlbiBicmFuY2hlcyAgb3RoZXIgbGlrZSAgIGZpbmRpbmcgbWFueSAgdGhlaXIgcG9saWNpZXMgIGNsZWFybHkgdGhvdWdodCBXaWxsaW5nICBnaXZlIHRoZW0gdGltZSAgaG9wZSB0aGlzIGNoYW5nZXMgRGVsaGlpdGUgcmVzZXJ2YXRpb24gIERlbGhpICB3aGljaCAgbmF0aW9uYWwgRG9lcyAgaGVscCAgIGRpc2N1c3MgcHJvcGVybHkgRHlpbmcgICB3b2xmICB3YWxsIHByZXYgdHdlZXQgIHByb2JhYmx5ICB3b25kZXJpbmcgICAgY2VsZWJyYXRpbmcgZGl3YWxpICBNdWNoIHN0aWxsICBwcmV0dHkgYmVhdXRpZnVsICBUaGlzICAgSW5kaWEgbG9va3MgbGlrZSBmcm9tIG91dGVyIHNwYWNlICBEaXdhbGkgbGlrZSBtYXliZSB0aW1lcyAgcGFzdCBzaGFyaW5nIHNlZW1zICAgIHRoaW5nIHRoZXNlIG5lZWRzICByZWFsaXplICBpbXBvcnRhbmNlICBJbmRpYSAgIGVtYmFyYXNzICBVbmRlcnByb21pc2UgIEFsd2F5cyB3b3JrcyBvYnZpb3VzbHkgIGFib3V0ICBjb3VwbGUgIGV4dHJhIHJvb21zICBhYm91dCBiYXNoaW5nIG90aGVycyAgaW1wb3NzaWJsZSBzdGFuZGFyZHMgIGxpdmUgS2VlcCAgcHJlc3N1cmUgICBwb2xpdGljYWwgcGFydGllcyAgcGVyZm9ybSAgIGFjY291bnRhYmxlICB0aGVpciBVc3VhbGx5IHBlb3BsZSAgICBjb3JydXB0IGtlZXAgc2NyZWFtaW5nIHRoZXkgc3RpbGwgbGlrZSAgIHdoZW4gICBsYXN0IHRpbWUgdGhleSBjcml0aWNpemVkIEN1cmlvdXMgIHVuZGVyc3RhbmQgd2hhdCBtYWtlcyAgIGVjb25vbWlzdCBtaW5kICBSYWh1bCBHYW5kaGkgICAgICBOYXJlbmRyYSBNb2RpIFdpbGwgIGRpc2FzdHJvdXMgIGhhdmUgTW9kaSAgc2F5cyBNYW5tb2hhbiAgc29tZW9uZSAgICAgIGZpcmV3b3JrcyBXaXNoeSB3YXNoeSAgQXNzdW1pbmcgcGVvcGxlICBDb25ncmVzcyBkaW5vc2F1cnMgd2lsbCBuZXZlciBsZWFybiBrbm93IHRoYXQgcG9zdCB2YWNhdGlvbiBzZXBhcmF0ZSAgbG92ZXMgIHNvbmcgIEthdGUgcGVyZmVjdCBtb29kIHRoaW5rICBjb3VsZCBzaWduYWwgIGh1Z2UgY2hhbmdlICB0b3RhbGx5IGdyYWIgaGVhZGxpbmVzICAgcHJlc3Njb24gdG9kYXkgICBzaW1wbHkgd2VhcnMgIHJhaW5ib3cgY29sb3JlZCBXb3VsZCAgYXdlc29tZSAgICBsYXN0IHByZXNzY29uICAgYmFuZ3MgIHRhYmxlICBzY3JlYW1zIGNodXAgIHB1Y2hvICBwb29jaG5hIE1hbm1vaGFuIFNpbmdoICBmYWNlIG1lZGlhICBtZWRpYSBpbnRlcmFjdGlvbiAgeWVhcnMgIHN0cmVzc2Z1bCBsaWtlIGF0dGVtcHQgd29ya2VkICAgbGF0ZSBuaWdodCAgZmFjaW5nIGNhbWVyYSAgIHdpbGwgc2hhcmUgICBjb3VwbGUgdHJ5aW5nICAgICBzY2hlZHVsZSBoYXBweSB3b25kZXIgd2hhdCByZWFjdGlvbiB3b3VsZCBoYXZlIGJlZW4gICAgTWFtdGEgICBNYXlhd2F0aSAgIHdvdWxkIGhhdmUgcmVkdWNlZCBlbGVjIHRhcmlmZnMgdXNpbmcgc3RhdGUga25vdyAgICB1bmNyaXRpY2l6YWJsZSBwYXJ0eSAgY3V0dGluZyB0YXJpZmZzIGJlZm9yZSAgYXVkaXQgIGxpa2UgZ2l2aW5nICBzdHVkZW50ICAgYmVmb3JlIGNoZWNraW5nIHRha2UgIHN0YW5kICAgICAgc3VwcG9ydGluZyAgICBzdXBwb3J0aW5nICAgbm90aGluZyAgIHN1cHBvcnQgaG9wZSAgd2lsbCBhZGRyZXNzIHRoZXNlIGNvbmNlcm5zIGdvdnQgc3RhcnRzIGhhcmFzc2luZyAgY29tcGFuaWVzICAgd2lsbCBraWxsIGludmVzdG1lbnQgIHJlZ3VsYXRlZCAgZ29vZCAgIG1vcmUgd2VyZSB0YXJpZmZzIGRyb3BwZWQgYmVmb3JlICBhdWRpdCByZXZlYWxlZCBleHRlbnQgICAgICAgICBidWxsaWVkICBwcmVzdW1lZCBndWlsdHkgY29udHJvbHMgc3RhdGUgbW9uZXkgIGFsc28gZGVzaXJlcyAgZ3JvdyBmYXN0ICB0aGV5IHNwZW5kIHN0YXRlIG1vbmV5IHNob3VsZCBpZ25vcmluZyBuYXRpb25hbCBpbnRlcmVzdCAgZnVydGhlciBwb2xpdGljYWwgYmFzZSAgICBhbHNvICBmb3JtIGdvdmVybm1lbnQgbXVzdCB0YWtlIGNhcmUgIGJhbGFuY2luZyAgZWNvbm9teSAgU25hcGRlYWxzICAgZXF1YWwgZ29vZCB0aGVyZSAgIHRyb2xscyAgIHNsaWdodCBjcml0aWNpc20gICBzdWRkZW5seSBiZWNvbWUgaWdub3JhbnQgdHdpdHRlciBmdXJ0aGVyICBoYXBweSBoYXBweSAgeWVhciAgICBsaXN0ZW4gICAgICBmaW5kIHlvdXJzZWxmIGNsb3NlciAgeW91ciBnb2FscyBEdWRlICAgeWVhciBTd2l0Y2ggIGZyb20gcG9saXRpY3MgICBnZXR0aW5nICB5ZWFyIHNjYWxlZCAgbmF0aW9uYWwgICB3b3VsZCBoYXZlIGJlZW4gIHN1YnNpZHkgICAgIG1vdmUgcG93ZXIgY29zdHMgIHN1YnNpZHkgICAgSGhvbGRzICAgICBkZWxoaSBhYmxlICB1bmRlcnN0YW5kIG51bWJlcnMgICBEZWxoaSBlbGVjIHByaWNlICAgY2FyZXMgIGRldGFpbHMgd2hlbiAgIHBhcnR5IEhhcHB5IG11Y2ggIHRoaXMgZ29pbmcgICAgIG9yaWdpbmFsIGJpbGwgIHVuaXRzIERlbGhpIGVsZWN0cmljaXR5IHByaWNlcyAgRGVsaGkgIGhhdmluZyAgaGVsbCAgIGhhcHB5IGhvdXIgdGhpcyAgeWVhciB3aGVuIFJhaHVsIEdhbmRoaSB3aWxsICBsaWtlIHdoYXQgdGhpcyBSYWh1bCBHYW5kaGkgZ292ZXJubWVudCAgUmFodWwgR2FuZGhpIGJsYXN0cyBNYWhhIGdvdnQgIEFkYXJzaCBjb25ncmVzcyByZXNwb25kcyAgS2Vqcml3YWwgIEt1bWFyIGdldHMgIGtlZXAgYnVuZ2Fsb3cgIHllYXJzIFRoaXMgTWVycnkgQ2hyaXN0bWFzICBleHRlbmRlZCBNb3JlIHRoYW4gIHBhcnRpZXMgdHJ5aW5nICAgdm90ZXJzICAgcmlnaHQgSW5kaWFuIHBvbGl0aWNzICBmaW5hbGx5IGJlY29taW5nIG5pY2VseSBuZWVkcyAgcmVhbGl6ZSAgICBzdXBwb3J0IHRoZXkgZW5qb3kgIGJlY2F1c2UgICB0aGV5ICB0aGVpciBoYXJkY29yZSB0eXBlcyB0YWtlIG92ZXIgUmVjZW50ICBtaXN0YWtlcyBhdHRhY2tpbmcgb2ZmZXJpbmcgdW5jb25kaXRpb25hbCBzdXBwb3J0ICAgdmlldyAgcGVyc29uYWwgZnJlZWRvbXMgQ29uZ3Jlc3MgICBvdGhlciBoYW5kICB0cnlpbmcgIHNvbHZlIGNvcnJ1cHRpb24gICBzb2x2aW5nICBBZGFyc2ggY2FzZSAgIERlbW9uc3RyYXRlICBtZWFuIGJ1c2luZXNzIFRlYW0gTW9kaSAgICByZWFsbHkgbmVlZCAgcmVhbGlnbiB0aGVpciBjYW1wYWlnbiBnaXZlbiBSaWdodCAgdGhlcmUgIGNvbmZ1c2lvbiAgbGFjayBsaWtlIHNjYWxhYmxlICBTb21ld2hhdCBjb29sIFRoZXkgICAgIGdyb3cgICB1bmRlcmVzdGltYXRlIGRvdWJ0ZnVsICAgdG93YXJkcyBwZW9wbGUgIHJpc2UgZnJvbSAgIHdvdWxkIGhhdmUgZG91YnRlZCBBcnZpbmQgICAgICAgZmFtb3VzIHBvbGl0aWNhbCBKdXN0ICAgc2hvd2VkIHRoZW0gICBmaWdodCBlbGVjdGlvbnMgIHNob3cgdGhlbSBiZXR0ZXIgQ29uZ3JhdHVsYXRpb25zICBDb25ncmF0cyBUaGlzIEFtYXpvbiBkcm9uZSBkZWxpdmVyeSB2aWRlbyBjbGVhcmx5ICBjb29sZXN0IHRoaW5nICB3b3VsZCBoYXZlIHNlZW4gdGhpbmsgdGhleSAgc29tZXRoaW5nIHRoZXJlICAgICBleHByZXNzIHRoZXkgaGF2ZSAgcG9pbnQgIHZpZXcgbWF0dXJpdHkgY2hlYXAgcG9saXRpY3MgIHNocmlsbCBwYXRyaW90aXNtICBub3RoaW5nIGVsc2UgIHRoaXMgICAgb3ZlcnJlYWN0aW5nICAgcG9pbnQgIGRhbWFnaW5nIHNwb2lsaW5nICByZWxhdGlvbnNoaXAgd2l0aCAgICBtb3N0IGltcG9ydGFudCBjb3VudHJpZXMgICB3b3JsZCB3aXRob3V0IGxpc3RlbmluZyAgIHNpZGVzIHNlZWluZyBiYWZmbGVkIGFtZXJpY2FucyAgbmV3cyBkZWJhdGVzICBiZWluZyBhbGxvd2VkICBjb21wbGV0ZSAgIG11c3QgIHJpZ2h0ICAgIGludGVycnVwdCAgb3V0c2NyZWFtIHRoZW0gSW5kaWEgIGNvbnZleWVkIHRoYXQgc2FuZ2VldGEgcmljaGFyZHMgICBkZWVtZWQgZW1wbG95ZWUgY291cnNlIGRlY29yYXRpbmcgIHRyZWUgd2l0aCBTYW50YSBjaGV0YW5iaGFnYXQgbWFrZSB5b3VyICBjb3VudHJ5IGZpZ2h0IHdpdGggYW5vdGhlciByaWNoIGNvdW50cnkgIG1ha2UgeW91ciBjaXRpemVucyBmZWVsIGdvb2QgcmljaCBwaWNrICBmaWdodCB3aXRoICByaWNoICAgZmVlbCBnb29kIGFib3V0IHJlYWQgcHJldiAgIGxlYXJuIG1vcmUgYWJvdXQgRXhwbG9pdGluZyBzZXJ2YW50cyAgSW5kaWFuIHByaXZpbGVnZWQgIGRhcmUgICB0YWtlICBhd2F5IGZyb20gcHJvdGVjdGluZyAgd2FudCAgZGlwbG9tYXRzICBleHBsb2l0IGRvbWVzdGljIGJyZWFrIGxvY2FsIGxhd3MgICAgZm9yZWlnbiByZXNwZWN0ICB0aG9zZSAgd29ya2VkICBMb2twYWwgQ3JlZGl0IHBvc3R1cmluZyB3aWxsIGJlZ2luICBmYWN0ICBzZWF0cyAgICBMb2twYWwgYmlsbCB0d2VldGluZyBhYm91dCBwb2xpdGljcyB3aWxsIHNsYXAgbXlzZWxmICBtZW50aW9uICAgdGhhdCBsb29rICAgICBjb29sIEhpZ2h3YXkgcHJvbW8gICBrbm93ICAgZ29pbmcgcm9jayBwYXJ0IHNlcmlvdXMgbGV2ZWxzICBCYWJ5IFBhbmRhcyBEcmlua2luZyBDaGluYSBwYXJ0aWVzIHdlcmUgY29tcGFyZWQgIHRlY2ggd2hhdCAgY29uZyAgICB3aWxsICBnb29kIHBsYXkgcG9saXRpY3MgbGlrZSAgU2hlZXIgd2hhdCBkb2VzIEFubmEgIG1vcmUgSnVzdCBDb25nICBCZWNhdXNlICBkb2VzICBoZWxwIG1vc3QgZXZlcnl0aW1lICBiYXNoZXMgQW5uYSBmaWdodGluZyB3aXRoICAgTW9kaSBzdXBwb3J0ZXJzIGZpZ2h0aW5nIHdpdGggIHN1cHBvcnRlcnMgIE11c3QgbmljZWx5IHBsYXllZCB0aGlzIHF1aXogd2l0aCB5b3VyIGdyb3VwICBSZW1lbWJlciBoYXZpbmcgICAgIGRvaW5nICAgeW91ciB0aGV5ICAgaGF2ZSAgd29yayB3aXRoICAgICAgbWFrZSB5b3VyICAgaGF0aW5nICBlbnVmIG1vcmUgaW50ZXJlc3RlZCAgZ2V0dGluZyBzY3JhcHBlZCB0aGFuIHBvc2luZyAgIGV2ZW4gIHBvbGl0aWNhbCBsb2dpYyAgcmVxdWlyZWQgb3ZlciBpbnRlcmVzdGVkICBnZXR0aW5nIHRoYXQgc2VjdGlvbiBzY3JhcHBlZCB0aGFuIHBvc2luZyAgICB0aGF0ICB3aGF0IHdpbGwgbWFrZSB0aGVtIGxpc3RlbiBQb2ludCAgIHJhbnQgICBNZWRpYSAgdmVyeSBwb3dlcmZ1bCBwaXNzIHRoZW0gICAgbWlkZGxlICAgIG1vcmFsIGp1ZGdtZW50cyB0aGVzZSAgIG9wZW4gbWluZGVkIFRoaXMgIEluZGlhbiBjdWx0dXJlIHRhbGsgIG5vdGhpbmcgICBhcHByb2FjaCAgRmFzY2luYXRpbmcgIHRoaXMgc2VyaW91c2x5ICB5ZWFycyBoYXJkY29yZSBIaW5kdXR2YSB0eXBlcyAgZ29pbmcgIHZvdGUgICBwbGVhc2UgICAgIHRha2luZyAgIExHQlQgICBlbnRpcmUgQmlnZ2VyIGxvc3MgICAgc3RhbmNlICB0aGF0ICBsaWJlcmFsIGZpbmFsbHkgd2FybWluZyAgIHdpbGwgcmVicmFuZCB0aGVtIGJvdHRvbWxpbmUgIGVub3VnaCBMR0JUIHN1cHBvcnRlcnMgIGNhdXNlICBzd2luZyAgICBzZW5zZSAgbW92ZSAgcHVibGljbHkgZGVub3VuY2UgY29uZG9tcyBjb21wbGV0ZWx5IGFnYWluc3Qgb3JkZXIgRXZlbiBicnVzaGluZyB5b3VyIHRlZXRoICBtYWtlIGxhY2sgICBzdXBwb3J0ICBhYm9saXNoaW5nICBlbmNvdXJhZ2luZyBzb21ldGhpbmcgIG91dGxhd2luZyAgICBkaWZmZXJlbnQgc2FyY2FzdGljIHRoYW5rICAgeW91ciBmdW5ueSB0d2VldHMgYWNjaGEgIHJlaG5lICAgaGF2ZSBndWVzcyBleHBlY3RpbmcgIHNtYWxsIHRoYW5rcyBmcm9tIHBlb3BsZSBjb21lICBwZW9wbGUgYWNjdXNpbmcgICBiaWFzIGV2ZXJ5ZGF5IGZhbGwgc2lsZW50IHdoZW4gIHdyaXRlICBjb2x1bW4gIGdlbnVpbmVseSBpbXByb3ZlIGt1ZG9zICAgIGJlaW5nIGJyYXZlIHRocnUgIHRoaXMgSGFuZyAgIHNoYWxsIGdvb2QgR29vZCBtb3ZlICAgICB3YXJ5ICBDb25ncmVzcyB1bmNvbmRpdGlvbmFsICBjb3VudHJ5ICB0cnVzdGVkICAgIHdoYXQgaGFwcGVuZWQgU2FjaGluICAgcGxheWluZyAgICB0ZWFtICBtYXRjaCBzcGFyZSAgbW9tZW50ICBicmF2ZSBqb3Vybm8gICBnb2luZyAgYm93bCBuZXZlciBwcm9qZWN0IHlvdXJzZWxmICBiZWNhdXNlIHdoZW4gaWRlYWwgYmVjb21lcyAgcGVvcGxlIGxpa2UgICBhYm91dCBUaGVyZSAgICAgSm91cm5vcyBjcmlja2V0IG1hdGNoICBsZWFzdCBoYXRlICAgaGF0ZSAgaGF0ZSAgIHdpbGwgbG92ZSAgZ2lybCBsZW1tZSBzd2VldCAgY29uZyBsb3ZlIENvbmcgb2ZmZXIgICB0YWtlICB0YWtlICB2ZXJ5IGluYWNjdXJhdGUgV2hhdCBzaG91bGQgICAgIHRoaW5rIHRoZXkgc2hvdWxkICB0YWtlIENvbmcgdW5jb25kaXRpb25hbCBXaGF0IHNob3VsZCAgICAgdGhpbmsgdGhleSBzaG91bGQgdGFrZSBDb25nIHVuY29uZGl0aW9uYWwgV2hlbiBlbGVjdHJpY2l0eSBwcmljZXMgZmFsbCAgICBnb2luZyAgdGFrZSB2ZXJ5IGxvbmcgd2lyZXMgIHBsdWcgIGRldmljZXMgQ29uZyBtYWtlcyB1bmNvbmRpdGlvbmFsIHN1cHBvcnQgb2ZmZXIgICAgdGFrZSAgICBMb2twYWwgZ292dCAgIExvdmUgd2VsbCAgY29uY2VybmVkICB5b3VyIHR3ZWV0ICAgbG9vayBoYW5kc29tZSAgeW91ciB3b3JrcyBub3JtYWxseSBvcHBvc2l0aW9uIHN0YWxscyBnb3Z0ICB0b2RheSBnb3Z0IHN0YWxsZWQgIHRoZXkgZXhwZWN0ICAgdGhpbmsgdGhleSAgc2VyaW91cyBhYm91dCBwYXNzaW5nIGJlaW5nICAgZGVjcmltaW5hbGl6ZWQgICBkZXByYXZpdHkgcmlzZSAgb3Bwb3NlcnMgICBtb3N0IGRlcHJhdmVkIGFjdHMgd2VyZSBkb25lICBzdHJhaWdodCBNZWRpdGVycmFuZWFuICAgIExpa2UgIGtub3cgd2hlcmUgTWVkaXRlcnJhbmVhbiBUaGlzICAgc3RpbmcgIHN0aW5ncyB0aGVtIFRlbGxzICAgIG5lZWQgIHdoYXQgY3JlYXRlZCB0ZWFtICB0d2VldHMgZm9sbG93IHRoZW0gICAgaW50ZXJlc3RlZCAgc3VjaCBNdWNoIHNhbmVyIGhhbmRsZSB0aGFuIG1pbmUgdGhhdCBDb25nICAgICAgaGF2ZSAgc3Bva2VuIGFnYWluc3QgICBqdXN0IHNjcmFwICAgcGFybGlhbWVudCB3aXRoICBkaXJ0eSBwcmFzaGFudCBiaHVzaGFuICAgZmlyc3QgICBjb21lICAgc3VwcG9ydCAgIExHQlQgICBjb3JyZWN0ZWQgc2lsZW50ICBtdXN0IHJlYWxpemUgY29ycnVwdGlvbiBqdXN0IGFib3V0IHNjYXJlZCAgIHJpZ2h0IHRoaW5nICBhdm9pZCBvZmZlbmRpbmcgdm90ZXIgYmFzZSBNdXN0ICBDb25nICAgcmVhc29uYWJsZSBudW1iZXIgICBvcHBvc2luZyAgICAgIGJ1c3kgc29sdmluZyBjb3JydXB0aW9uIHRoaXMgICAgIGN1bHR1cmFsIGd1anJhdGlzICBtYXJ3YXJpcyAgIGVhc2lseSAgc29tZWhvdyAgZmVlbCAgaGF2ZSAgbGVhcm4gZnJvbSB0aGVtIEdhbmRoaSBqdXN0ICBtb3RoZXIgbmljZSBwbGF5aW5nIHdpdGggeW91cnNlbGYgIGFsc28gaWxsZWdhbCBtaWdodCAgd2VsbCBjb252ZXJ0IGV2ZXJ5IGVuZ2luZWVyaW5nIGNvbGxlZ2UgaG9zdGVsICAgY291bnRyeSBpbnRvIHBsYXlpbmcgd2l0aCB5b3Vyc2VsZiB0ZWNobmljYWxseSBtZWpvcml0eSB0aGluayAgICBsaWdhbCAgd2l0aCBhbmltYWwgd2lsbCAgbGVnYWwgICB3aXRoIGNyaW1pbmFsaXppbmcgIHNleHVhbCBwcmVmZXJlbmNlIG90aGVyIHRoYW4geW91ciAgICB3aGV0aGVyICBsaWtlICBwZW9wbGUgIHRoZXkgIGRlZW1lZCB0aGluayBiZWluZyAgICBjcmltaW5hbGl6aW5nICBiZWNhdXNlICB5b3VyIHByZWZlcmVuY2Ugbm90aGluZyBicmluZ3MgICBoeXBvY3Jpc3kgd2FubmEgIGluZGlhICAgY291bnRyeSBoYXZpbmcgbW9zdCBudW1iZXIgIG1lYW4gZ29pbmcgICBjb3BzIGJlaGluZCAgIEluZGlhICAgc3VwcG9zZWQgIGNyZWF0ZSBDb25zZW5zdWFsICAgcnVsZWQgaWxsZWdhbCAgU2hvd3MgICBiYWRseSBJbmRpYSBuZWVkcyAgeW91bmcgbGVhZGVycyB3aXRoICBtb2Rlcm4gUmVhbCAgIHB1cHBldCBDb25nIG5lZWRzICAgQ29uZyBzdGlsbCB3YW50cyB0aGV5IGxlYXJudCB0aGVzZSBydW1vcnMgYWJvdXQgIENvbmdyZXNzICBFdmVuIE5hbmRhbiB3YW50ZWQgIGxvd2VyIERlbGhpIHBvd2VyIHRhcmlmZiAgR2l2ZW4gZ292dCBmb3JtYXRpb24gc2hvdWxkICBkcm9wIHRoZW0gcGxlYXNlICAgaW1hZ2luZSB3aGF0IFJhaHVsIEdhbmRoaSBjb3VsZCAgYmVjYXVzZSAgd2FudHMgICAgdW5pbWFnaW5hYmxlICAgIGltYWdpbmUgZGVxciBnb3Z0ICAgcGFzcyAgRmFrZSBsb2twYWwgd2l0aCAgaW5kZXBlbmRlbnQgICB3aWxsICByaWdodCB0aHJvdWdoICAgIHdpbGwgZ2l2ZSAgIGRpcnR5IHRyaWNrcyBBbm5hICBzd2VldCAgICAgIG9ubHkgdGltZSBwZW9wbGUgdGFrZSAgc2VyaW91c2x5ICB3aGVuIEdvdmVybm1lbnQgICBwYXNzIExva3BhbCAgdGhleSBsYXVnaGVkIHdoZW4gIGFza2VkIHRoZW0gUmFodWwgc3RpbGwgZmVlbHMgICAgcHJlY2lvdXMgIGdpdmUgIENvbmdyZXNzIHdvcmtlcnMgIHdhc3RpbmcgdGhlaXIgdGltZSAgbWFraW5nICBwYXJ0eSB3YWl0aW5nICAgc29hcCBzZWN1cml0eSBiaWxsICBzb21ldGhpbmcgbGlrZSB3aGF0ICBzaG91bGQgICAgIEZhY2UgcGVvcGxlICB0aGVpciAgIHRoYXQgIGhpZ2ggaG9yc2UgZXZlbiAgdW5hdm9pZGFibGUgIHNob3VsZCBvZmZlciB1bmNvbmRpdGlvbmFsIHRvdGFsIHN1cHBvcnQgICB1bnRpbCAgbGFzdCBXaWxsIG9ubHkgaGVscCBib3RoIHBhcnRpZXMgIERlbGhpICBiZWluZyBxdWl0ZSBqdXN0IHdhbnRlZCAgIHRoYXQgd291bGQgICBjYW1wYWlnbiAgICBnb29kICAgb2ZmZXJzIHVuY29uZGl0aW9uYWwgc3VwcG9ydCAgICAgICAgd2hhdCB3aWxsIGhlbHAgdGhvc2UgIHdlcmUgICAgc2FtZSBtb3JhbGx5ICAgICAgd2hhdGV2ZXIgY29uZGl0aW9ucyAgIGhhdmUgIG9mZmVyIHVuY29uZGl0aW9uYWwgIHdpbGwgICAgd2hhdCBCb3RoICAgIHNob3VsZCB3b3JrIHNvbWV0aGluZyAgIG1ha2UgIGdvdmVybm1lbnQgIHN1YmplY3QgIHdoYXRldmVyIHBvc3R1cmluZyBoZWxwcyBhY3R1YWxseSAgdGhvc2UgbG9zZSBlbGVjdGlvbnMgIGhpbmRpIHNwZWFraW5nIHN0YXRlcyAgICAgZ2l2ZSB0aGVpciBjb25jZWRpbmcgZGVmZWF0IHNwZWVjaCAgbGlrZSBob3BlICBwcmF5IENvbmdyZXNzIGxlYXJucyAgcmlnaHQgbG9vayBsaWtlIHRoZXkgd2FudHMgICB3aGF0ICB0aGV5IHdvcmtlZCBhZ2FpbnN0IHdoYXQgICAgd2F5cyAgZXZlbiBSYWh1bCBHYW5kaGkgICAgd2hhdCAgIHRoZW4gICAgaW1hZ2luZWQgU2hlaWxhICAgU2hlaWxhICBub2JvZHkgIEFydmluZCAgbGVhZGVyICBzZWNvbmQgbGFyZ2VzdCBwYXJ0eSAgQXdlc29tZSBXaXRoIGV4cGVjdGVkIHNlYXRzICBEZWxoaSAgIGVudGlyZSBDb25ncmVzcyBwYXJ0eSBNTEFzICBEZWxoaSAgICAgVG95b3RhIElubm92YSBsZWFzdCBsaXN0ZW4gIGhhdmUgbG9zdCBiZWNhdXNlICAgdHJpZWQgIGZvb2wgZGl2aWRlICAgZ2F2ZSBoZWFyZCBjb3VudGxlc3MgaW5zdWx0cyAgIGZ1dGlsaXR5ICAgZWZmb3J0cyAgZGVzaXJlICB3b25kZXIgd2hhdCB0aGV5IHdpbGwgbGl0ZXJhbGx5IHllYXJzICB3b3JrIHRyeWluZyAgY2hhbmdlICAgSW5kaWEgdGhpbmtzICBPdmVyd2hlbG1pbmcgICAgZmluYWxseSBBbWl0IFRyaXZlZGkgQ29rZSBVbnBsdWdnZWQgY29uY2VydCAgbWVoYm9vYiBzdHVkaW9zICAgYmVoaW5kIHNlc3Npb25zICB0b21vICAgIGJhbmRyYSBtZWhib29iIGNvbWUgbm90aGluZyAgIGFmcmFpZCBrbm93IHdoYXQgR3lub3Bob2JpYSBmZWFyIEZyb20gIHNvbWVvbmUgIGdvaW5nICAgc2NhcmVkICB0YWxrIGFib3V0IGJlaW5nIHNjYXJlZCAgdGFsayBzdXBwb3J0IGNvbW11bmFsIHRyZW5kcyAgRGlzdHVyYnMgIHdoZW4gcGVvcGxlICB0b2dldGhlciAgIEFsbW9zdCBsaWtlICBUcmVuZCBtYWtlICByaWdodCBOb3RoaW5nIHdyb25nICB0cnlpbmcgIHVwbGlmdCAgU29tZXRoaW5nIHdyb25nICBtZW50YWxpdHkgdGhhdCAgY29tbXVuaXR5ICAgbGlmdGVkIG9ubHkgICBleHBlbnNlIENoZXRhbiBCaGFnYXQgcmliYmVkICBUd2l0dGVyICBjb21wYXJpbmcgTW9kaSAgaGVybyBjb21lICB0aGluayAgd2hhdCAgY3V0ZSBsZWFkZXIgIG9wcG9zaXRpb24gUmFodWwgR2FuZGhpIHdpbGwgU3VnZ2VzdCAgYXBvbG9naXplICAgcGFydHltZW4gIGxldHRpbmcgdGhlbSBkb3duICAgSW5kaWFucyAgbG9zaW5nIHRoZWlyICBwcmluY2VzIHJlcG9ydCBjYXJkIHRoaXMgVGhpcyB3aGF0ZXZlciAgSW5kaWFucyBtdXN0IHJlbWVtYmVyIHRob3NlICBzYWlkIHlvdXRoIHBlb3BsZSBmb3JnZXQgc2NhbXMgIHNvY2lhbCBtZWRpYSBtYXR0ZXIgIHJlYWR5ICAgeW91ciB3b3JkcyBnaXZlbiBkZWxoaSBleGl0ICAgIGhpbmRpIHNheWluZyBsb29rcyBsaWtlIHRpbWUgIGNvbWluZyAgZGVsaGkgY29uZ3Jlc3MgIGRyb3duICB0aG9zZSAgc3dpbW1pbmcgd291bGQgICBnb29kIHRpbWUgIG1lZGlhIGhvdXNlcyAgcHVsbCAgY2xpcHMgIHRob3NlIGFycm9nYW50IGxlYWRlcnMgIHNhaWQgIGFjaGlldmUgeW91ciBoYW5kICBwaWNrICAgYnJvb20gIG1ha2UgeW91ciBjaXR5IGJlYXV0aWZ1bCBsaWtlIHNob3cgdGhlbSBoYXBweSBzZXNzaW9ucyAgc3VuZGF5ICBzdW5kYXkgIHNjaGVkdWxlIEdpdmVuICAgZm9vZCAgICAgd2hlbiBwZW9wbGUgd2lsbCBwb3N0IHBpY3R1cmVzICBwZW9wbGUgdGhleSAgYWJvdXQgIG1ha2Ugd2l0aCBwZW9wbGUgY2xpY2tpbmcgIHBvc3RpbmcgcGljdHVyZXMgIGZvb2QgIHJlc3RhdXJhbnRzIGJlZm9yZSBlYXRpbmcgeW91ciBmcmllbmRzIGhhdmUgICB3aGF0IHRoZXJlIGxpa2UgbGV2ZWxzICB3aGljaCAgIHBhc3MgIGp1c3QgIGtub3cgZXhhY3RseSBkb2VzICBjb25kdWN0ICBwb3RlbmN5IENhbGxpbmcgc29tZSBwZW9wbGUgbGliZXJhbHMgICBpbnN1bHQgICB3b3JkIHRoZXkgIGp1c3QgYmxvb2R5IHR5cGUgIGlnbm9yZSBzaW1wbHkgdGVsbGluZyAgbmFycmF0aXZlICB3b3JsZCByZWFkaW5nIG1vcmUgaW50byAgdGhhbiBuZXZlciBiZWVuIHRyb2xsZWQgIG11Y2ggIGp1c3QgbWVudGlvbmluZyB3aGF0IGhhcHBlbmVkIGFyZXkgIHdoYXQgICBqdXN0IG1lbnRpb25lZCAgbW92aWUgSnVzdCBiZWNhdXNlICAgIGNoYW5jZSAgICAgZ29vZCBFbmdsaXNoIG1lZGl1bSBzY2hvb2wgbWVhbiAgaGF2ZSAgc29sZSBuYXR1cmFsIHJpZ2h0ICBkaXNjdXNzIHByb2JsZW1zIGZpcnN0IHN0ZXAgIHJlc29sdmluZyBLYXNobWlyIHdvdWxkICAgYnJlYWsgIGNvc3kgY2x1YiAgZWxpdGlzdHMgIGJlbGlldmUgb25seSB0aGV5ICBkaXNjdXNzIFRob3NlIHdpdGhvdXQgaWRlYXMgZmluZCAgZWFzeSAgYXR0YWNrIG90aGVyIHRoZXJlICAgZGViYXRlICBBcnRpY2xlICAgS2FzaG1pciAgYmVpbmcgbWFuYWdlZCBmcm9tIHRpbWUgICB0aGluZ3MgcGVyZmVjdCBvdmVyIHVzdWFsIE1vZGkgIGdpdmVuIHdlZWtseSBlc3NheSB0b3BpYyAgb3RoZXIgdGhpcyBhcnRpY2xlICBzdWJtaXQgIG5lYXQgSnVzdCB3YW50ICBjbGFyaWZ5IHRoYXQgICAgIEdyZWVuIFNjYXJmICBoaW50cyAgZXhhY3RseSBtaWR3YXkgYmV0d2VlbiBSYWh1bCBEZWxoaSAgIGhvbm91ciAgICAgdXBjb21pbmcgZWxlY3Rpb25zIEFtYXppbmcgIHR3aXR0ZXIgIHBhc3Mgc2VudGVuY2UgIGRyYXcgZ3JlYXRlciBsZXNzb25zICAgY2FzZSAgd2hpbGUgY291cnRzIG5lZWQgQW1hemluZyAgICBBdmlnbm9uICB0d2l0dGVyIHRlbGxzICAgbWlzc2luZyBtdWNoICAgcmVkdWNlIHRhcmlmZiAgd2lsbCB0aGV5IHN0b3AgcHJpdmF0ZSBjb21wYW5pZXMgICBncmVlZHkgdGhpbmdzICBjaGFyZ2UgZG91YmxlICB3aGF0IHRoZXkgIG5lZWQgcHJpdmF0ZSBzZWN0b3IgICBtdXN0IHdvcmsgd2l0aCBsaWtlICB0cm9sbHMgdGhpbmsgdHdpY2UgYmVmb3JlIHRyb2xsaW5nIGxpa2UgIHRob3VnaHQgdGhyb3VnaCAgd2hhdCAgICBleHBlY3QgcHJpY2VzICAgYWN0dWFsbHkgaGFsdmVkIHRoZW4gIGVsZWMgY29tcGFuaWVzICBzZWxsaW5nICBtb3JlIHRoYW4gZG91YmxlICB0b3RhbCBjYXBpdGFsIHBsdXMgb3BlcmF0aW5nIEZvcmNpbmcgdGFyaWZmIHJlZHVjdGlvbnMgIGVsZWMgY29tcGFuaWVzIHdpbGwgYmFua3J1cHQgdGhlbSAgbWFrZSBvdGhlciAgcGxheWVycyAgaW52ZXN0ICBUaGluayBiZWZvcmUgdGFsbCBzYWlkIHRhcmlmZiAgICBzYXlzIENvbmdyZXNzIHNob3VsZCBqdXN0IGdpdmUgICBzZW5kIG1vbmV5ICBsZWF2aW5nICBsaWdodHMgcmVtZW1iZXIgc29tZXRoaW5nIGFib3V0ICBvbmx5ICAgY291bnRlciBwb3dlciB0YXJpZmYgdGFyaWZmIHByb21pc2VzIHBvd2VyICBjaGVhcGVyIGVsZWN0cmljaXR5IEF2aWdub24gIEZyYW5jZSAgd2hlcmUgUG9wZSAgIGJlZm9yZSAgSGF2ZSAgc3BlYWsgIGdsb2JhbCB0aGlua2VycyBIb25vcmVkICBleGNpdGVkICAgIGtleW5vdGUgc3BlYWtlciAgRm9ydW0gRnJhbmNlIHRoaXMgdGFsayBhYm91dCBwb2xpdGljcyBOYXJlbmRyYSBNb2RpICAgUmFodWwgd2VsbCBJbmRpYSB3ZWxsIHdpc2hlciB0aGluayBzb21ldGhpbmcgZ29vZCB3aWxsIGNvbWUgICB3aWxsIGNoYW5nZSAgIGV2ZW4gd2l0aGluICBub2JvZHkga25vdyBhbGthICAgIHByZXBsYW5uZWQgICAgICBtYXliZSAgICBzb21ldGhpbmcgIHRoaW5rIGFib3V0ICAgaGFwcGVuZWQgbG92ZWx5IG1lc3NhZ2UgZnJvbSAgQ29uZ3Jlc3MgVW5pb24gTWluaXN0ZXIgIHRoaXMgYWdyZWVpbmcgd2l0aCBGZWx0IHNjcmVhbWluZyBNb2RpIE1vZGkgIFdhbmtoZWRlICBmcm9udCAgUmFodWwgR2FuZGhpICAgcGFydCBhYm91dCBSYWh1bCBHYW5kaGkgam9pbmluZyB0aGVtIFBlb3BsZSB3YWxraW5nICAgUmFodWwgcmFsbGllcyBjbGVhcmx5IHNob3dzIEluZGlhbnMgaGF2ZSBwb29yIE5vYm9keSB3YW50cyBmcmVlIGVudGVydGFpbm1lbnQgYWxyZWFkeSBidXp6aW5nICAgICAgQWR2aWNlICBDb25ncmVzcyAgbGlrZWx5ICBCaGFnYXQgYmxvZyBBbW9uZ3N0ICAgZGl2aXNpdmUgZm9yY2VzIGFyb3VuZCBTYWNoaW4gbWFkZSBJbmRpYSAgIGxlYXZpbmcgIG5ldmVyIGZha2UgaGF2ZSBjbGFyaWZpZWQgICB0aGVuIEhhdmUgbGl2ZWQgICAgZmlyc3QgcHVibGljIGV2ZW50ICAgYXV0aG9yIHRoZXJlIFRob3NlIGNvbWUgcnVpbiB0aGVpciBGdWRnZSBCcm93bmllIEN1cGNha2VzIHdpdGggQ29va2llIERvdWdoIEZyb3N0aW5nIGd1ZXJpbGxhIHRhY3RpY3MgIGRlc3Ryb3kgeW91ciBtYWtlICB3YXRjaCBHcmlsbGVkIENoZWVzZSBkYXJlIGdpcmxzICAgICAgdGhpcyBUaGlzIGtpdHR5IHRha2VzIHByZWNpb3VzICAgd2hvbGUgR2l2ZW4gbGFzdCBtYXRjaCB0aWNrZXRzIGNvdWxkIGhhdmUgYmVlbiBhdWN0aW9uZWQgICBzdW50YSBrYXVuIG5hdWdodHkgIGNhdXRpb3VzIHdoaWxlICAgUmFodWwgcmVhZGVycyBtaWdodCBzdGlsbCAgICBmb2xsb3dlcnMgIHJlcG9ydCBpbWFnZXMgICAgZ3V5cyBwZW9wbGUgIG1ha2luZyBzaWNrIGZha2UgcXVvdGVzICAgIGF0dHJpYnV0aW5nIHRoZW0gICAgc2lja29zICByZWFkZXJzIGtub3cgd2hhdCAgY291bGQgICAgc2FpZCBzaXJqaSBqdXN0ICAgZmFjZWJvb2sgdGhvdWdodCBtdXN0ICAgZmFrZSAgIGZha2UgcGljcyBhbGxvd2VkICBLaWNrICAgICAgIGp1c3QgcHJlcGFyZSAgYXdlc29tZW5lc3MgbmV4dCBLaWNrIFdvd25lc3MgYm90aCBzaWRlcyBtb3N0bHkgY2FtcGFpZ24gIHN1YnN0YW50aXZlIGp1c3Qga2VlcCBzdW5kYXkgIHNpbGx5IGF0dGFja3MgbGlrZSAgc2hhdmUgYmVhcmQgZG96ZW4gZnJlZSBsZWFkZXIgICBtYWtpbmcgc2lsbHkgbWlzdGFrZXMgIHRob3NlIHNpbGx5IHdoZW4gICAgIGJhbmsgIG1hZGUgaW50ZW50aW9uYWwgdHlwb3MgIHByZXNlbnRhdGlvbnMgICBib3NzIGNvdWxkIGhhdmUgIGZlZWxpbmcgIGNvcnJlY3RpbmcgdGhpbmdzICBhZGRpbmcga25vdyB0aGVyZSAgc29tZXRoaW5nIHdyb25nIHdpdGggeW91ciBjYW1wYWlnbiB3aGVuICBiZXN0ICAgICBwaWNrICB5b3VyIGdvb2QgIGRyZWFtICBUaGlzIHF1ZXN0aW9uICBhbHdheXMgY29uZnVzZWQgZXZlbiAgc29tZSAgeW91ciBmYWN0cyAgd3JvbmcgIHlvdXIgaGVhcnQgICAgcmlnaHQgcGVvcGxlIGZvcmdpdmUgbmV2ZXIgc29tZXRoaW5nIHByb2R1Y3RpdmUgZXZlcnkgc2ltcGxlIGhhcmQgIHN0aWNrIHRha2VzIEhhcHB5IEJpcnRoZGF5ICB0aGFua3MgIHJlbWVtYmVyaW5nIE5leHQgYm9vayAgc29tZXRpbWUgIHNlY29uZCBoYWxmICBuZXh0IGxhdGVzdCAgR29pbmcgTG92ZSByZXN0IHNvbWV0aW1lcyAgIG1pZGRsZSAgIHRoaXMgcG9saXRpY2FsIGFuYWx5c2lzICBmb3JnZXQgICB0cnVseSAgICAgZWxlY3Rpb25zIEVhc3RlciAgIERpd2FsaSAgdGhhdCAgd2hhdCAgY2FsbGVkICBzZWN1bGFyIGxpbmV1cCAgbmV4dCB0aGF0cyAgdHJ1ZSBCb3RoIHNob290aW5nICBzYW1lIHRpbWUgIEZ1bm55ICB0aGluayB0aG91Z2h0cyAgeW91ciBoZWFkIG9uY2Uga2VlcGluZyAgbWFueSBwZW9wbGUgWW91ciBhZ2VuZGEgc2VlbSAgIHdyaXRpbmcgb25seSBhbnRpIHdyaXRpbmcgICAgIHBvbGl0aWNhbCBhcHByZWNpYXRlICBoYWxmIFBvb3IgdHJvbGxzIGtub3cgIGhhdmUgbWFueSBmcmllbmRzICAgd2lsbCAgdGhlbSAgbm90aWNlIHlvdXIgQXBwcmVjaWF0ZSBXaGVuICAgbWFraW5nICBnZW5lcmFsIHBvaW50IGFib3V0ICAgIENvbmdyZXNzIHRyb2xscyBzdGF5IFJhaHVsIEdhbmRoaSBFdmVuICBDb25ncmVzcyBnb3Z0IGNvbWVzICBwb3dlciAgc3Ryb25nIG1ham9yaXR5IG1hcmtldCB3aWxsICAgYnJva2VyYWdlICAgTWluaXN0ZXIgd2lsbCBzdXNwZWN0IE1vZGkgY29tZXMgIGJlbGlldmUgc3RvY2sgbWFya2V0ICBsaWtlbHkgIG1vdmUgU2hvdWxkICBlcXVpdHkgcmVzZWFyY2hlciBtYWtlIHRoaXMgVGhyZWF0ZW5pbmcgaW50ZXJuYXRpb25hbCBpbnZlc3RtZW50IGZpcm1zICAgICB3b3JzdCB0aGluZ3MgIGdvdnQgICBncm93aW5nIGVjb25vbXkgbG9va2luZyBEZWFyICBtYWluc3RyZWFtIHNvY2lhbCBtaWRkbGUgY2xhc3MgICAgICAgaGF2ZSBpc3N1ZXMgQW5hbHlzaW5nICBwb2xpdGljYWwgc2l0dWF0aW9uICBwYXJ0ICB1bmRlcnN0YW5kaW5nICAgcmVzZWFyY2ggYW5hbHlzdCAgIHVuZGVyc3RhbmQgIFBhcnQgVGhyZWF0ZW4gIEdvbGRtYW4gc2hvdWxkIGZvY3VzICAgIFNoYXJtYSAgVGltZXMgIEluZGlhIG5ldmVyICAgICBleHBlbnNpdmUgc3RhdHVlcyAgIHByaXZhdGVseSBmdW5kZWQgICBnZW5lcmF0ZSB2aWFibGUgdG91cmlzdCByZXZlbnVlcyB0aGVuIHdvcnRoIGxvb2tpbmcgbmVlZCAgdW5kZXJzdGFuZCBTdGF0dWUgZXhwZW5zaXZlICBpbmNsIHNheXMgbGFyZ2VseSAgZ292dCB0aGVzZSAgY2FsbGVkIGNvbmdyZXNzIHN1cHBvcnRlcnMgaGF2ZSBoYXJtZWQgIGNvbmdyZXNzIG1vcmUgdGhhbiAgY3JpdGljIGV2ZXIgeW91bmcgbGFkeSAgYXNrcyAgc3VnZ2VzdGlvbnMgIGp1ZGdlcyB0aGVtICByZWFsaXplIHRoYXQgdGhpcyAgIGJlc3QgYWR2aWNlICB3b250IGxpc3RlbiBhc2tpbmcgIHN1Z2dlc3Rpb25zIG1lYW5zICB3aWxsaW5nbmVzcyAgIHdpbGxpbmcgICB0aGV5IGFja25vd2xlZGdlIHRoZXkgbmVlZCBhbnN3ZXIgdGhpcyBQZW9wbGUgaGVyZSBoYXZlICB0aG91c2FuZCB3b25kZXJmdWwgc3VnZ2VzdGlvbnMgICBzb21lb25lIHdpdGggYXV0aG9yaXR5IHNheXMgbGlzdGVuICAgIFdpbGwgZmVlbGluZyAgICAgY29uZ3Jlc3MgICBzdWJkdWVkIHNhbmUgdm9pY2VzIHdoYXQgIHRoaXMgcmFuZG9tIGNhbXBhaWduIHNvcnJ5IHN1bmRheSBuZXh0IHNpbmNlIHNvbWUgZmVlbCBnaXZlbiBlbm91Z2ggc3VnZ2VzdGlvbnMgICB3aWxsICAgIG5leHQgICB0aGV5IHN1bmRheSBTaGFyZSB5b3VyIElkZWFzIFN1Z2dlc3Rpb25zICBDb25ncmVzcyBNYW5pZmVzdG8gSnVzdCBUaGF0IHNpZ25pZmllZCB0d2l0dGVyIHN0b2NrIHN0YXJ0aW5nICB0cmFkZSAgIGp1c3Qgd2VudCA=</textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>