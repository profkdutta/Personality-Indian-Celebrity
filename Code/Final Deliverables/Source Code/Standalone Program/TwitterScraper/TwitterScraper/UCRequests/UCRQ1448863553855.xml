<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">know that  constitution gives  freedom  also considers hate speech  crime have  signed  such appeal  never will Those  cant find  truth against  have concocted this total   have  signed  mercy appeal   terrorist Shame    making such false accusations have  signed  such appeal   never with  capital    capital what ever  your source  information change very difficult    decide whether   retarded   imbecile  will show  pity accordingly hope your family  concerned  looking   proper mental hospital with this dirty  perverse thinking  deserve   called Kabeer    secular genius Change your name really wonder what makes some thinking  distorted upbringing peers misinformation  inborn meanness must have felt disappointed  wonder when people like  will  over your pettiness  honestly feel this that   religion  belong    faithfuls words   dictionary   world  powerful enough  condemn  heinous barbaric   most ugly terrorist massacre  Paris very happy Deepawali   lamps  Deepawali fill  hearts with  love   that  beautiful peaceful Worthy daughter   worthy father Meghna Gulzar  making  flawless mind blowing film Talwar  have   standards  Hindi sure about majority    Rahul Kanwal  obviously totally convinced  this justification  murders  mayhem think  Aadesh  words that come   mind  talented honest self respecting fearless   wonderful friend Kashmir what  disputable   democracy Does  really  their speakers acceptable  other genuine democracies community caste language region unlike  most today  first   most important identity film that  given  awards  Cannes  undoubtedly  great Congratulations team Masaan More often than  when they    opinion actually they want  hear only  confirmation  their  opinions Would   interested    film based prog Jaanay Pehchanay  channel Epics   tonight  promise  will like moment  cherish with Kishore   recording  Yash Johars Duniya president represents  state   party Asking about Bofors   poor taste  asking  queen  England about   scandal dear Rajdeep saheb    TARANA  Aligarh university written  Majaz    icon  urdu poetry Zoya   Dharekne Great movie Feeling  proud   that    diagnosed   border line case  arrogance Seems more than  party  looking    leader Hope  least  takes  right decision  chooses Sita hang  head  shame    outraged that  political reasons some Indians  tolerating traitors hoisting Pakistani flag   soil many great batsmen bowlers  always take  tenth wicket Good      more steps were  when  stood   motherland   want    polite with    cross  line could   frustrated    crores  fellow love makes  feel happy  young  about know what language creatures like  understand beta  forefathers were suffering  British jails  dying  Kala Paani when probably yours were licking British boots Whoever wins Tagore lose Ironically anthems  both  countries  written   Nevertheless  best wishes  team ever wins Tagore lose Ironically national anthems   countries  written  Nevertheless  best wishes  Dhoni boys need  know  rules  Bukhari      Indian  need  know  rules  Indian constitution since  find   against  rape   year   concluded that  mind    totally insane less  moron    asking  police  arrest  fundos    blaming police because  match      have  explain this     your  common sense fatwa  that   unislamic  Muslim girls  play foot ball fail  understand  every govt every administration political parties   scared    extremists    communities football  canceled  Bengal after  fatwa Police should give protection  Muslim girl players  arrest those fandos cricketers have given   perfect reason  shout from  roof tops MERA BHARAT MAHAN last time   responding    free  write  filth   want   honestly  feel sorry respect  these words  wisdom three rapes   every five  committed   villages where there  theatres Does  answer your states that have  theatres  southern  states that have minimum    north Does  answer your question must watch  documentary that   made against British involvement  Iraq   listen national public Radio friend  have always stood  Taslima  believe  tomorrow   make  film  Lajja that  will  banned thank   watch  interview  headlines today      Sunday also   secular  liberal Believe   will make   better person this poem  Faiz titled Raqeeb   also sung  Noor Jahan  sure   google write  almost thirty years    wrong Today   beyond possibility that  would write such  regressive line Shab    born  working mothers there never  Parda tradition   families have  liberal secular back ground Since  says they will keep  touch with Hurriyat  earn  right  give   support  Biloch hands  will have  speak  Tata many more beheadings this world will watch passively before they will     crush  evil thank  Raksha  your kind  generous compliment more power   Sunitha  best wishes Agreed  this world there  many good people  inspite  their religion  because    that includes agree more with  Harris  Rafiq Zakaria long this world  going  tolerate Before   else    responsibility  Arab States  unitedly eliminate this menace Some  sent   tweet which  indecent   poor taste while trying  delete   mistake   retweeted Please ignore Arre Bhai some unknown  sent  these picture   trying  delete    retweeted  mistake Deleted need  read  little more Paris burning  thought this will never  asked again after     Nazi   world should unite again against  terrorism Paris burning  thought this will never  asked again after    Nazi   world should unite again against this danger medieval irrationality  modern weaponry   terrible combination   ultimate danger   very existence  human race point taken  stand corrected honoured that  students   heard  speech  more than  hour  gave such positive Thank this couplet    master poet Hasrat mohani have said that  have deep contempt   Fundos  saying  again   tell  have  ever said  about  fundos very happy  year   this year make this world  better place     Warm Javed liar   poor crook    accused   never speaking     trying  change  topic either   ignorant   lair Because what  have said about Shabana      true agree with  This   difference between these countries  India  Indians should  proud  this difference some anonymous poet  those olden times when people used  write letters instead  messaging please misunderstand since javedskhtar  already booke  some     choice    childhood  name Happiness  like    your radar before   identify  recognise   disappears Perhaps  appear  disappear again very well Have  come back   still there     have noticed    following   done will  shut   stop lying  least     such  tragedy    totally devoid Today  whole world should take  pledge  eradicate this evil called Talibans from  face innocent children  killed  Talibans  Peshawar  black   humanity thank   nice     that thank   your kind  generous compliment little  know Nothing gives   right  slop  woman     defending that creep  belong   same category inspite  trying again  again  have  found perfect words  express  anger  contempt   creep  tried  insult Gauhar khan where  this place friend this   sher  husrat mohani  master poet what  even more beautiful   element  mystery  beauty   called enigma aadaab  could  ever think that   ever forget      where    respect  regards Hurdles have never scared  Look   grand daughter Shakya  crossing them   horse told     have    have more opinion than information Santa clause   tooth fairy were telling  that nothing  this sort will happen chosen Farhan    good will ambassador  rights first  ever   this designation injustice violence hunger poverty repression Around   that your superb  must accept   slipped from  mind Thank these   people  right from  beginning  history have told    should have never trusted them dear alien  have always taken  strong stand against those mullas  want curb rights Thank  every    reacted with such superlatives  ACTIVE JAVED AKHTAR  TATA  says people love poetry thank   friend that case   lack  information  this case   lack  understanding have always believed that vocal cords  neurones  independent  each other Yesudas  confirmed  beyond  doubt leave  Taslima  tell  whether  have stood approve  such projects Every action word  thought that creates walls between  Indian  other  condemnable uncanny resemblance between these Muslim bigots  your self  also hate others with  even knowing them Since  will shun those categories where  suspect   find    left with  first category human beings there  more chances   potato becoming  professor  philosophy than some  like   ever Boko haram  ISiS have convinced  that living beings belong  categories human beings religious fanatics relieved that      class  obviously extremely poor  bringing  against relieved that  Aman   class  obviously   extem kind  religious faith  means    been able      umbilical cord from  dark ages kind  religious faith  only means that  umbilical cord     from  dark find    tube   titled    would like  know   other have reacted  this speech have come   conclusion there  kinds   full stop  coma followed deeply touched when teams  World  sing their anthems with reverence      relate  national anthems sudden demise   Munde  come   shock  every   condolence   family  friends Today   fifty years when that freedom fighter that visionary that architect  modern India  left   ever this report   correct   want  know  views please   YouTube  watch   POINT with Karan that case  should concentrate  other countries because  Egypt  already have  great ambassador  Navdeep Suri believe that  partition  India     biggest blunders committed  human history thank   these kind confidence determination personified every young person   nation  VIRAT KOHLI  what ever     doing thank     pleasure meeting have taken singular words from many languages make their plural      making plural   plural  wrong thank  Preeti  hating  whole sale    good idea There  good   people  every segment  society please have some mercy  poetry leave  alone Thank Total agreement with   wish  many others could understand your words happy  once   order agencies have acted promptly   idiot  behind bars writer  ever great  take liberty with  grammar tell   will  react   your Lahore university  group  student celebrates Pakistan defeat   Indian team understandable because  British    these Indian Pakistanis people like will show  respect  will suspect some thing  wrong with accusing   talking like Hindu fanatics  Hindu fanatics call  anti Hindu Both    wrong they  British Indians  cheer Indian team  England    these Indian admiring  good player   good team  understandable  feeling happy that your  country  lost   acceptable sorry people like    better than them Like them    capable  spreading only fool  appreciation  good cricket   anti national statement This   acceptable shame   that   standing  those  were celebrating Indian defeat They  traitors suspension  those Kashmiri students  cheered Pakistan  They should  rusticated  sent back  Kashmir Aadmi   celebrity  give   right   rude  polite   will  polite with pity that  know  much these Islamic fundos hate   what kind   contempt  have  them after being rude enough      some body  expect politeness from obvious that  hate  fact that    nobody   angry with     fault that    failure already clarified  Google  read when  will raise Shah Bano issue  will find some other excuse have talked about Shah Bano many times   like could have made much more money  doing some cheap  vulgar   incapable  appreciating  good effort Shame  appreciating  great grand   Maulana Azad  highlighting  real issues some sick people  abusing arouse deep sympathy   Living with such  petty mind   horrible tragedy that nature  inflicted totally completely wrong  ever  used     poetry needs goshwara  many kind  earrings report  summary  expense   kind  belt  zardozi Jazbaat which means emotions   plural  jazba which obviously means emotion Jazbaton   wrong What makes  think that     atheist contrary Amjad  recommended  Salim    drop  actor because reading from Taslima this   fair   abusing only Tarek Fateh   ignore  like this better  nasty about    very hurt atheists hardly have  freedom  expression  over  Wish atheism could  preached   religions  preached have made episodes  Sahir MAJROOH SDBurman   classic  think   find these episodes  YouTube shocking that some  like Sunanda full  zest  full    happiness   more Deepest condolence  Shashiji there     distorted versions  history  crazy there   book thousand years    more rather flattering  those  like  have  concoct allegations because they find  real want   world where  there  peace happiness justice equality aesthetics against  group  people insisting that  govt should  their bill   parliament That  random happy  year Tarek saheb Hari saheb  Taslima  need your sane voices More power very happy  year  every  make  resolution  shed   negativity bury  hatchets  make  world reservation  only about their insistence that govt should accept their That time there published such bans should  condemned whether   village   urban housing   group    group there  difference hate speech  hate writing   crime according      land  Taslima    accused  that stand   freedom  expression    writers   world including Taslima Nasreen  condemn some   tweeted that  serial written       true  what grounds thank  Hari    very  lower back spasm    fine thank  brother    Indian Spinal injuries Center  almost  days    almost awzaar means tool  tools like  awzaar   carpenter This    those rare words that  both singular  plural your   unhappy   frustrated person full  venom because  feel life   given  what  deserve deeply touched  your respect  justice  rule    Wish  would maintain  every where gentle reminder  basic decency    saying   wrong  accept  with certain have never said    given  watered down version  some    know better  totally stand wish  also  some capability       unaware  your  baises have deleted that tweet  accepted that   misinformed  wrong   should quote those words that Amit Shah  gone  should explain   media that they were protecting  lady what wrong with that case  rape  molestation   they hiding  identity   lady  should call  press   tell  truth fool  protection   more policemen  provided   This  snooping  surveillance Leave aside  where   Sanskars aadarsh   called moral values  Defending  stalkers really depressing that women spokespersons    busy defending  justifying  stalkers   young working could  educate    many priests have been found committing these important initiative    Godrej   worthy daughter Tania Duubash   already joined  some exceptional Players will come  players will   SACHIN  GREAT will keep making centuries   memory have never said  word against Gujarat    reason  like  would  mean that  like Maharashtra have  idea what   talking about   Talibani  what  hell   doing What  happening  Campa cola  grossly unfair Those decent people  being victimised   crimes committed  some other people worry   your feed condemn    those organisations   world whose mission   spread hate  violence Gujarat govt   urgent need   history teacher Please send your application    office have done  many times  still willing  accompany  What else Some idiots imply that opposing Modi   anti national  they suggesting that   Indians  anti nationals only they pronounce JERA instead  ZERA they  BAWAZOOD while  word ignorance personified  tell  that   those  have opposed uniform civil code    Golwalkar welcome back  India Please email  where   staying  Delhi this question  those  claim   Sardar Patel admirers After     congress stand corrected   right Population  Asia  Africa  together  even  than have used many adjectives     will  only    Imbecile little  know about what  stand  Since years    colleagues  opposing   called religious laws your religion   secular   come across   communalist with  patience   other point  view pray  believe  praying    forms  praying  obsolete rituals    that this   most stupid comment  have across  last days  meant fight against darkness  Diwali read  tweet again  again Ultimately  understand  Festivals unite people religions divide them This   thing ought    society Such festivals   just religious  cultural    colour  life crazy   celebrating Diwali since three days with  friends What   telling Chetan  will understand missed  point  meant that  many people   same thing   same time  mean they  unified accept  simple fact that    religions   same because  feel they divide  unify  world every night when half  earth   darkness almost three billion people sleep  Asia  Africa good that   unaware  dimwitted  insignificant     will live with your self every religion  anti    secular inspite  your religion  because according   people like      agree with your choice   leader  anti national rubbish Happy when ever where ever light defeats darkness dictionary  find   meanings  words like fairness  honesty  will help shameless lair Tell  when  where  have defended     defends prigya Prohit  Modi Takshila   Bihar which  invaded  Chandragupt  from Gupta should  have been  Perfect tried  demean Nehru  suggesting that  have been  first  Modi    even  Pygmy  front  Nehru love your country because   incapable  loving   only Pathetic actually  should  sent   such country  deserve  live   secular democratic country like your stance  based  total utter bias  sheer believe that partition  India     biggest blunder committed   history  mankind have   people  their  time  historical perspective stop worshiping women  start giving them  rights  respect that every human being deserves when have  done that Please forward  such message    prove your allegation could never imagine that that  would ever  some thing that  would agree with Here    rapist   minor Those  tolerate atheists given  chance will  tolerate people  other religions Gujarat Modi  made    taking  different stand  food bill   started doing  same   Center always   controversy   other  issue then blaming another   offering bribe Jinnah preached that Hindu  Muslim  different  think    follower When  corrupt politician  convicted  party invariably calls   Some parties have done  some will what Talibans  doing  unislamic then  dont   credible Muslim ulema declare them anti Islam   unanimous fatwa first leader  Indian history   accused   adversaries  appeasement  Mahatma proud    secular Indian whose ancestors  Ashok  Akbar Kabir sure  must  practicing what   preaching your point    disturb  that Mohan Bhagwat   final word with  being even  member have always publicly opposed  personal laws which  against human rights    pity that  know this thank   Majumdar Like minded friends such  yourself   great source  strength have same feeling  Kashmiri pundits  sikh victims  genocide  have expressed  many times have deleted that tweet only because instead  NAGAR   wrongly typed always call  spade  spade  will inevitably always make some    other unhappy Every   child  even  baby   think conservatives should decide  dress code   children much right  become     have   much possibility   have that case   able    thing does your  always reacts   late    where     time athiest says  only means believe  Language   confined   dictionary blames     athiest    blame someone with  believing talking  compassion   victims   kind  violence  repression just  your information  have   privilege  sharing  platform with  Dawkins  knows that    rationalist pathetic that   major decisions   major political  take    cultural  Nagpur accept that counties move forward   faster pace under Fascists like Germany under Hitler  alway   disastrous path first    learn  difference between trust belief  faith then come back    will talk about faith really  total idiot    just pretending Munafiq mean  believer  means   pretends   with    actually against   wants  cause responsibility  find  what Vanzara means   dirty tricks  Amit French  thinks Syria   danger  France  believed that Vietnam   danger   Asians  dangerous There  some   trying  undermine  gravity   letter  calling   political conspiracy Vanzara   some remote control  many years    talking Eagerly waiting  further details does this  wrong  wrong  some  leaders  visited Sadhvi   Prohit  jail  show there sympathy when France refused  join   Iraq Americans hated them  even renamed French fries  freedom these words  from Turkish Farsi Arabic Urdu  Hindi  based   dialect  have assimilated trying  damage  more country explanation  every thing rapist sadist murderer gets only three years sentence   reason then some thing  wrong with Kerry knows that  country   world  used chemical weapons more than   Vietnam have  strange sounding surname   suppose thing  never  perfect thing   sure  have  read  ideologue Shri   Please read  bunch most  ththe superstitions Shri Dabholkar  fighting against  prevalent  Muslim community  They should  banned read history instead  taking these myths seriously such books  written  only poets like know that  make false allegations Good that  have more opinions than   asking    what  have been doing since  many realise that  honest  right answer   question suit       some thing When  elders were going  jails  Kala Paani most probably your ancestors were licking British  just shut good morning Alright Here   Tell  what were  asking myth means some thing that  actually  true  believed   true  some people over  period dear idiot   obvious know  thing about    interviews  speeches  YouTube Then  back thinks  India respects multireligous multilingual  tell Read   Richard understandable that some people   keep  sanctity  they   followers  those  were British collaborators such people should  arrest   behind bars They deserve Muslim brotherhood  actually  brothers  those  burn churches  Gujarat have spoken there Critisizes  Jamati thinking Must   Muslim audience heard attentively  most  them there  some truth  what   saying Many people   have  different opinion about  Modi give  this sermon  come from  family  freedom thank  your wishes  will  happy  know that   getting better   every condemn  killing   innocent Indians including those  killed  Kashme writers  totally happy with  copy right  that  passed instead  making such stupid allegations   counter  logic there  hardly  difference between them  both   have  same mission spreading both  them demonise  other community Give  communal version  history Incite violence Spread religions discriminate between their followers  others  want   just  fair Become  atheist like this thought would  have come     would  have been  communal  narrow minded actually  Intended  write must    missed care what  fundamentalists  reactionaries whether Hindu  Muslims think Hedgewar  once arrested    along with many others ironically   congress public although this    definition  secularism   imagine  must      Shri Happy Muslim League leader  ever arrested even  They were  because they were British Good that Tarik Fateh  against  fanatics   community    same  said about secular  fair bigots    communities will hate  with equal intensity communalist while    secular  true Indian first then  thing else dare  teach  patriotism hatred   worried that many   realising that some people  trying  take India  Nazi Germany your point  that  have much   choice  with Modi  very edifice  democracy will  threatened what makes  establishment most uncomfortable  embarrassed   secularism they will  happy    dropped Paki fundos  dying   Modi  Indian They believe  will confirm their nation theory  justify their bias  hatred Sircar when will  accept  obvious fact that    writer  keeps  self  busy leave aside  minuscule percentage rest will either agree  have  guts  disagree atheist  religions   same   against  very institution  religion agree with them Actually  find these fake token gestures rather juvenile they   brothers Some  same biased  communal thinking same crude  uncouth  look like twins Modi fans  take  break    Today Pakistani fundos  doing their   sending  same kind  insulting  abusive tweets frightening idea that   like      mental asylum   moving should    Muslim participate   form  Hindu Pooja have spoken about this issue   Rajya sabha Look here Roach your stance  dishonest biased inaccurate Pakistani questioning  Some guts What kind   shameless creature Nawaz sharif Today  have signed  death warrant   possible reconciliation  have proved  worst fears type that hates  only others  other castes with  your  community  feel sorry tell    find  convincing   willing  listen  reason practice what  preach Keep your views  your self surprised that  know that  much Urdu poetry  available  Devnagari this delusion that Indian supreme court  given  clean chit  your have  read these books    have this agree with  that there  many  pretend   secular  making such token gestures they have banned  kind  political activities  that  another story have  advice   ever thinks like that    KITE idiot     dumb that  understand that   pointing   gender discrimination  some statement recently  justice  given this lesson  morality only   girls    verdicts with boys English should have been  capital Right Prof Higgins wrong Muslim brotherhood  extremely reactionary     opposing   serving  cause  secularism sure that   only pretending   such  exceptional idiot Actually your just  ordinary some  stops only  girls  means    problem with  premarital     fair Dear judge  girls have premarital  Boys    stopped   will have  choice   married  that fine have never accused  Modi  rejecting  skull    like Muslim caps  whats   deal Those   banning brotherhood  Egypt  Jamat  Bangla Desh  also    suspect their human  this world Read  books   Golwalkar    thinker philosopher Hitler   elected leader   that enough    condone your point  what made   away from this word  that   gender specific know    most effective orator  Europe they   stupid because  they   following Richard Dawkins they   jealous those   stupid follow Richard Dawkins They only feel jealous disaster management agencies army  local administrations deserve  word  thanks from    They have done  good beyond possibility that Shashi Tharoor  ever  crass  vulgar   sophistication Happy Dusshera Shubho Maha Ashtami    sisters  brothers think  will have  problem  some  Amit Shah manages    clean chit Although  look probable both  times   right Talibans  Malala  done nothing  deserve  Surely this child  done some thing good that Taliban   keen  kill shabeeh  substitute tasveer  what  your problem with  word dont seem  know that hearts  neither Hindu  Muslim Hearts  only small person with  small mind small small heart   pathetic believe   feel sorry have  ever praised them Give divided Muslims   possible  must  crazy  believe that Every where   world   killing each know   have  grown   must  confess That  like    very funny clear about actually what  being opposed  need  draft  uniform civil code bill from  Modi okay  believe     going  happen These  empty words that  only harm  minorities really appreciate your  long   have open minds there   problem   have different opinions thankfully  will never happen activist friend Ashok Pandit  have raised  voice against this gross injustice agree  should  become like None  them  real democracy  should  also abandon democracy stand corrected  thought Modi  sent Amit shah    building  temple   know tomorrow   tell  that  accuse Nawaz Sharif  cross border terrorism because    elected agree more with  expect  better from mullas    duty   secular state  protect minor girls When  corrupt politician  convicted invariably  party calls   political conspiracy have done  some will express  opinion only where there   possibility  more than    know they  mass murderers YouTube Watch some have been doing such things   tell  have  ever raised your voice against   Bajrang belong   school  thought that turns  person  compulsive lair Could forward  message that  have hate Muslim extremists  Jihadis unlike   will stand   worst communalist  your because thousand     relief camps  only from  particular class  people that    afraid        whether     Actually   whistling perhaps  those encounters were real   those  were killed  Gulbarg society  Naroda Patia  committed suicide Modi said that   fighting with  because    that slowly  surely  hands    reaching Amit shah send this wisdom  your  friends think that    opposes Modi   secular  must    very funny have learned about Islam  read Torah Manu smriti  will learn that   them  uncannily similar that     rare most   commissions after most   riots headed  Retd Judges have accused    least some extent This Pakistani  Aitzaaz Hussain   author   book thousand years  Pakistan   humour think this about   them     them   same tell them   their carbon copy   hate other communities  feel nice  proud after every when  wrote sorry Bhai  were  making  equal partner  family property  only being nothing find  what such organisations think    them have burned  effigy   time  another just  reminder some churches have been burned  Gujarat Karnataka  Odisha thank  very much stupid deserve    grow  sonny some  really wants  know what ever    best  answer    intention   insult then     rude there   need   false allegations against  since there   dearth   true ones very happy birth    Jagmohan those   demolishing  they  different there   opinions about  Only  sick mind  justify  killing  innocent people   part only  total idiot  think that international politics  nothing   with India Dont forget that India    Enemy list   Qaida Their taking over Syria   state will   good totally Saudi Arabia   fountain head   extreme right wing Islamic ideas   west utter  word fail  understand what kind   people like  have   have  tell  that this   sarcastic surprised that   that  gassed millions  Vietnam  Combodia  acting  pious seem have very limited understanding  language Read  that tweet  some  educated honestly mean   have  support Simple  long  Islam   mullas  safe  they    that what   about  These Talibans were also created     bombing churches have always stood against every Muslim Jamat that  even remotely   know that  your Arstoo   Urdu word  Aristotle  Aflatoon  Both  urdu unfortunately  world   choice between very     believe that  Qaida   worst danger Great extent    forget people like Martin Luther king Noam Michael Moore this  when  where this  united Most  these Sheikhdoms  American Anti Assad jihadis  burning churches  Syria They  supported  both  Qaida survey  based   percentage   retuning   lost wallets  most honest city   world  Helsinki  Mumbai entered Sindh    return   time because  uncle   Baghdad Hijaj  Yusuf  dethroned  killed there   difference between   Muslim communalists  want every    secular except themselves gives  great pride that  international survey  declared Mumbai  most honest city   world what makes such  frustrated  unpleasant person come from  family  staunch nationalists unlike Muslim league    have always opposed nation theory Arabs have never ruled India Terror   three kinds bomb terror  terror  will find people from  segments    another listen mister  appreciate Pakistanis interfering   domestic affairs right   washing dirty linen  public Retd     damaging  dignity  Indian Army Every terrorist justifies  crime  calling   reaction   great injustice done  people   centuries have said  many times Particularly during Shah Bano controversy days  return   couple  fatwas they   sides   same coin  Preachers   same  nation theory have  seen that Gujrati film    sure  must  very good Since     official entry  best that applies  every religious person because  believes  articulates what  actually that    problem because problems    different intensity importance  magnitude that only tells   have  read alright Give   other Lunch     this finest films Indian  ever produced  sent undoubtedly  will bring  Oscar   country tell this  some YouTube watch some   interviews taken  Pakistanis  feel ashamed  your self idiot  their  thing like false fact   beginning   faith which   blind     blind dard  disco  meant   absurd   film This   demand   script     intentional have  serious problem with terms like pathetic that  creep  nobody like   trying  create  illusion  empowerment  being rude agree with barley  urdu   pronounce    English this petty  mind   become  wholesome  have   understand  great must read  mercy appeal which  available     will know against Hindu code bill which   first time  history gave  least some property right   daughters must  joking Read their Guru  writings  till today believes  nation theory have  friend    difficult  believe Please give   least  month   over conscience because  have  What will what makes  think that     explanation There   harm  being  nobody   forget Thanks  this unsolicited advice   made  obvious that what kind  inferior values  have  your life this  interesting  think that only communal  bigots like   honest Shops looted houses burned killed raped lost thousand languishing  camps   GREAT Every   child  even  baby  raped some where    think  conservatives should decide  dress code  children compare  history  Congress with  history   undoubtedly  answer will have equally intense dislike  Jamat EIslami    dislike  communalism  pathological first     against anti nationals    divide Indian masses  communal grounds  anti national fool   asking that Muslim gentleman that  respects freedom  expression    Taslima really    over  wonder   have reached this level when Galileo  claimed that    earth that  orbiting      based realise that what  called  also  based  facts some  those  want others  respect  freedom  expression   willing  respect yours  vice versa congress   kick          know which party  recently kicked  senior leader where  hurts honestly agree with have done  repeatedly   disappoint   communal Muslims hate   much   communal Hindu like think  care  these jokers Actually  their stupidity crudity  vulgarity they make  feel rather superior brother    really point  that like Arundatti  world     Taslima  What   have   about shocking   that  some people have such  mind    problem  across   segments  society your forefathers were kind enough  teach   much then     ignorant  they teach  history your message  come   wrong that  true then this social organisation  branch that pretends    party need even  last allies confusing  with some  else    Advani   saying that  will never nominate those  killed represent  those  killed represent  oppose them together happened  culprits should  given  extreme punishment  nothing justifies communal carnage have   where  sick people like  belong   mental asylum Your mind    national shame look  such crimes thru  communal Would  every time hold  whole community   rapist even    true those rapists should   most strict punishment  dont justify killing  innocent people those  cant  your point  view  helpless they damage  part   brain  ever  teaching what  pity that instead  showing  concern   victims  this carnage   using   prove make  very  that   society compassion humanity  love have diminished   situation  predominant emotion  hatred sorry  stand Thank stupid fool  English    adjective which  inherent   noun Like dead pathetic that  major decisions   major political parrrty  instead   parrrty taken   organisation Janzeer  word   nothing else  least improve your spelling  pronunciation Modi  indicated disinterest   ship only  bring down  level  dissent with    other  leaders only difference   rest   communal riots  that   change    mentioned   commission report those were mentioned  every commission  almost every communal riot except   cows problem with muslims like   that  love Secular Hindus  hate secular grow what  nice  sensible approach  totally agree with first Padma award  given   during pleasure  read good language   have differentiated between Fine   Honestly Pritish hats will welcome such    being  secular state  terrorist will  treated   Whether Muslim  Hindu only Jihadis    kind  fanatics Your question  biased thats     part   problem  solution Legally   possible Govt    right have  love lost   present Syrian regime  those  want  replace    Qaida people That   acceptable Indian  caught  Syria fighting  Jihadi  Indian citizenship should  cancelled   should   persona  grata have  point   worst violation  human rights   Saudi Arabia    their best friend share your point  view   almost  regimes  middle east   only undemocratic  extremely regressive really bothered about human rights  democracy  come they have  problem with Saudi Arabia  Kuwait weird that  wants  bomb Syria because  does  want Syrians  bomb Syria forces that fighting Syrian govt with  help  hard core Sunni Wahhabis with  Qaida mind   want them fake    Ramchander Guha then   king Assad  unfortunately those   rebels have   Qaida mind   ironically   supporting them upset that   against Muslim brotherhood  Egypt   Qaida  Syria  crazy   danger   world During Soviet regime   created nurtured helped Talibans  During Assad regime   supporting  Qaida  Syria elected because   perceived   totally different from Bush  attacking Syria   proving  voters wrong today John Kerry  calling France their oldest ally forgetting that they hated France   joining them  invade Iraq know  sure that there   truth  this allegation should  join  Indian city Bhatkal name with  name   terrorist  should only  called Yasin what   difference between     gave  communal statement   giving they  some unhappy defeated bitter people  their personal lives   twitter   outlet  their  pity them they   very unhappy frustrated bitter people  their personal life   twitter   group therapy janmashtmi Holi Diwali  christmas they   religious  they   part Lets    stand   sports   women  India officials have  right  endanger their future  India dignity this   mind  that gives   name  your whole community  then  complain  some must  that people with  sense  humour  very fortunate find Life easier  interesting that case Mukesh believe   genuinely feel  that  have such  limited world view   much What  pity welcome   club Hari Iqbal died   years before  partition have gone  many platforms with   friends   feel every   only taking political mileage from their read  history Andaman     ancestors  native will tell  with respect  reverence this whole world    against Muslims except some fanatics      Islamists except some when    that chemical weapons      okay   only asking  super powers  away after committing such acts suggest what  have  said  draw wrong conclusions  opinion about Aurangzeb   different from yours have  ever thought that inspite  being  most regressive regime Saudi Arabia  never critisized find   your    Aurangzeb commander  chief   book   recognised read  books   guru  mentor   Shri Golwalkar  will    answers have  reason  believe that     uneducated petty minded communal late Dabholkar   true Indian   true friend  every Indian  wanted  save    from  darkness those  demanded   Pakistan were never with freedom moment British gave them this gift  being collaboraters banned     greatest Indians Sardar Patel  accused them  GAndhi those   fighting with Syrian govt  hard core Islamists West  supporting them   they  once supported  Talibans this   only language some people speak  understand Some times  becomes imperative  speak them  their language country    wrong official policy make   them   same country  great some people think that they  intimidate   abusing  they have  idea  rude know that Shaheed Bhagat Singh   Marxist   written  article titled country  milk kehte hain  nation   National anthem  qomi what  your problem   accept that    atheist  want  stand   religion forget that from Akbar  Aurangzeb their commander  chief were always Rajputs   were most  their commanders justifying   only asking  there     rules   east  another   west wonder   experts  gone  Vietnam  count  many thousands have Americans killed  using chemical course  bother  bothering  need brains Right agree     partly  atheist  slightly pregnant hafiz Saeed  positive  must  joking      bored with this discussion that  have deleted really   decide what  feel more   contempt  pity follow  does  mean that  agree with Some times  follow some people  twitter  because  agree with them  only  know what they missing  point Precious   most precious   calling women  commodity  human beings thankfully   people like     true representative  India believe that people  born only according   wish  Allah what  wrong with       unfair  believe that  have  read     about fantastic idea Most probably  will  told that breathing   that  believers  also inhaling  unislamic should  thankful that  Saudi cleric  declared only birthday parties unislamic   births Ofcourse  need stronger laws faster justice  along with  needed   mind   healthier value superstitions late Dabholkar  fighting against  prevalent  Muslim community Taliban  mindset   same  prime emotion  both  them  hatred some times  need  tell these cockroaches where  come  what  their shut   follower  those  were British collaborators   from  family  freedom honesty  must tell  that  consider myself  scholar course there   certain commonality between Dabholkar  Gandhi Both  them lived  died  their murder   Dabholkar   committed  only  gunmen   mind   Some people should  some introspection believe that  India   most accommodating country   nothing   with true Hinduism They  like Talibans only true tribute   give  late Shri Dabholkar  carry forward  mission against  kind religion  devoid  superstitions  irrational beliefs  when  expose them  hurt accept  most stupid idea  most regressive thought  what  totally unacceptable   voice  reason  rationality shame that  Dhabholkar   relentlessly fighting against  superstitions   society  killed  Pune surprised  know   along British citizen calls  self  Sikh nationalist    nation British surprised what makes    really want know what  have said  done  deserve this same view will  expressed differently  people with different upbringing different aesthetics different values wrong these words  palindromes right then tell   Muslim fundos dislike   much       keep getting fatwas year after year People  inferior quality  incapable   discretion  Crudity  vulgarity  their sustenance find    difficult  wish those   loyal  those  were once British agents  other words they disconnected     leave      interested     maen maen loss   lives   navy    tragedy beyond words  deepest sympathy with their families Heart felt condolence only sing  have translated  simple Hindustani   recorded  used  Ashutosh Happy independence  Today bury   hatchets  together sing  national anthem from  depth    Hind Obama says     Modi puts   This comma  totally original parliamentary party  Modi have different points  view         decide which   right condemn    strongest possible   with  iota  decency will condemn  killing  innocent people Gujarat  ruled  Modi  made  redundant  giving  different opinion  food bill   started doing  same  Center Find  what words were actually used   After that    sense fairness take back your words have  idea    feel that    sick   very badly need psychiatric friend Come   house with your thali tomorrow   must attend  Holi celebration next year same   brother what sacrifice   willing  make thank  brother  wish   same Warm regards really believe that Bangladesh   result  India sponsorship  some terrorists   erstwhile  Grow bother about Every member   family   house  Mumbai Hope   safe facing internal terrorism because your govt  army  sponsoring terrorism  India   Snakes bite  masters hostility towards India comes from  package  ideas   mind  that  leading them towards total overwhelming majority  Hindus  secular   suggesting  being secular they have become anti parties like Jamaat believe  democracy They want   democracy only  exterminate Muslim right wingers  these countries  responsible   Given half  chance will   same thank    your   more sensible than very irresponsible  your family  friends   have  that they have  sent    mental asylum congress ticket   nominated   President  Rajya Sabha Such members  considered independents this  sick  perverse mentality that   bane    only blame others  some introspection told  that such incidents have  happened   once  many suggest that  communal parties including Jamat should  banned  India People like  will oppose considering women human beings Opposing honour killing Letting your daughters  educated only about Jamat  deoband   about  bajrang   Bhonsla Military school lady   banned from giving  lecture   scholar  retired professor  Islamic Know Islam more than stand corrected  tell  what   meaning   indicate that  want  some thing else what right Muslim fundos have    freedom  expression when they dont want  give this right  liberal Muslims shame that Chennai police  buckled under  pressure  Muslim bigots  canceled  lecture   liberal scholar Fatima love  country  dislike those    spread hatred instead    against  communalists have  said whether they will reach that stage     only saying that logic tells that this what plan have come   conclusion that  using Modi  they will ditch  after   excuse will accepting that   moment what ever    reason   communal think  care  these pygmies With   iota  anger  have pure unadulterated contempt Jinnah wanted  save Muslims that    went  partition good    they safe  Pakistan believes  spreading hate   possible violence  working against India   basic ethos your ignorance  unbelievable   read bunch  thoughts    Golwalkar    philosopher justify  genocide  another Tell  what have  done   victims   only  them   cover feeling  that  have  problem with Vande Matram  respect    national song  suit your bias surprised that  know   oppose Muslim communalists    Togadia  Owaisi  same want partition they wanted minorities  live with   rights like slaves  undivided India those  Muslim league accept Gandhi rest  them   Hindus like  also accept Gandhi given BHARAT RATAN  Atal   Chandan Mitra thinks   deserve    right Chandan  Vajpai promise  utter more than  single word  moment   over  shock  What  shame Moral   Chandan outburst   want BHARAT RATNA  retain   never   word against have translated Vande matrem  simple Hindustani Ashutosh  used   film Face  fact    bigot there   difference between Togadia Owaisi Pointing   causes  cancer   justifying cancer  have  determine  possible causes  terrorism  eradicate Nath Singh  going      Hope  will  make  request  root Pointing   causes  cancer   justifying cancer Same   said about terrorism  have  determine  causes  eradicate very proud   Kabir Best wishes from instead  mourning this unnecessary loss  young lives   using this huge tragedy  target Shame there    Modi  gone  Godhra  very next      visit Naroda Patiya  Gulbarga brother  asking this question   putting Dawood  Gujarat govt   same category Well  that  your opinion word that means MASK  NAQAB what    started going  This kind  history  taught only beside being communal   wrong language   hide    behind  burqa  Right word  parda group   touch  extended legal help  some families   Godhra train   ashamed  yourself thank  brother know  hilarious  rather difficult  believe that some people  actually told  that    check  Face  fact   fair  objective tell   name   historian   given  this perception those were  freedom fighters with  immense self respect  power could make them  what they   believe last progeny  bahadur shah great freedom fighters like Laxmi  Nana saheb  made  their leader Hindu  nationalist   fine  Hindu nationalist means Hindus   This  nation theory Modi says  wants  grow Well   means intellectually  think    good those responsible  godhra should  hanged Would   that about those   responsible   later genocide have nothing  contempt  these jihadis  Muslim terrorist groups Face this fact   secular   communal agree      strength   what  considered    obvious that  idea  RIGHT  rather different This  lacks class Keep watching Every time  will open  mouth  will   foot Every form  life  valued  form  life that used    places like Gulbarga society  Naroda Patia want  change  topic  understand Only  follower  Jinnah   terms like Hindu nationalist  Muslim nationalist These terms  rooted   nation theory Hindu nationalist means Hindus   nation  your loyalty  there  with secular Muslims insisting  Sharia   secular society   right  last week  have said this    what next hamza being  Pakistani    your call  comment   internal  better  your  home Modi   turning  pages   Tolstoy  peace    hilarious Indian   nationalist with   extra must accept that swami  kept  words    grown deeply touched  Modi  confessed that    dies  feels  what more Otis funny that supporter  killers  making this statement proud  your ignorance Have  heard  name  Raghupati sahay Firaq  Krishan Chander believe   senior Gujarat police office      accused   charge sheet Those   nominated   president   from  party   particular constituency Aamir  send lakhs   Shabana  collecting funds    have pledged lakhs each from  MPLAD funds that same Hemant Sharma   caught stealing   shop thing  happen  your  called lion cant come  think    chance then  know  greatness  India this should have been decided   courts That   things  done   civilised society only opposing fake encounters  particularly those which were staged  glorify  political read there Particularly   Golwalker because they were against  nation theory that Jinnah   Because unlike  they were freedom idea that talking  corrupt  tainted Gujarat police officers  polarise  Really course there  Muslim fanatics   secular people should oppose them    this  joining Hindu fanatics work  peace  harmony divide people   name  religion caste creed Love India Love surprises       dont  find   some senior Gujarat police officers  behind bars this shows your total ignorance about this topic  read  little Believe     died true Indian stands against  kinds  communalism     nationalist because    communalist what kind  dishonest people   that   denying  genocide  long list  fake little  know about    feel  because  seem know very little about every thing they  your people  mine  consider  reactionaries    matter   whether they Hindu  Muslim there   judicial process  accused will  murdered  police some call jihad their nationalism some hide their worst communalism behind their false nationalism  condemn both  them obvious  whom  bigoted communal  sick minded people like   even deserve  contempt believe   civilised society   only  court that decides  guilt  punishment police kill  custody confusion   hota   Kuchh sochtay hain   Nahin freedom  forefathers went  British jails  kala Paani when most probably yours were licking British your language reveals your either  both    wonder  some important political leader  gone  meet prigya  jail pity that  even know what  true  have nothing  sympathy believe   hatred that makes  totally blind strange govt says    terrorist  believe  when govt says   Killed  police custody read    nation   bunch  thoughts   philosopher  mentor    Golwalakar will  feel happy   ghastly       those   distributed sweets when Gandhiji  assassinated spreading hatred Really  that case Owaisi  Togadia must  spreading nothing  LOVE    what  your since when disagreement with  version  those Gujarat police officers    jail  their misdeeds  become what makes  sure that   traveling with them  actually their bodies were  planted next   body where   need  courts When police  passing Guilty Verdict like  judge  killing like  executioner  condoning what   that people   very easily brain washed Into believing  thing even  justification  custodial murders interesting  believe  when  acts against those  like When  acts against those  worship show  efficiency  achievement   brownie points from  establishment plus serving  cause  fascism rise above propaganda  This same   moved against Bansal  Ashwini certainly creating  panic  some They  sounding scared  desperate Time   exposed established  even    does  justify  fake encounter  should have been brought   court surely   equally stupid There    fringe  every community   sensible person blames  whole community   acts  this strange that  take  words  gospel They  criminals they will  what suits them have seen many cockroaches that more intelligence  better manners than Lowering  marriage     should    question Actually  should   every Indian supreme court  said that when Gujarat  burning Nero  playing fiddle  wonder  they were talking every investigation    come   conclusion that    fake There   controversy about UttarKhand  become  national tragedy  many dams  called devolopment Alas they ignored  envorimemtalists warnings calls some   question about Coalgate   honest    calls   about  cold blooded murder   dishonest Really what  think  those  unconditionally  totally reject that brother some   commented that Pakistan control     control Naxals  pointed just    emphasising   much   upset about  particular incident  that  really intends  forget Kargil most dangerous  those   petty mean down right selfish  full  negativity pretending mushrakeen mean hypocrites  Emglish  means  accept   singularity Words  travellers travel with sailors merchants  performers    wings  songs from language find  office number    touch with them people like  unwittingly give reason  justification  extremists like Naxals  rejecting tthe middle   road people Naxals  hiding  deep jungles while extremist groups  Pakistan have Their proper offices   cities with their sign believe that Hajj subsidy given   govt  indefensible   secular state  should stop know that  Chopra passed  thorough gentleman  lover   condolence   family know that  Chopra passed away  thorough gentleman   lover  condolence when   coming back  Mumbai Hindi dictionary carries  least words that  rooted  Arabic    make Hindi such people  victims   self esteem  lack  self confidence They deserve  your anger Nawaz Sharif should demolish   prove that   really sincere about developing better relations with would  please stop commenting about  history    totally misinformed Sanskrit   mother ship   fleet  languages including Hindi  urdu having respect tolerance empathy  those   from different religion  race  language least  Indian languages  written from right  left urdu urdu  central Asian language  have never heard  read  thing more absurd than this sure that    saying this  language known should remember that language    script   write Hindi  Roman  will remain Language stand corrected  even after dropping Russian from  list  argument holds water these    comments These  comments  some Pakistanis  have only forwarded them this   criteria what would   about French English German Russian  SPANISH They  have Latin script both urdu  Hindi have grown from  dialect called  urdu  around hundred years senior retweeted  couple  tweets about urdu only  underline  absurdity   situation Actually urdu   indigenous Indian this   tell   much better    inside    ever dare       will These  three different persons   some times  found   same body started typing  message about Rituparno  dear friend   mistake pressed  wrong  ignore this sure these bytes make  impact  impressionable  find  rather flattering  difficult kind    call  master  bytes Actually there  nothing exceptional about used  shave  beard even when   young  want  beard   face    have thank   your advice  following Isamic values   poetry    happy following Ghalib Meer  liberalism Women   world beware Love devoid  respect  Respect with  empowerment Cricket      things left that arouse reverence    hearts Please    pollute this thought   educated enough  know  difference between state govt  political today   religions should belong tothe museums history books   lectures said that about coming  Pakistan  Faiz mela   symbol  peace secularism  human rights  Indo traitors   found  every community   average Indian Hindu  Muslim loves  mother because constantly   attacked   pack  bigots Mostly  ignore them  once   while  them  their shameless    search  messages  read what   said about  death should have checked  tweet about Sarabjit before making undue have already expressed  opinion about those  were niether with Neta   Bbhagat Singh  with Gandhi peole check  tweets before making these stupid  sick your first name suits Prejudice  made people like  deaf  blind thats   know what  have said about deeply ashamed  what happened   Pakistani prisoner   Jammu jail  expect such demeaning acts from please educate  what  sharia      many Muslim countries  many have implemented Muslim league   British agent     Both them kept creating hurdles  Indian freedom movement question  whether  genuinely feel  about both  genocides   mention   justify that    issue  want  know what     freedom  India  honest answer  NOTHING your ignorance  Those afghans  central Asians  attacked India were also  Aryans response   obvious   What   think  atheist would think  such    always  test change      utter  single word against  British  From Indian born     composite culture  Awadh  loves  that  beautiful about  From Gita  ghalib Like  anti national Muslim league    asked their members  boycott quit India movement  they pretend   Desh uncle Ansar Harwani   british jails  many years while your elders were doing parade  some  shakha formed   these  called Desh bhagats never even passed  resolution against  British till Hindus  Muslims  made Bahadur Shah their leader Their mutiny  under  banner  that  Mughal banner will support such   because  practice   daughter   will inherit equal shares  what ever course   proud   that  great about  thousand years  Indian culture  Veda   heritage will read your version  history  Name  author Believe   have nothing against  Actually  enjoy meeting find  very amusing whole heatedly agree with scholars  people like Richard Dawkins  Harris scholars  only people like Richard Dawkins think that  communalist whether Hindu  Muslim  intimidate what makes  think that Swami   only    question others lineage your statement tells that  know even largest population  Muslims    Indonasia never attacked   foreign Muslim    they converted even when almost every  disagreed with Galileo plant earth stop orbiting Swami  niether have Dravidian features   idea  Aryan blood  enterd your Muslims   world   descendants  converts After  this religion  only years that your surname both Jinnah  grand parents were Hindus They were second generations converts     important swami grand father    tell   consider Jinnah apna  Come   grow every where    ahead Every citizen  equal right     court  justice What ever  said here  have been saying     Hope  have learned some introspection from these know beyond  doubt that about people  given mobiles   paid  monthly basis  spread hatred  communalism condemn riots  those  cause them  those  stand  those  cause know  then  will never know because   obvious that  want  know Muslims  want sharia laws  Britain should  sent   countries where these what  pity that instead  condemning fake encounters   condemning  That shows your country persecuting    being  atheist    condemn    strongest Jamaat  totally fascist  have nothing  disdain  contempt  such become  member   association    script registered truth  thatShabana  sent   during  third front govt  then truth  never been your real personality forms  ever before    remains dormant because  other pressures  ultimately  takes atheist because    willing  believe what appeal   common because   idea  illogical Given  those  even know whether earth  flat  round about  there  light   title  your book should endeavour   more just fair  secular society  that    need  some introspection waiting  another poem from this sensitive poet about  police officer   beaten   suspended have written  poem   concept   ideal  read   Farhan only educated Muslims  decent person should identify with communalists  hate problem  that people listen they  ostensibly listening actually they  only waiting religious people only quote some  else   time they have spoken  length  this topic  Rajya according   when  condemn  group  bigots   positive  when  condemn another group  bigots there   misunderstanding  have addressed only  Fundos   peace loving citizen  Pakistan Paki fundos crib that western powers want  destroy      doing same  those   weaker than Your minorities Hugo Chavez  have lost     born    leader   gutsy Savior   Always called  spade  spade feel honoured that  have given such importance   work  would like  read your paper  Kala thank   read That  also       planning    third ultimate proof your secularism  that  bigots  your  clan accuse   pandering  appeasing have more opinion than Read that message again  understand have your parents  taught   manners What  pity your communal thinking expects that  criticise your favourite hate mongers    kite they  your brothers  communalists like   them   similiar that they look like twins  this case triplets according   boycotting  poor auto driver only because    Muslim  Gandhian   really that foolish come with    city  India   what  strong connect  have with  fellow Indians Poor Togadia     speeches  advising  crowd  boycott    hire even  Muslim     hate embarrassing    secularists  both communities that  Govt    arrested Togadia agree    togadia    wants  create communal divide   anti national  should Next time when  give   lesson forget  write  with  Capital   will lose five marks first    some introspection    secular  least  some extent  possible  after that give wisdom  others Yasin Malik should never  allowed   come back  India  passport should  revoked should  made  persona wrong  kept following  bringing  issue till    intend    same  case Hate speech   only obnoxious   crime  Irrespective   caste creed community  hate monger should want  Indian   sorry  misdeeds   either sick believe that hajj subsidy   fraud that should  stopped first three identities    friend what have  said that  have  found logical thank   such kind  generous thank   friend have already done Read think Asking   arrest  compulsive hate monger Togadia  divisive politics  need     dictionary promised  will never happen   repeat  same words  those  have  will never happen this your justification  massacres saying glorifying massacres people  economically boycott Indians    anti national activity have  seen  reaction  Owaisi   blind deaf     every channel Read  tweets  that time really retarded  pretending     life  have raised  voice against bigots like channels have   token protest   politically correct  like Owaisi persue Togadia story   logical When  criticise Togadia  Owaisi  reaction  both communities  uncannily  same agree even Pretending   endorsing Modi   trying  best  damage that false image which Modi  trying  create  Diabolical unconditionally reject  that  against  constitution  dignity there   frist  second  have  oppose  communalists Every communalist  anti national Some times  pity people like Akbaruddin  Togadia They  condemned  live with  much venom  crudity with read   tweets   avail     this wrong impression respect your   thinking Young people like    true representatives  India matter  either      place  picking  choosing    should oppose  kind  communalists Togadia  making such hate speeches  more than decades    serial hate monger says    nonbeliever  believe  humanity love compassion  quest  knowledge Ashok Chougale   while trying  defend Togadia   gather courage   that    stand  hate speeches Have heard  proverb   choohay   billi wrong education wrong information wrong perspective wrong values   source  communalism fair minded person Sunil  want   condemn Togadia   hate speeches   those  stand pity that think this  actually people like Akbaruddin   worst enemies  their have  blood  freedom fighters   veins   that proud Indian   written  song  Indian Military Academy seems  read papers watch channels   tweets  have condemned  every that case    giving   sermon dear bhatijay have made many statement against That communalist Both        Tagodia  same Sandeep even  know that   making  false accusation   incapable  being honest where were  sleeping  have condemned Owaisi  almost every  channel    condemning Tagodia with equal shame that   trying  defend  hate monger  asks  crowd never  hire even  Muslim auto ricksha sorry Imran saheb What   calling Bhai   actually  poisonous speech Every  should condemn must watch different speeches   TUBE   only talks  massacres  with extreme glee have condemned Owaisi times  willingly will condemn  times again   condemn Tagodia Bigots whether Hindu  Muslim  dividing Indians  communal lines Ultimately both want  cause  same damage totally agree with   friend  future  country  bright because there  young people like speech  graphically describes massacres   particular community with great  this  then what  hate speech speech   advising  crowd  boycott  community     then what  hate speech there   difference between  hate monger  another   them should  behind bars Watched some speeches  Praveen Tagodia  YouTube   surprised that     arrested  making such hate find  rather amusing that some extremely communal jokers keep asking   prove  secularism gives cover  refuge  criminals   criminal whether   known   police officer wholeheartedly agree with    responsible secular liberal Indians must unitedly oppose such regressive what  happening  film  absolutely unacceptable  believe  freedom  expression should have even  iota  objectivity  honesty have read    would like    honest  fair enough  accept that   right Wikipedia  search  bigamy against this custom   have spoken against  from many public platforms English obviously   honest Imaandar   urdu word  Hindi  nearest word  Satyavrat think these mullas  pundits    that religion  their monopoly brother says   Hindu male indulges  bigamy only  first wife  challenge they    position Dear Raman what about   fail  their lives official site  find   your   have  believe   ahead  find Indian irrespective   caste creed religion   accept  superiority many  willing    that daughters equal partners   family property  business seems  know what   have said   life  have always publicly owned Those  dont want  give equal share  their daughters  their business  property will oppose those  deprive their daughters from equal share   inheritance have  moral right  talk  common  uniform civil code have  problem   already living uniform civil code  daughter   will  equal share  what ever  have according   official census report  percentage  bigamy  higher  Hindus than  Muslims Please confirm talking about Muslims What   problem Muslims  advices  criticised uniform civil code   both  daughter   Half  property  business should    condon believe  case   conflict between  personal   constitution  India  latter should many know that with  community Hindu  there  more than    personal laws  different willing  show same consideration   atheists   talking about  religion  public that   living with such wrong values  honestly believe that  must broaden your mental horizon some parts  south India marriage between  niece  maternal uncle  acceptable  Haryana       make People   accusing Ashis Nandi   statement that    made actually dislike    liberal society  still   large secular inspite   communalists   hues  strips trying  poison  minds what makes   that    either secular  fair  true    fair only have said that  believe that  religion gives equality  women misquote   only real value  justice  That scum   society while  have  blood  freedom fighters have crossed   limits   will have  take legal action against    will know about  very soon have guts send  your address  would like     libel feel sorry     very inconsiderate  your family that they have  sent    mental what  happening  Visharoopam    condemn  trouble makers   strongest possible thank   will share this compliment with Alka Hariharan  Raju those  constantly question others should first prove their  secular credentials  condemning  bigots  their justifying  stand that daughters   share  family property  Shame means     including  share illiterate   know  vehemently   opposed right  family property case   entire police force  that lady police officer  apologising unconditionally thought   against hate speech female police officer   written  outrageously communal poem    sacked This kind  mind  should   tolerated thank    said that   take      town     take  town feel  that  think this  about  fellow  have only  ummah  that   Indian nation some people  secular Indian  intolerable  very being makes them ashamed  themselves  their Owaisi have  right  claim    voice   whole Yours   voices  only   fringe Suddenly both Hindu  muslim bigots have made  hysterical    holds barred attack     rather would have called Bhagwat  Asim Azmi Owaisi Tagodia birds   same feathers   because  like personally invited Taslima  Mumbai  along with  like minded friends   public never fire  first salvo  some times some people have   told that they    only     rude distanced  self  never condemned Godse with  passion   strong enough true that Godse  with  some point  time    disowned  ideology look Once again  have proved  opinion about your  right talked  PRATIKRIYA  some other person  know admire  ideas about  inclusive society secularism  nonviolence chance saying that  agree with Godse  condone mahatma Gandhi would love        Indians    know   those  have oppose    Golwalakar  chief remember  many cockroaches  have seen with  higher  than yours believe  religion   secular  liberal    secular  liberal inspite  religion  because Muslim right Wing leader  Asim Azmi  said  agrees with what Bhagwat  said about asking  similiar question about tagodia Ashok singhal Swami dharmendra   Bharti what will  prove Pakistan   Islamic country Till recently Nepal called  self  Hindu rashtra would  like  like Both  them  following  anti secular anti liberal anti women  anti ideology liked  comments read them   Khush   Khush sure   pretending  body   actually that   difficult  believe arunav    think    rightist What  your definition Once again   proved that  right wingers have  same mind  they hate women    name  honour subjugate  enslave them course there  such elements  every   should unitedly fight with them instead  fighting with each other what about   with  liberal  progressive   country  against them could  please name  Historian  haver religions  equally beautiful then what   special about  they   then    wrong statement think that  will  condemn  course  have done   tweeter name  saurav modak  believes that every Muslim   Laden follower Muslim psycho called  Rushdie   Hindu psycho called   must  doing some thing right  upset both  bigots thank  future   Country  bright because   bright brave sensitive  secular young people like Muslim  hood   Muslim    like them  being     must  happy that they   power problem because  believe  their point  view about  league   Muslim leadership spoke about this issue  length during  maiden speech  Rajya Hindus   given   right  talk  behalf  billion Hindus Talk only  your self Today both Hindu  Muslim communals have sent  hostile messages   number  those  supported   much Good night right  both  counts when  think  only identity   person   community  every community   monolith   communal difficult    accept that there  some people  unlike      make  feel petty make Pakistan Jinnah  unleashed  worst kind  communal forces  could that country know what  done   minorities  Bangladesh Desh Sardar Patel  written  letter   chief  Golwalakar calling  responsible  Gandhi that   approves Godse  Laden    side  terrorism would   keen  know  views about  khaps believe ideologically    each others mirror Govt should take action against Owaisi with   delay  establish that  nation will  tolerate hate speeches from Bhagwat  chief   believes that Sexual crimes   urban there    crimes  tradition bound rural Just  thought  every   Shall   this facility  spreading friendship understanding  love  hate night Equally surprising   fact that before  mass conversion  century there were  Buddhist  India  birth place  buddhism could  explain     dare  pass even  resolution against  nothing from Since Ravi   seem   very particular about hate speech   sure both   must have strongly protested against Varun thank  Nothing  please  father more than that  wish  could  this about   your only time  Hedgewar  arrested when   gone  attend  Cong rally never       ever arrested condemn   life  have fought against  Muslims   they   same agree that revealing  hiding  identity   rape surviver  only     family believe that hiding  rape surviver name  based   unacceptable archaic belief that   lost Some  misunderstanding Shashi   shown utmost respect towards  girl  deserves   keep  anonymous believe   share your concern    fight this menace with secular values    anti Muslim must   MFSD  will  your answer know  name  commander  chief      second  Ajay Singh what stopped  from taking such  step after  learned about Naroda Patia  Gulbarg decide about  entire Hindu community  looking   video  speech    rally Exactly where  were during  Gujarat Unhappy angry responsibility      secular Indian  oppose every communalist including Owaisi friend every sane Indian   right   duty  oppose     whole community what  your source  information  which historian  have read most probably  will  believe   honestly  feel sorry  people like   need help NAthu  Godse  first terrorist  independent Babu Bajrangi  butcher    want more pracharaks    majority  majority  Bharat belongs  those  respect Gandhi true  those    should  immediately arrested  tried    must confirm uncle Ansar Harwani   British jail  years  great grand  Fazle  died  Name Muslim league   communal party  have nothing  contempt  them every   propagated nation theory  responsible  partition Muslim league     biggest Mughals good    history turn   into history Right because  have always rejected idea  inclusiveness  followed path tooth  nail opposed giving daughters  right  family That much  their Nathu  Godse     That much  their parties oppose call  league  That much  their Formed  till never even spoke  word against That much  their nationalism refuse  take  responsibility  educate     tell   that what  prefer  believe never speak against followers  Nathu   that your idea  secularism condemn Owaisi much before this   from  community justifies  communalist   wrong read  philosopher  guru shri Golwalakar books bunch  thoughts    nation more than riots commissions heads  honourable judges have mentioned participation  such organisations friend     want  eradicate communalism  will have  oppose   them  pick  choose honestly agree with   tell  would    same about  pracharaks talking     called  relief camps  helpless displaced terrorised people  child producing factories want  abuse    free        good idea that before          what  stand check  tweets  have done that much before   asked      obvious  that   against such hate mongers that   have great respect  thinkers writers like Hitchens  Harris  Dawkins wonder    call  tall Muslim leader Muslim bigots call   kafir bigots call   Muslim bigot  either case  give  damn  enjoy this unique Both  them  totally unacceptable  should   touched with  barge words  strong enough  condemn muslims   some Hindus  cheer Tagodia    they  billion secular Hindus hate speeches Modi Tagodia  Varun have made  terrible  that does  justify  hate condemn your statement shows your ignorance Check party wins from  particular pocket  Hyderabad like Modi from Gujarat  them    Indian Owaisi    worst enemy  Indian poisonous words  evil thoughts represent  Muslims  India need stringent laws responsible police fast track courts  most    society that  right know  name    anonymous     become  daughter  every Indian every young woman  India mute spectators  violence towards women  home   public places   also  responsible  what died   only  govt   police   whole society    every   standing   docks policeman wearing  helmet  rubbing late Shri Subhash hand       falls exhausted policeman  hamlet  rubbing late policeman Shri Subhash hand       falls exhausted  injured life  have taken clear  stand against  kind  bigots Particularly    Have  done that think that once married people should continue living together inspite  total Your ignorance  unbelievable  count  many times  have condemned such bigots your high  know your type Tell  what have  done  your life  earn  right  question others with    only  stopped   good  with   Says  away   from    Suit Only  good  with    stop   with   Says     seems more often than  they sell their guns   guys Strong laws gender sensitive police fast track courts   Society should learn  respect Stop domestic course  represent  Actually   against  very concept  faith whether religious  political Urdu newspaper  claimed that    opposed urdu false  malicious love  mother tongue newspaper  reported that inRS iopposed giving   mother tongue urdu  status Totally false  malicious propaganda Indian music  become    Raaginis  silent every Saaz   mourning  father king  dead dictionary Dilip Kumar means dignity depth sensitivity sophistication  Happy birthday Dilip society really needs people with intellect  courage like  Hope  meet  some brain    mind     will learn  transfer  song from    another death   know will  obsolete stripes  honour   chest   military officer  also called Feeta   exclusively  shoes  strip that Taylors   measurement  also feeta certain states there  prohibition while  other states there  bars  liquor shops   divided have shared  dais  Jaipur Where   read about  pagan origin  Christmas your comment  based  complete ignorance  sheer   speech about minorities   from Rajya sabha aanan faanan means   jiffy   lightening   fraction   second  very quickly read  tweet again without preconceived notions  have missed  point meant that    willing  stand   victims  Burma  gets upset when India stand    fair have spoken about Kashmiri pundits suffering from many platforms  front  that time YouTube  watch some   interviews given  Paki   help      your tell this  those mullas   least twice  year give  fatwa   other against   burn With   respect Aung    stand   victims   ethnic cleansing  Burma  wants India  stand every     craft involved which should remain  invisible  possible     reveal itself without only difference between  pauper   stingy person  that unlike  stingy  pauper some    money that google  interview  Barkha Dutt  NDTV  will know  point  view  this issue agree  have  idea   admire this quality  wish  those   narrow minded  intolerant could learn from your love  poetry  appreciable   need  learn  basic technique Read good poets will learn from works should  translated    languages   know Bengali should   deprived  Sunil genius loves good films should  watch CHAKRAVYUH Such films  made once     great movie Hats   Chakrayvuh    only  great film   major contribution towards building  more just Hats     only  great film   major contribution towards building  just fair   more decent about swears Dear   please confirm that  Pope  Really  Roman catholic  this   false propaganda poem   asking about  titled     latest collection  poems published  rajkamal often rather unnecessarily   into    While   easily avail completely understand  culture  AWADH  land  Ganga  Jamuna with  knowing both Hindi Given  chance  coward uses brute power against  weak   vulnerable  considers really looking  nephew  niece believe that    Santa clause   called adults Hello  Romney     first person  offer   condolence  losing  next presidential election Good   Romney Some  them  made    that   supposed  pull them towards your self     push those doors they open Some  them  made   pulled     push those doors they open these discussions    highest court   county  given  final Kasab should  hanged ASAP have spoken about      alway raise your voice against injustice when ever  where ever problem     Tell  when  your thank   such kind words about Recently   collection  published like Bravo Saina Very very proud   Thanks  doing this Rajesh Khanna   golden handdshake given  changing times   romantic   Indian ghurbat  originally  Arabic word   Arabic  means being away from  native place   urdu  means Rajesh Khanna   golden handshake given  changing times   romantic   Indian cinema  early Rajesh Khanna   gold handshake given  changing times  Indian cinema  early that   faith that   reasonable Where   show  respect  tolerence   atheist    allowed  preach      religious preachers develop faith   imaginary billionaire uncle    will  wealth    harm anyone except   self belief with  wittiness  rationale  sheer stupidity   often call  FAITH understandable that  believe that  have written Swades songs People like  just face facts know    leaving  thing behind   when   leaving seems   willing  leave  objectivity   your bigotry  only emotion   muster adulthood     defined   Read friend  have opposed this inhuman tradition  instant divorce from many platforms  many oppose  theory that tries  justify  marriage   girl before     adult seems Indian medical association  learned this remedy from    message  inconvenient shoot  messenger Aamir Khan  some immoral dishonest greedy  corrupt doctors   insulting  medical profession  many honest Indian medical association wants Aamir  apologise  exposing corruption  their profession That  really sick progressive writers group contesting   film writers     member vote Tomorrow       election   writers  These  educated  competent people learn    dictionary Good know this  make   haywire  what about  bike that   hurt today   tomorrow  That makes  days after giving this wisdom   going back please give salaam    hope  still remembers  many shers      take  email from Fauzia mujeeb could  please name those organisations  individuals whom objective  articulate about  reactionary element  your      have shahi imam    lost deposit   constituency that   cent Muslims What does  tell seems Anna  realised that  collect crowds    Wants  take advantage  Ramdev  called think    what  really  often than    same description coincidence that  places   world where religion  dominant   same where human rights look   world   places where religion understand  most   worms   early They  that  early bird gets  Great  what about  early worm Come  Yuvraj   this wretched cancer    stadium belief that    defended    evidence  protected   needed expressed Some times  feel that perhaps  dictionaries published  last years have missed   word called When  fanatics   community  community Thank  from  means    send  your email Warm regards pretend   Accepting what have been saying against mullahs makes  feel ashamed make  example  doing what  want others understand  sympathies with     named Japan    parents will  mentally  disturbed coward  tries  hide  communalism behind  facade   have  idea what  true difficult  decide whether    fool  lair  both  cornered  jamati  asking   name communal muslim orgs against  bigots  fanatics Beside     obvious Hindu fanatic  Muslim bigot   twitted against asked  jamati leader  name communal muslim orgnizations crowd also insisted   give these birds  still  love  spite  each other  price  guessing their species    pair silence  bird chirping Really  know birds chirp willing  understand leaves  totally puzzled   some Close friends  relatives whom  have chosen Aruna   suggested  right  believes  empowering  common  thru  fast track think  proof  Indianness   supporting Kiron  agree with their remedy should  want become javed Vikas Singh   There      like   this whole what  there that makes word     means  humble request have embarrassed  publicly  privately  would have told   expect much better aesthetics from Strange  true   days  short   year almost never  days  long  year passes    blink with democracy kill  rats   your house  movement  started well   gone berserk Docs      docs said    well  said bharo  perhaps they    well nomination      prez when cong    power    trying      already   since Your father     then  come    nobody     decency  both accusing  self proclaimed atheist  being pumped  about tell them that  were   jail Adult education  unfortunately        that   deeply sorry thank    must tell  that  mention  sukoon  really  pleasant Warm disagree with  point  view    that only those  agree with difference  they  demolishing  system which  undemocratic while here some people  trying  demolish democracy tweet  those scams because    total agreement with    because  agree with Lokpal will empower more than bureaucrats  will work    common People with  closed mind make  feel tired   what makes   sure that only  know what make   much more effective much more Courts more  common majority  with Anna  just   days back   CONGRESS have swept  local elections Lets empower  people thru stronger   fast track courts      will  dependent  bureaucrats Like    also against curruption  That  remedy  stronger seems some people  trying  drag this country towards total Many societies deny them even  right  work  they   their share  work will  much more than work   world  done  women  they  only Please read Gita   misquote    assure  that  lines  have quoted   from Gita Banning Gita Have they lost their this great book  wisdom belongs  only  Hindus    whole Every life   great novel that   will  abruptly left Death always comes before  last even  poet  both  father  Nisar Akhtar father kaifi Azmi have written such poems shakespearean actor   emperor think Mahesh Amitabh Naseer know  little more about acting than what  ever hope  Listen sing before   questioned hain rahi pyar    kuchh    pyar  mila There   difference between   talibans  same kind  Holier than thou  full free  have  view     force   others like Talibans condemn  killing  innocent children tell      against these bigots  running illegal sharia courts barrage  comments about  comment   calling  even abusing praising   belling taste    cover  personal  least  find acceptable What kind  logic  this even    songs  unbearable  does that make this Kolaveri  good Some  over awed  success      only  quality that matters Ideally what  desireable  success with quality Please hear  complete words    written   pattern    folks songs that  called Every   praising  robes   emporer  Tune ordinary  insult  sensibility Those responsible   still yesterday   huge anti India rally     most favourite Great also could never find   know Hasrat Chirag Hasan Hasrat  Hasrat Jaipuri  never heard  Hasrat When   argument  suspect  authencity   hostility  doubt  friendly gesture touched  your     wisdom  Promise heed your From  side this argument Thanks  your will think about mean about this title Brooding   mind Really want  understand that   against Muslim fandos  their mind   much them   such stupidity   family there  inter communal marriages  both boys girls  never  conversion think  need  read Manu smriti  speechs rithambra  find    shumbhook tell this  those Educated parents   matrimonials  mention  caste   desired spouse  their children tell that  those villages where  century young people Publicly hacked  hanged  falling  love agree with    agree with  when  found  salvation  dalits  Buddhism   your know  every year    fatwa  other   last year  lucknow muslim fandos burned showing    your mind  asked  about fundamentalism  Told Your ignorance  Being rationalist means being against  very institution    dear child please understand this creature constantly makes very snide remarks    told that     only    rude rationalist  have equal distance from  faiths defending       Dalit what  fundamentalism Have  ever confronted  fundamentalists  your community    just  gutless coward   only criticize others repeat  qafia along with other qafias Please consult  dictionary find  difference between   tend  confuse   another congratulations Abhishek  onwards looking   every  will baap Congratulations Amitabh this  evoked  memory    when Shweta  Time flies   swiftly believe  century  faiths  unnecessary including life that  have  read Darwin  ignorance that  oozing  your twist  made face book    some respect Barkha even when  disagree with    issue  respect people like  even when  agree Every time they  their then convey their  question  left with  self respect They humiliated fernandez   minister  same Shackled They believe they   away with surprised  your comment   think Uncle  would have reacted   security  would have frisked some   keen  believe   absurdity with  giving  thought   impossibility  help belief  open  Faith   based  reason needs    faith forget unknowingly    constantly influencing blame     crime    human have  free will  punish them  their deeds that   superficial  dissect  object  will  some layer   concave thats   other side  convex Arrogance inferiority complex always  What looks convex from  side    concave   other develop  prowess   some thing   notice Behind every competence there   period statement  some some fake scientists That  what  will call want  discuss myself  this That Some  grow remain  climb ultimately   always  matter matter  common sense  There  nothing super natural about These  formalities  words  their real When someone says  meet   mean  every true that   small  Bhaskar most probably  will remain small   your life because your that   what were  doing  that time       hunger strike  front  writers building have stood    before talking about  spine good  nothing creep Whether some    secular     debatable  your statement establishes beyond  doubt that    secular Talk about your    official representative  public discussing their religious status  their political that   secular saying  this  draw attention  best thing       ignore convinced      anti India what   saying India  more than  billion times bigger than moment   seeing only your drink Left this habit believe   have always stood  what  thought  With  prejudice Actually  deserve that  narrow uncouth ignorant    represent explain   Anna team that  hard Baba  trying  achieve what they want    they know want people  speak their mind ahead      living   democratic Good calling   Kafir   same time some Hindu right wingers  calling   both  fanatics like wish  could   have limited  join  will   Against  more fake encounters  your choice confuse faith with Faith   mother  Belief   child have     against  fake encounter Prashant Mehta   lawyer     Sohrabuddin expect disagreement   lies from Which case   talking      approve  fake encounters Change your source  information about What ever  have written about  have  iota earn your respect  have  think only what  approve  need your padma awards     during  time another   Draw your have nothing against people   stone They were discovered fire wanted  learn really  dumb     understand  practice Today   have mentioned  because that will complete that your common sense approves make  believe some goes thru  such agni Even  child  sixth standard science class  tell Wait  friend  will talk about  after  month  Okay against  mean believing some thing without carried   they   These  ambitious  looking   short   political power Have  ever thought  Anna saheb  made  clear that RamDev   welcome afraid Muslim clerics have  time   such They  busy giving fatwas against opinion about most  these Maulvi sahebs  that they   curse  their What  desperate attempt  hurt   what  miserable failure When have  praised them Give prediction about   fast  right  this yatra that    taken  will prove    beginning right     liberate  slaves   insecured with  their bigot whether Hindu  Muslim   right  question  secularism  lost lives  people without  sense  humour  like vehicles with   shock absorbers must  very hard depends  what  found through   what   come  know  what statement  could possibly only athletes every successful person thinks that  knows future when  will   contact  many galaxies your postal address will   PLANT EARTH SOLAR believe what ever credibility  have    citizen Whose opinion   issue   bound   party policy Thank   your kind  generous  nice  know there  people  understand  trust wishes dictionary SHARM  HAYA  mean  same  HAYA   feminine  rather  more refine There    limit  knowledge  ignorance knows  There    limit  magnanimity  pettiness know Agreed  achieve this people like  must purge  this poison from ourselves  erase darkness  darkness over this  THEM reject these Ideas   make  healthier harmonious society against child abusers  must  against child marriage  which  been rampant   country Thank   your generous words  which   facts that  think pinch have noticed that both communals pretend  represent  whole communalwhich   only your self victim list starts with those  were burned  Godhra includes those  were slaughtered later  Gujarat many times Newton used  word chance   threatening accept  obvious fact that   communal  full  hate  want  face this change your some Kashmiri pandit activists   have spoken from their plateform    tell   have  stood  Gujarat victims have been doing  since many  what amuses  that people  themselves  communal want  test Keep calm  name those Hindu organizations which  according   communal  fascist First answer only  which Hindu organizations  according   communal  anti asking  fish    swim Find  what stand   taken  Shahbano time  child Play some where else give   right  interrogate  wish  knew over  years what public stand  have taken  these issues First   prove that  have  moral right   these edgy    explanation   communalist will  truly secular when people like they  Hindus  will    their prejudice biases Your  even know that   talking   atheist      from  family  freedom fighters Nice  know that    Atleast  have some thing      secular with  fundos extremists   community while  defend yours    secular That   problem with   justify your  mentioning Aseem would have been Waseem then   would have considered  retraction with same respect  belief take your opinion  seriously because  suspect  have  communal mind interested   names    their religious  Will that decide their guilt  innocence wrong  should have  moral courage  accept  accept   misunderstood  news only    resposibility Cross border terrorism  friendship    hand every Indian should  united against these jihadies  against  group that causes killing  innocent Indian citizens When terrorists commit  crime  hope police will bring them    when police commits  crime  protest have often spoken against muslim fundos  received threats  then police protection Point  should Aseemanand  confessed  role  Malegaon blast  getting bail   boys  were wrongly arrested  this crime  still  jail best wishes  with   your girl friend face Some   impersonating  intend  report    cyber police  Mumbai What makes  think that  think like  have always condemned communal violence every where including course  goes with  saying that  belong   such community undoubtedly every city   kind  Same  true  think   city  community   monolith  wrong  some Religious festivals have  cultural aspect  have seen atheists celebrating festivals Your questions tell   little  know about tahzeeb  your attitude shows     keen what    permited    What      because  your sense  decorum  Tahzeeb Passing judgements about  family elders  against lights  Diwali lead    path  prosperity  progress joint family  language  polished  women folk That     more polite decent than lingo made Inqilab   abstract noun like Revolution Means    used  masculine Tarkash LAAVAA  being published  devnaagri when  soldier confronts  enemy   armed  kill that  bravery  pure bravery  friend  cruelty more cruel than  Ironically  coward considers  cruelty  since  hardly understands Most   want justice   other high moral values only when they    favour  against some   dislike Great  those Could think  what  never been done before   what  never been thought Jobs   such sorry   night   leaving   Hopefully some other Welcome   club happy with your ignorance  have     afraid justaju does  always will mean search bother about others Raise your voice against injustice where ever   Some people will misunderstand   what ancient Persia    tradition  wear clothes made  paper  establish your protest  justice   court credit  Zoya  dared  incorporate  many poems   film missing  point   have exactly  same opinion  yours   talking  those  think like hard  make  most favourite sculpture  question   thinking   just sitting this world work while thinking about  most important issue   Thinking   considered work Aapaa baaji often they turn these titles into more informal Apia  Bajia friend music   MILAY will  available   market from july   Zindagi  With  this month  albums FORCE  next months Trying  make  language  like peeling  onion  find  real onion while  onion  nothing Tiger Pataudi  talent Imagine Indian cricket captainship      forget  Tiger blaming Ghalib  this   meter  extremely mediocre lines which  called  sher have written those Hope  mind have been responding with  futile hope that they  Look  issues with  little less   bored  them right   know every thing  stop boring Good Which dialogue  where  what context sincere  your information  come from  extremely prejudiced Change your source Your question  dumb  stupid because   obvious what  athiest thinks about  religious names  your list  Kishore Guru Dutt Asha often  with     chance because  take over that space  club  with those whom generally  oppose tell this  those dalits  within this year were burned killed only because they were dalits atheist   spite  that never  this language   revered figure      decent person agree more with Thank care what islam says about  care what Manu Smriti says about Shudras Unlike      believer true that Hindus  reformers  last centuries while Muslims  sadly     those    reformed happy with your biases distorted perception  history given  your shakha   afraid  help There    hate   Aurangzebs   community   love   Aurangzebs  your justification  privileged offers   deprived surely  must  ashamed  high castes have treated dalits tribals  thousands  years Often   same even today really think your opinion counts times  have been given police protection  death threats from Muslim fundos   please Hindu fundos guessed   really impressed  your kind  question  this   with  iota  decency will condemn every barbaric   past condemn  terror with     Whether   bomb terror  state Comes  time when  oppressed loses  self esteem  starts respecting  oppressor Patty hearst  ultimately joined  kidnappers Trying  help  vulnerable segment  society  trying  improve  society moment  focus    copy right bill which  meant  save writers  musicians from  kinds Gautam   friend from childhood pictures  Zoya  Farhan   albums    like family send  only because  like  Nothing  further from  mind than what some people bother about  Give   name  your discussion sake  accept what   saying name  real secularist working against  shades  communalism great  know that there  some   thinks like  have made Neilli  Assam where more than thousand people were massacred    hours stand corrected holocaust  also    greatest horrors biggest tragedies  dropping atomic bombs  partition followed   genocide body find  credible   problem What   mean    made  their What  amusing  pathetic   that your What about  murderers  Rajiv years  delay  that concern must  honest enough  accept that there  some truth  what Terrorism  pretend   green orange     colour   colour  human blood that  shed  always  same Another people today  tommorow newspaper headlines statements then  will  another deeply depressed  innocent people have   like  this world  become  When will this insane violence know    there  many   keen  have good relations with   have  power Would  mind asking  dalit about    really  that    only faults these    compatible   either     free  make  choice   have both madrasa  christian   seminary   Libral  They religious institutions This line   Kabir    greatest poets ever born other doha   Rahim  poet laureate some thing that   straight  dohu means urdu  awesome poems  Hindu deities festivals including Diwali  volumes  publishers  Kamal What kind   question  this  know that  atheist  some   believe mubaarak    Indian sisters  times  feel that  these festivals  glittering ornaments   body Three forces shape your   necessarily   same good  must  those   reluctant  raise these  will have come  know that   sick Please give   Adult education Only  fool  confuse  govt with democracy  vice  govts will come    Democracy When  reject  proper process   parliament    rejecting  priest   very DHARMA know  believe    genuinely feel sorry    really need Forget  even  islamic scholars  India ullema council have condemned Forget have translated vande matram  hindi    Ashutosh used this phrase   anthem  wrote Sorry    years tenure  still have years   accept  simple fact that this   honest already  rajya sabha  will have  think  some other motivation   honest Want  know  intoxicating even  whiff  power   look  Kejriwal  kiron perfect lokpal bill  some where between tenacity  wisdom  sagacity Gandhi  never willingly agreed     ignored  ReadRam Manohar book  partition would have been  ashamed  Tell  Bhaskar     pity able really amuses  that  rabid communalist like   shamelessly question Thank      together condemn   Whether muslim Bukhari wants  muslims  look   issue thru  communal  condemn Good Never Follow will respect  only when  agree with  Thank  very Keep    need such that  respect   contradict yourself with   same every   differs with    evil will decide  honest some    nobody  question your honesty think that  wonderful what  deserve  only from  honest Dishonest  your dues  ever hard   have earned them agree with Anna  respect  Aruna   deserves such respect from those  agree with make    your satisfaction next time elect those  will  sansad   place where laws  made problem  that people like   Wearing  dark glasses prejudice  believe that this   dark planet agree with   will these minimum  probably from investigating officers honestly serve this purpose right about most   channels    change  topic request   change your     good Fine    take credit  good deed   mind blaming     deeds  those whom  even know Aruna    crusader    inspite  reluctance    integrity  intellect  beyond They have mentioned  this number  only  central govt institutions states   even both  bills have serious  both   standing comm must also hear what  activists like Aruna  saying Strong   expose  Systems will have  behave  face reformed courts  quick justice Google Govt  Anna what ever power their bills  dispensing    beaurecratic machinery called Sronger  courts giving verdicts with  months will empower   corrupt   docks solution     bureaucratic machinery  more than babus   empowering  aadmi thru  judicial reforms think that  ever agree with    traitor  claim that  believe  democracy freedom  expression Lokpal will keep       every  will need aleast babus with      sure they  corrupt against coruption  some agree with modus Oprendi some Both have right  their Sorry  angry with  only feeling   have  such  Communal  sick mindset have translated Vande Mataram  Besides have used this slogan   anthem  Sorry  disappoint bigots   society should know that they dare  question  love never fire  first salvo Before sending  this retarded message  should have read  tweets  have received dont respect those  want  divide  society   basis   that makes SoYou think Vastanvi  Really  runs many madrasas   giving Liberal progressive education there completly agree with   corrupt  anti  baat proud Indian born   family  freedom  follower  Godse needs tell  what Hindu   have always opposed them  choose  misunderstand  that  your think that  mind  like yours with such pathological hatred  crores  people  make  decent fair society Where  from whom  have learned your history that  made  cynical about moral giants like Gandhi Patel Nehru showing  dislike   hate monger   society  have disappointed corruption only hate inciting violence  gain power wants    corruption just Society happily share  plateform with some  like Sadhvi Google NCPRI Aruna      majorly contributed towards making   Actually lokpal   offshoot Govt   version  Aruna  some  that   Have  read these bills There     only retaliating while  really meant Will  give  same margin  other intolerent people  different parts strange that those   they  fighting  freedom  expression just cant tolerate those  even slightly differ with them think  present govt opposition right bring  people thru election  democracy  damned parliamentary system there  always  oppposition    govt problem with people like   that  always have more opinions than     member This    time  discuss that have  certain reservations about method   arrest      undemocratic know that  ancestors were  British jails when perhaps were licking British boots world   except those groups  never moved  fingure  freedom   pretend total    that even   your sick mind  capable  such filthy  pity know what   mean  that member   CLUB that takes care   needy club city Same   dear brother   your dear doing your  kind enough  tell  what  your where   doing questioning only   every   hide behind  whole generation every youth   like exploitation every where  keep quite because     What told  that  take  public stand   issue  have     accept   gutless Enough about     your turn  what courageous stand  have taken  your life which deserves  respect wrong  ndtv  have  debates with their representatives   sure     copy  those progs from ndtv mean that Read  tweet again   possible with democratic society every  including Shiv Sena   right  oppose  film book  person  without violence missing    really cares  freedom  expression   defend  whenever contrary  have tweeted that  should oppose     What angers  that     never happened Forgive   this immodesty    tell  that  have been accused  many  fault  never  lack will have nominated    party   Such members belong witness  give versions tell  court  select  Same   party   versions   bill That    legal choice  other party  independent slip  should have been only  stand outburst  against disunity    selflessly bravely stood against such bans perhaps have seen this have never heard   film called  such film  banned  condemn  irrespective   ever Whenever  done   film   large those    effected bother    oppose this    voice znmd that   these poems   available find  English translation     David Mathews  published First   stop  further destruction  lives property human dignity then  will look    history Thank  honoured Hope   disappoint  ever must   visit since  seem    person  wants  India   theocratic  will learn believer  mean   that    communal Bapu  maulana Azad were really believe that communalism beside being indecent   communals were   extreme  intellectual level Those  constantly question credibity should also  made  look they think  bill needs some additions they  explain   opposition they themselves     standing talking about  govt   sanctity   These protesters Name those  according   have taken  fair  Stand  these Breaking religious idols  places   secularism These  excuses   communalist  real secularist remains secular inspite support      clear  stand  secular What ever Name   people whom  like What religious belief  stand   willing  forgo   sake  prosperity harmony dignity What about   more important insulting your nation   pointing  towards  system that  denied  whole nation  basic human rights dislike     send them there instead  feeling holier than thou civil society needs   some introspection What kind   foolish message  Read  tweett again that  have  understood Those  respect Indian democracy should  send     come back kiss  very ground have confirmed  worst     those  believe parliamentary system  other words finalized between  govt   need   novice  unintentionally trying  drag   anarchy write with     urdu which   mother That  true  bigots  every religion They tolerate truth that   they fact  average Muslim  Hindu   reasonable person  both  scared  their fandos contradict authorised     tell  about  blindness  vocation  useless poetry   course  terrible What    about your   right honest would  have told    give  opinion  this subject     same opinion that  have Have  ever wondered  burqa  every  Saudi Arabia while  japan  even Kumar  Your   awaz  that frighten then   really sorry  your teenager  should have  guts  demand from  world whatever  consider   just religion   cultural tradition that makes women cover their  should according   only those  want every woman    burqa  sensible  rest   world  stupid suggesting that  those women  wear burqa have  character they   women problem brother  think objectively about what  have Best wishes slavery   banned like alcohol  pork  according  your logic   banned even today during that time there were slaves  will  defend covering  face  modesty then    immodest Sati    should   allowed even   woman  doing    free same goes  dowry  child Burqa curtails basic human rights even   woman inside  burqa   aware nice  know that  admire Majaaz     maternal   very close   died when great great grand father Fazle   edited  friend Dewan Heard your point  view about janter mantar  were speaking pure     think  clearly worried  long  people like   your friend  there these extremists destroy  Indianess Your ignorance   know what  have always stood      responsibility  educate only  moulvi  century  clergyman   religion  obsolete regressive think that Like  also contradiction  terms Great that  liked Abhay Farhan    sure that omission  just    deny that   outstanding fight between groups  moulvies   control   seminary  does  concern   should  take  side Before starting  inquisition  others   purge    communal poison from your Iffti naseem  poet   friend with  great sense  humour today passed away  chicago surprised  amused  your  have  hair tell  what made   this question friend some   already This name     choice    jadu which    name since  child mean that   contrary  wanted   that economic status  nothing   with penchant mother   teacher    father before joining those    reader Prof Would  believe that   young  when   imbibing    homeless says common    afford  read   available  public library kabaab  every street would like  more about   instance what niether cornered  afraid   believe life  devoid  warmth seems  hindu also believes ZINDAGI  film   daughter zoya  become  major   want   forget  share  happiness Thank Long back     once This   thank  those nice people  have Congratulated    huge success  znmd  film  Zoya Some People  famous  being famous Paris   prime example  this very good under water  have  pretty long breath Okay brother will continue friend  being communal ourselves    make others  communalism justifies another have already given  views about parda received  effigy  burned  some Sorry  disappoint Taslima   have stood    when  confirms that   then  your self have  stood   secular Hindu There  only communities secular muslims   communal muslims  another When  said  jump from  where died   prison   talking   freedom Fighter fazle haque khairabadi Read  books    Goel     help  expose your class  using abusive language your source  information about history  amar chitra  give jump from  where  died   prison google  find    Allama fazle haque Khairabadi British offered   send   gallows   gives  mercy  brave   India Bhagat Singh rejected denial   change  fact that  apologiesed gave  mercy Good that   against casteism  what about   against quit  discussion  moment  realize that  other person   desire  face fought against them  they sent  prison  three life times  what    that they   free after have  decided    satatement    check  facts That   passing this comment what  semi   values  least correct your language true   contrary  actively helped recruiting Indians  British army   world  wrote  book Abanbeaba       favour  fight some where else please pollute  cell gave written apology  British govt  came back   want  copy  that apology poet elders were banned   radio   british jail  great grand father died Thank    really every other    fatwas from some mulla   other     doing  Reactionaries like should stand united against  kind  communal    will serve  purpose   terrorist angry    will talk about  after  possible reassess your   thinking trust people  they   thing that  against  common sense     reason  doubt their know these   words your  says different things  different books    believe Children listen  their mothers  Grown  people think  decide things  their paternity    claimed  disclaimed only   paternity test  prove Where  your soul before coming into  present body   know what makes  sure that  were there After death  will  axactly  same    before being concieved   Nonexistence what   because   going    should live with have never taken  such   talking   wrong   against   religions share religion with  Perhaps like  they  also make  clear  only fraternity   gender sensitive patriotic Indians death toll  reached What kind  animals commit such heinous course religion takes  away from rationality  forcing   believe what  irrational wonderful   typical  have read  criticism   writer    Great that  have  read   Dawkins    intellectual giant  even best   make agree with Being  admirer  hope Dawkins  enough moral courage  accept read  felt disappointed   insensitivity  Dawkins comment   label   misogynist   hurry please tell  where   find these particular comments  Dawkins that  have been twitting With  major religions   world even  most religious person   atheist  looks   other with total There  Members  Organization  Islamic countries could  name  least  where this  practised Tell this   They will love Those   ones  failed  cure them selves   Disease that  traveling   blood since unknown times obvious that  belong  that rare species called thinking  baat what   true test  believers wisdom  some thing   already Just  will join   club  retired hunger when will   able  differentiate between weight says  were were   Their religion  communism time   disaster some times  shocked atheist loses  mental faculties   while  starts thinking like time  disaster atheists stammer   want them  stammer difficult that   make  anti women statement Could  please tell what   said  written  where atheist    humanists then perhaps    because others  busy being year    shot because   threat  national security then those    should proudly denying that some armyman  shot  child  they suggesting that  outsiders  come  shoot people  army premises website  will find some   poetry facebook   have heard some imposter  pretending socialism  mean that there should        there     economic bottom  sharp economic split  dangerous Javedakhtarjadu       facebook  fake  have informed Google reported  cyber police mumbai That     decide    feel they   description respect Dignity  gone   Yester years celebrities were like leather bound library  like paper backs senorita hindustani words  mine  spanish   spanish khuda   persian word belong   particular religion while Allah  Discrimination knows nominated   Rajya sabha   President  Such members  considered real test   their worst enmity people with superior values keep certain holds  inferior mettle Your mind  tells  that     those   proud  Nathu pakistani They   people  have coined this Allah little  know about   that stop  from passing  verdict against great admirer  dignified voice  with   frothy  light hearted songs    genre because   because  want june  tweeted Baba Ramdev will have   humble some people differed  told  will talk  Today ignorant fool  have gone  Kerala  have made public speeches against those muslim  shut even remember  many times these muslim bigots have given fatwas against    hindu  also  like simple question  seen that sketch that became controversial after almost years   first publication truly Indian artist  left  world misunderstood  back stabbed  thru    will  live   adversaries want some   give   Equally important When will they  able   back  their condemn  baises  kind  prejudices  every kind  injustice sympathies with  when   divorced  when  same woman  gang raped your   side this point  totally agree with  instant talaq  muslim women should  banned mashghool being busy   particular work that  mentioned along masroof  busy  general reason      given niether  consider both  them unreasonable people because both  them impose their religion  their children There  many  agree with  vigilante approach  nothing   with saffron green present stance  harm  nation with  chaos    fair   that  intentions  anti undesirable  some people  trying  throw  baby along with  bath water  done Point    make Institutions more effective instead  going totally think  democracy  worthless visit some   neighbors  will come back  kiss  very ground Hazare  already raised those issues that deserve national attention    just trying  upstage Thank  seem    very fair  objective  regards course things   right      mean that  should  jump thinks that bribes  kickbacks worth thousands  crores  possible because   notes  rather cute your BAba asked   Hindi states  they  willing   seems  focus  only  next  election Grow   would countries whose economy  booming because their  protects  secrecy clause  banks will help with  because    have  presumed that    with  because understand your frustration    door   opening  start  demolish your parliamentary democracy where issues will  solved  informed debates   anarchy where vigilantes will decide  fate What Hazare  asking  could  given      asking    within control  will they give wonder what  your definition  Could  please name   whom  consider secular course there   problem with  women writers  with those    respect What  wrong with     whole life  have never read  thing even half  stupid  your tweet woman writer   problem  would  Naipaul name those contemporary male writers   better than demanding what they give even   want Surely    many  those   alarmed worried about     often  quickly actually  worst Your message which  full  anger  bitterness  think   upset with your  self   would know Please think that   trying  test   being sarcastic really wish  know   felt what think that   very much unlike Please  tell  really want  understand your point fully understand  describe what   clarity  thought  need   rich Some times  feel  matches  like Chinese proverbs    Here shah grand grand father  come     born   grand  were Rajputs peacock throne  Topkapi  belonged  Shah jahan  cent Nadir  plunderer took  away from India lives  learn learns future when   technology  science will stand obsolete what will   criteria  decide when  humans became truly modern really looking forward  meet       mumbai Next time please inform   little want  compare  with India  seems unlike dignity credibility  have  lost your sense establishment decide whether  stand          Both  indefensible positions  them They want  believe that  battle continued  minutes    army that  just meters away came  know about  much later They want   believe that Osama  living  meters from   army base   feet high walled villa  they know have   here   Good morning Touched  your generosity that instead  doing  thing worth while  your  life   trying  make what that cake    with       have your    single digit really wonder  those   eloquent about great values   totally immoral when  comes  their  vested interest talking  basic grammar  poetry   however good content  never   permit  wrong grammar also from Born   family   thought    missed  country   missing yours Tell  honestly   have what   doing Your lack  introspection  almost Please  upset  intention    upmanship   sharing  understanding  poetry with others nice thought  there  some difference between prose  poetry  sher both lines have    Same Please check  first line    meter days    even surprised      missing India There  great places   world   apna   maha mental asylum  only means that your family care Darja     understand  many pronounce BAWAJOOD which with   instead want  live with migrate  saudi arabia leave     want  live  harmony with Actually  Mumbai  have  separate police station  cyber crime that  highly trained officers  detect such Some impostor  pretending     facebook have reported   Mumbai cyber dream   brotherhood which will transcend    make  world  better place Muazerat Means   wants  apologies     opologetic Opening  second front     often tried move  wars  divert  enemy forces when  situation Thank   your kind  generous Such compliments always give    strength  face   negative forces There   positive aspect  banning  currency  will give  major boost   sales  bigger suit were born    these unjust countries there   would have been  minority baiter totally support   believes  equality irrespective  gender race religion unlike    just  minority baiter understand your reservations  please    this myth that  poet  remain creatively alive know  secret   nothing  stop  from becoming  very successful Congratulations have  right  your opinion    want    cross  certain give respect  every    some  gets rude with        asked   shut What gives   privilege  tell  what  What have done  earn this right Indian  opposes communalism   Always attacked  both Muslim Hindu extremists  they intimidate trying  justify  genocide  another This   logic that many Maoists   justify their violent ways those   responsible   genocide fake cleansing should    hatemongering whole heartedly agree with   govt must show   gesture  appreciation  this young  talented Kashmiri idea that Tagodias singhals   Prohits   world  actually prophets  secularism agree more with   right  totally share your when  speak against muslim bigots  fatwas death threats   good  criticize  hindu call  bigot   fair even   give crores  those players  will  change  fact that gujrat  given only   truth hurts Sorry   fingure where  hurts state  rewarding their world  winners  atleast crore   rich Gujarat  giving lakh each  Pathan  Great Dear above average When ever  find  fault  error   writing  point    will help  improve  language offended   just curious  know    talking   urdu scholar   certified  urdu know that  urdu    know urdu well enough  decide salute   their their their They have made    very very proud find specific enough Today     cricket lovers  together   wish  very best   boys   blue Both India   lanka  very good objectively speaking  have  edge over seems that some celebs think that their presence   substitute  content content silent   deaf that    hear  voice against  kind  fundamentalism Honestly  feel hide behind others talk about   convinced that  need will read   told  that  follow  faith   believe that every faith stops  from being Please educate  about those verses  which book which chapter such verses   found  exact first reform yourself  getting over your  communal biases only then tell others that they should have secular right Bhagat Singh   Actually   written     atheist your logic    said that since     atheist    talk Atheism have already said   against this absurd advice  some  come  never dare  oppose  bigots  your give   name    that  couplet Words   bricks that  used  structure  thought  like  heap  bricks  called  house Zindagi   hindi film  jitnay achchhay scene thay   Unknown Bhaskar please believe   Actually your  extremely please      help anchor    widow   army officer   kaisa  raha  degree  insensitivity  possible selfless some people sound  when  come  their norrow interest they show their real petty  selfish mind going  hell provided  assure  that people with your thank  nice  know that there  some young people  value such thoughts thank  have already corrected talking   unfortunate woman    living corpse since last capital punishment  morally right    believe that revenge killing  right  mercy killing Where Sachin  always will  Strauss even dream  reaching close Sachin  unbelieveable  achievments   mindblowing they seem   almost come  brother   intention   message   poet khuda   generic word like   belong     covers both Ishwar  Allah agree   absurd that unlike every thought every theory   world Tomorrow  another  night Thank  very Your good wishes mean     Warm regards wittingly  unwittingly   side Manipur  girl   hunger strike against  draconion  since police feeds  thru    care understand your concern      lets think  there  peace without  possible brave soldiers often sacrifies their lives  naxal Conflicts created   wrong  feel libyan  attack  protesters reminds that  same  suggested   naxal problem thankfuly better sense prevailed fanatic   person    change  mind  does  change want  undermine  people  people contact  ultimately    powers that  that hold   trump totally agree with must oppose  kind    time where   Indians should count  blessings   proud   democracy that  feel very sorry  sick people like   unfortunately  found famous Tina Sani while singing  Alhamra auditorium dedicated  couplet  Salman TaseerThere were thunderous claps Extremists even when less  numbers occupy more space   society than moderates  sheer brute seems that  common People  Pakistan  sick    helpless   light have heard there   Javed Akhtar only  that  under  circumstances totally unforgivable   society appriciate Those   case  injustice have  guts  articulate  weaker Learn  from Sorry      socialist society   earn through talent    your memory helps   your memoirs  have made clear that  prefer dictators    called third captalist  some   makes money  investing  make money  writing they believe   perhaps they  unknowingly asking understand what   blood group ever confuse knowledge with  give  health    health have spoken about this injustice many times Have  ever spoken about  suffering Egypt like  society   world   extremist fringe   large Egyptians  modern secular over  world  extremists   kinds always want   democracy  establish their totalitarian Egypt  secular groups should come under  make  Baradel their leader    that Muslim brotherhood  kept deeply protest against  killing    innocent boys  also condemn  murder  girls this right  royalty   every country including India   highjacked   unfair contract Govt  making    that think wishing democracy secularism  those brave people   fighting    need    shrink Hope  Egyptian friends know that  Mubarak   frying  Muslim Brotherhood section  MPLB says Muslim girls  mobile phone    Karnatak says black magic  used against  happy century This world   place devoid    misery  bitterness   become  little more reasonable time  fear when tyrants there  being OBJECTIVE   idea that dictators like Mubarak have such respect Point    banned  channel Aljazeera  niether   their heart  heart they trust  that    tell They have their  political agenda Best wishes  Egyptian people  their struggle  democracy they know that democracy survive with  secularism Some people  upset with   saying what both  opposition  saying should  their counted  more Mumbai        room flat seem    very unhappy   face  real reason  your will help hand   richest   world    other hand almost Indians live bellow poverty  fair please  inform   there   such meeting  future would love  attend TheJai   fest  become   Namita Joshi star hotels even Indian restaurants  side plate   left while  should        scared  traditions many people inherit  imbibe totally baseless with them   without ever realizing their   frightening Thank    very much  your wishes    really touched show   whole life after  left  family  only those moments when     train  another show   whole life after  left  family  only those momem months   collection  poems  ghazals LAVA will  available   book have  idea what   talking about believe  need     future expect  response from whole they will   author  composer  even this makes some  unhappy then Touche Good  stand those   interested  Copyright Issue please read  facing  music interested  copy right amendment issue must read Facing   article  Indian Express know  music companies dominate authors  This  will secure liberate them Thank   thanks   well publicly says that composers  short changed privately takes producers  politicians  point first time   agreeing  some Nusrat saheb    person   equally This ghazal  written      recited   many  mushaira then    published singing  poetry  where   world what   problem Pure each  every word   written Actually almost half  album  from  book wife  khem chand Prakash  composed  ever green song  aanay  found begging  Malad railway look  those    doing well today look  those  were doing well  promise  will over  world copy right royalties  only  those  beside lyrics musical notes  also senior respectable   with  hare  hunt with song   played  Brazil  radio they will  royalties   producer from  earnings  question  sharing  loss   profit    from other sources tufail bhai have ever seen  contracts   composers with They read like bonded agreement democracy informing  Parliamentarians about  unfair practice   society this   from films   norm   whole world including India      inventing only protecting will save  rights  classical Musicians film folk singers  bhajan composers matter   ethics   basic     take  side  injustice  that Mahesh Bhatt  claims    activist  actually fighting  losing battle  depriving authors  their What  shame have written about this royalty issue Indian Express  think  will  published called copy right controversy masks have slipped  some  real face  saviour film people  mumbai  members  Some association that   part   represents  point  view thank each member   associations  federation  western India cine employees  raised their voice   just cause respect   having  moral courage  accept that  were    rare Good luck often enjoy  comfort  opinion without  discomfort group invited Taslima  Mumbai inspite  threats   public meeting  have  sick mind worst kind   there  catch them    keeper break    have tweet against criminals because  know there   enforcement agencies  when these agencies  wrong  protest since this   first time   pass  never   rude again  have  idea rude Binayak life imprisonment reminds  that standing   poor   helpless   unforgivable crime Thank   agree with these royalties   connected with  success  failure because they   From films  from other sources They    individual    idea whose time  come time  fear when tyrants kiss blame only    wields  little power   society tends Well know about    since  have told Before   taken away   give  what belong    will  look dishonest defeated Pity some understand remember   said that  that  constant This  will give equal security  composors  writers  recognizes  performers There  difference between real estate  intellectual property  never gets totally disconnected from  creator royalties will only from other sources like ring Film earnings will still  only Your tweet reveals your poor   need  learn   talk  your gives  royalty   producer   composor  some producers Want Greed knows have written  thanks  your kind words honoured Welcome difference between  poem  symphony   HORSE  afraid Please have some mercy  take such monumental Educate your self about Copy right  then  back standing committee  only unanimously  govt intentions  made some positive suggestions  save  rights  authors problem with some   people  that they have more opinions than Read standing committee report thank  have nothing  gain  stood   only because they could  that   being ruthlessly days  Jagirdari  music industry  Authors composers will  longer have  sign away  their rights first language PLease ever think that  upset   point   mistake Imagine  wikileaks would have exposed Russian   cuban administration  same  what would have HllaryClinton said recorded   channels That    said that   what   matter  pride  that    invited world   condemn either  establishment  WIKILEAKS  prizes  guessing what would want Justice with   ambit  Indian constitution   Indian people like   with That    only protesting against some atrocities    Gandhian    picked When     verge  dying police forcefuly feeds  through  nose   happening since last years what think that wish  save  chief reputation  case private Those   With Wikileaks Radia tapes  really strange There  spots  their faces  they want  clean  mirrors Some politicians play KAUN BANEGA CROREPATI  they make crores  then answer There were times when  leaders used  have high ADARSH values  they only have flats Translation  certain words  Situation  worst than    asked  meaning  SIKKAY Thank While your message   compliment   reveals  many wonderful aspects  your like like your  have  shows your poor Learn some manners then come   with Good morning      little pleasant  least Matheran  hill station near    khoja tycoon  made  railtrack  station  public    expense will understand what  mean  that should  make  wrong grammer Happy Diwali    Indian sisters  this year bring   light  happiness  knowledge Things with  remedy should also  with what   useless   what   useful   please difine    careful  future course many people  such  opportunity  kill  monster  become  hero Currption   anti national activity   again  again till  gets ingrained Every psyce there must some liberals even  saudi arabia   country  known   political constitution Thank kind     that must oppose injustice every where every give example    justify seem  have  soft corner  talibans that have   against hate      court   feel that   commited this strongly disagree with     issue   condemn those  attacked  kind   talibani attitude Those  believe that  planet  effect their lives     right earth There   much bitterness     must    reason   will  solve  problem Think about tell  when Send   date  month  atleast  year  that   Police must have seen there  some truth  what   saying  changed them  ever even  communal  look towards when  critisize muslim bigots   when  critisize hindu bigots become  suspect sorry this   acceptable Please change your source   hang  head  shame that   fellow Indian  believe  such country   only  territory   people  ever calls    guilty youseen  with your       said  often that  tend  believe this totally false propaganda communal  will  biased against others thats dishonesty    biased   communal tell this  those fanatic mullas  keep giving  death threats   then same constitution that gives democracy calls kashmir  Indian state   democracy  defy  constitution calling  part  India  INDIA  sedition then what about those  call Indian muslims  they guilty only reason  wrong send  corrected version false propaganda that muslims   country  less loyal than   truth Dear grit    Laura   think  will work true that  people  kashmir were  consulted Abdullah  their undisputed leader   opted  India condoning Arundatti   contrary   saying that    wrong  those  suspect Indianness whole heartedly agree with   both Kashmir issue inspite    respect    totally disagree with Such ignorance  history realize that your   confirmed what   this   mind    talking Please ignore that meaningless tweet  lost  some  keys with join  once   lemme tell  only  frequent visitors  utopia have made  difference  this world today prejudices  biases have legal  religious that were discussing your national policy more serious   discrimination then society will have  moral right  question alimony please refresh  memory  where   this   topic Barkha   meant    light hearted remark since  know that  have  sense  humour  Brute course  have have  right     fulfill  basic Marriage  divorce think  have missed   were  talking about ourselves Mere   style  poetry where  face   sher seems  simple while Thank nice word  kakul  means  That falls  either side   near  temples What   criteria have send  messages   past  every time  topic  more  less   remember Only  Real secularist   right  look down upon  pseudo because even  pseudo  times better than  communalist Good question there  some  whom      extreme hindu right winger    problem When some  angry    will talk when   calm   best Oppose extremists   kinds  hues   Justify   hope  marginalize there  many minority card players  whats good  that they   winning India  more trustworthy than  American diplomat   talk  those  even   Bihar there   choice between trusting  American diplomat   Indian prime minister trust Unlike army Most   pple want today they have  voice  some  they European countries that were bombarding each other till today have  parted  where that what   taught  your school     shocked  your ignorance Your    exposed your political such political philosophies   part looking   small part   wall  Berlin left Germany  divided  this  gone will  walls fall afraid there   permanent   success because they keep changing  locks there   permanent   success because they keep  changing think because  some technical glitch your twitt   Musharraf  come hate   only against  hate mongers  terrorists   world  their justify  drones  only drew Miss attention towards  inevitable scenario  case Your twitt   proof that  agree with respect  sensitivity    gentleman       bully contrary  unreasonable want  world    only  reasonable   open have logic  proof   side Becomes  weapon  block  logical wowa what else  would call  baby born   wall  woman wawo Please give  regards     Wall  love  master Wowa    woman peshqadmi means taking  first step  start  taking  initiative Some people  they   clever   wonder that  they   clever   they know that  have  seen    have been  cynical Please     believe that such  beauty that when  will    first time  reality with your eyes   sure  will miss  heart rahe hain mere twit world people  either apolitical  only interested  communal poverty health Education   sexy enough Right understand what   Perhaps  should ignore   feel    tells them they  never know They  questions   know about history only  establish  distorted version  like Some times  warm gesture will  responded   Cold  hurt   never loose your belief  basic human will  this  some  will  that Where will  Come   friend work  harmony honestly feel  that  know   this kind  thinking  harming  nation Hate first   should oppose  With    Only accusing   bring harmony your biases  only meant  dated mind      both narrow minded muslims  hindus like given   name   country   fighting   victims  those   responsible   genocide Find  what   Stand   have opposed muslim personal  many issues teach  some introspection With   respect   kinds  faith   Indian have  decide which time zone   living Before giving  this unsolicited wisdom  should have found  what  have been doing since  many late  sleepy Some   claims   crazy about poetry wanted crazy friend Will   alright    back Thank   good night better discuss this with  dalit   sure  will  able  provide some insight into this friend   aware  human blood  been spilled   name  that history stops repeating itslf think about    promise  that   best Meri suno   hospital should  made where poor Should  free RAHIM that    What  really important  that  INDIANS should  loose  secularism hopefully such issues will  discussed while urdu  grand father beside ghazals  written many  hindi geet most  them about  leftist rubai  lines   certain meter ghazal  chain  couplets   rhyme Every Geet makes   form good indecisive     that they feel    counter have  live with this reality that some people just take  stand  even  themselves tera  tere Sorry  typing need    have    guts   that  national wealth should  retrieved Bach   musical  details please google hope Most probably  will Society   large   willing What   mean   side Which Vyas Tulsi Ramanujam These   some   names that evoke reverence   hearts have mentioned only people from became rich  gave  became Please understand  friend they rarely   chance  claim that they have   them have their mint thats  real success  real successful makes  world Good  times times Just hang  brother  shall  best wishes however slowly  vaguely  some positivety   still very  hope hope  grows from lahore know  venue when  reach chicago Atleast improve your  step    nerve  touch    want  correct yourself     some help where  should learn   trying  teach some People need enemies  their lives they play this role themselves Think   have enough knowledge  pass  verdict about  poetry   languages Does  make getting  have  iota  honesty confess that  know nothing about never never fire  first salvo   some  attacks      told that    such  good What happened  your persian   waiting Quote come   good Actually legally     crime   what    then   fairness  have    humility Where  your persian Come what   know about urdu poetry Have read meer  firaq know that urdu  persian   different languages like english   have  ever gone still waiting  your persian poetry send   although    sure that even this will change   example  inane poetry  your every word reeks trying  fool know  word  persian    give   example  inane persian mean  earthy nautanki song    film  such  situation  BILLO RANI  written nice  every      bully with those   rude  they must know that whose  nerve   talking about  those  pass   slums every  never care     help give   break find  joke   good taste    know that  intention   wicked will  Still make   issue  ignore humour  always Each  every joke under     called politically shall know where   coming from  what  great humanitarian    have shown your real Instead  wasting your energy  time  running down others    some positive believe have given   right  trying    judge  hide behind common    better than allowed  play    have  done  earn this Send  your those  believe   cause should    What   saying makes become SELFISH like them   some thing positive  your life instead  only finding faults friend   deeply involved with certain causes   feel that  must  much more than what Those  given half  chance    high horse  start beating  introspect  they selflessly working Those  half  chance    high horse  start beatig  introspect  they selflessly working know  dedication  this cause often make     good someone want  understand this happy that   here respect your shall talk about  after  week four blind  have gone  feel  elephant  decide  shape Good luck  them Give   joke tell    politically homour always takes  intention that social respo cost  sense   should  able  once   while laugh fair   that only  religious have atheist  have faith       totally with   faith     remain intelligent   time     only   stands mean   blindly follow  faith   time     both   same time Actually faith  intelligence  have both  them   same course this   upset with those   guilty  with those   pointing them have   only decided would rent   room   khan  sharma    obvious      room from upset some  Wrote  doesnt understand   give   sher thought what   more simple than this there   Right Please tell         thought that  unfamiliar what    rhyme with  other words other choice   totally ignore Would  want    that will  call tell  that  norm that subjugates women should   acceptable   decent kashmir   national parties should rise above their petty political interests  resolve think Norm that tries  subjugate women should   acceptable   decent thank    pleasantly surprised that young people like  find time  watch this kind fanatic  person    change  mind  will  change would love  read Sarat speech   find thay tezravi  manzil  tanha hain soch rahe hain  haathon  chhoota   haath friend  have passion  have  learn  craft   that  must read    wishes hand  fundos Give death threats  fatwas against    other hand people like  accuse  abuse Kamaal learning love  humanity from islami Great   learning tennis from Ronaldo sorry honestly understand your  please decode Forget   tell     secular swallow Kedar these obsolete people will  left behind  this great nation will keep marching towards greater will read  book  right  please name  groups    think there  That will confirm publicly condemn organizations like  simi which   hindu extremist groups that agree that  Those leaders hindu  muslim  have given hate Should  behind bars sure    very fair person   must have protested   victims  Nelie tell  have  stood   some  like zakia jafri Whose family  publicly lynched  broad collection   poems  ghazals  titled devnagri   published   Soon next will come titled LAVA press   only godhra victims families    gentleman Panchal    lost  wife were there there   difference between  killers patiya  gulbarga society should have great respect   land  Bapu      where those   killers  rapists  away have  written issue between  democratic  important  your good show   poor nation that  paying       huge consumer market thank  Ronit  have great respect     Your compliment means state   banning  outsourcing from   free market  means that they should  Indian market think   right  respond only  those  believe  love harmony peace friend  have  received  such    were supposed  tell  which  tweets disturbed unhappy    disagree with   certain points  ashamed   which tweet  were refering last generations were known    both  daughter   Zoya  Farhan  generation Some    heard    about  veil issue  help   have  explain   every  dick That      generation  different  more liberal hindu  muslim  many celebs have protested against what happened  Gujarat   point  holding  against agree  many    expanding that space  constantly pushing muslim  hindu   targeted  them avoid controversial topics please understand  forgive them course   should  know that  have stood against such archaic values   life some times   risk point taken whoever    call shim only that  should condemn  wrong values  every group  when     objected that  wrong  should condemn  wrong values Every group  when   that Even  staunchly religious person    major religions   world  totally rational about  other some people  constantly questioning  about   preacher   islamic scholar  known   faith Give   break condemn irrationalites every where what  wrong with that every honest  objective person believe   irrational   this missing only  muslims    every where believe that people should have total freedom  conversion  Kothare  agree with once  said   because  English  said   loosing languages that included english vocabulary that curious about Quran     copy  English  read would  know  their private Some   misinformed  Quran  sure   where said    disagrees    show     Quran believe  should  free  convert from  religion    atheist  should  acceptable   society they your    true that  your heart  hearts  admire some  like Nathu  Godse course     venue   seminar   tweet    think about vocabulary  proverbs have become obsolete    deprived  hearing good When   west  mean with  Asia  plunderer come from  direction  will  called  plunderer some  took away  made  crown  does  mean     What kind  logic  this muslim   contrary  grand  Halaku  attacked Baghdad  annihilated  muslim population agree with    have culture  thousands  years ought  have much more self esteem than  often course both  plunderers   point   noted  that west calls  great   this course national interest   country   reality  often vested interest  pettiness take  this words distinguish  from other   ideas  they   bricks  need  make  edifice There have been  many wars  last years world while every country  only  defense wonder  begins Every country   world while dealing with other countries calls  selfishness Music   poetry    music tell    think that   least Tell   think that   least have  idea  person   made this good question    gentleman  written that Dear Shilpi someone  sent  this  want   reply from      supports islamization Dear     supports islamization religious name  identify with    Indian  Bharti firstly There  many countries with With  Indian consent   willing  walk  distance  resolve Believe  Prepare yourself    what  really want    just give  will both     covered herm  goes totally That   shim  sound    from    from ever bright  pupil  Every thing    taught     learn what  happening   painful  tell    conflict   solved with  both  sides rejecting  hardline okay Shariq   with  best wishes whole heatedly agree with hardliners were never compatable  they could understand  have called them right  educate only those     proud  their ignorance  some tweeters seem heart  head  think   either   Follow your  fusion  your heart very happy birthday   Munish best wishes   will always  with  javed akhtar dont know  these issues  many times there have been fatwas against   seems bigots  both  sides hate just   take people with such teach      come from  family  freedom fighters since corruption  sports  become  reality  life  coin  word   like SPORTION sent   threatening email  june    mumbai police custody  anyone wants  join   have which statement   referring start reading newspapers even seem  know what statement  home minister  made last week dear   waiting  your reply  threatening   telling  what  good threat questioning  Indianness   worst abuse   hurl  Dear child  should this kind  language some  keeps abuses   some point  time  have  tell  that     only     rude suhel saheb  cant agree more with those   insisting that  really need SETH please consider ajay Since    interest  finding  whether    idiot   retard this   want politics  cross purpose with  idea   just society which needs nonpartisanship while politics   very nature  partisan like extremist muslim groups some hindu extremist groups  indulging   united against both  them means matreal gain  costed  sensitivity Thank    problem  this world  that  most   issues  have firm views  faint these languages  siamese    complete with  hindi films always  urdu writers know   tweet   other script than forget     find some  positivety  life  possible some education kerala   state  India where population growth  almost while  keralites  muslims your possible  where they  that poor surely  would   difficult   impossible  them  avail them  living below poverty  sachchar report  many placed they poorer than tell  which were  forces that were responsible  this huge historical blunder this great human which icon   talking about  idea seems      same   talking   individuals know beside muslim league which were  other organizations propagating this  know read desh  divided   those  propagated  blatant  that hindus muslims   separate with  knowledge  have formed  biased opinion earlier   intend  collect some information  back could  name  poets   fiction writers  urdu whom  have read  then formed this negative really want know historical role    volumes published   kamal   nagri haider gyan peeth starts  Gupta period   after Harper  colins  published  translation   David Under  title felt that   suggesting that   copied That        reviewed    called ismat chugtai   great urdu short story  been published  english late shakti       most respected bengali poets  last years  Dewan ghalib translation  collection  poems   great bengali Sunil  along with urdu   available     only secular  liberal  vehemently anti said   that   proud  sholay    call   copy     know better than Satyajit sher  never  only  place  incident  time  universal film will have  stand  test  time  know    gone  deep  psyche will talk about  after years  these characters  their lines remain  part    nation name  film   world that   longer list  memorable characters     films  mentioned boast wish making  iconic film would have been  easy  simple  have discovered  formula wish such problems could  solved   required   poor policies  their honest ajay   secular  helped What gives   moral right  accuse  your sanskrit there   term mandook    wish some frogs could    well  their  prejudices according  tendulkar committee  committee  Arjun   took  most conservative Working with  couple NGOs  helping hand   many  possible  capacity  trying  sensities percentage   children with malnutrition  higher   country than even    saharan trickle down theory work   third largest fleet  private planes   world   third population have reached     conscience  allow        party Population   excuse  economic with  larger population  only have cherry   cake  that they  still  happy about sorry typing instead Indians  bellow poverty some  manage  square  having  party  fine very kind    write only urdu poetry   tweet prose   promise   more frequently Here raat means death that seems   imminent while  much     should have started pleasure doing these albums with Jagjit celeb   celeb   with  iota  decency abuses     opposite  praise  criticism seems that  abusing  some  persons want  convince themselves that they actually poor creatures congratulations  sure that  will bring      confident   thinking have spoken about this gross injustice many times publicly  front  then    politician understand your pain  friend  what disappoints   that  dont know that  have spoken  this issue many were inhaling oxygen even when  know about Indians were secular even when Happy independence      proud   democracy   secularism great Hind thank     always welcome  give your point hope  grace      beyond best wishes  good have spelt bait with  hyphen because  thought that      together  will sound when  eyes that have kohl  tears kohl what made  think that  poet  talking    forehead  couplet  shocked  Your moon    that words    poet what colours gaining speed   cost  Profit   cost  recognition   cost    good bazm  mefil   words with same illogical  true that   population  billion   throat  vocal cords like Kishore   miss read reject  racist being selective  will only help  evil know about give  your source  check racist views should  always Hope  have protect  ignorance  fiercely refusing  listen  what  lack  curiosity Great poetry thought  followed   action  Action     thought believe   bricks that should  used  make bridges believe   bricks that should used  make bridges  walls with   respect   only  side   picture that   distorted  name  historian  have shall  also take  opinion  those  have been treated  untouchables  thousands  also have  history know     surely   blaming  community other than your  always look wrong unfotunatly certain communal element  found  every  should should  opposed without making  exeption agree    hindus  communalism   unfair  calling every muslim  terrorist typed reactionaries   spelling check  know   became raageshwari    stop    sorry what  coincidence  know exactly   mean    proof case bhai   lonely life than   mean  bhai meet   more there  some    some serious   with   with have come back Your friends badly need some help   wonder       help  best wishes friend body  believes   nation theory    indian true exasperated    have just started give   example  tell   think     Your move People like  want  believe that    secular because that makes  feel small  petty  pity problem  calling those muslims bigots  deserve   called have always done   shall  call agree  what    some people keep sending hate messages then  have  choice   expose their lies friend read history  freedom moment  detail   will know what bhaskar   come from  family  freedom fighters whenever  want  know what  Real nationalism meet Good night thank  brother  love  country  have   these hate mongers  their nice know  that  admire Ghandhi  strangly  have  mindset  those  killed there      other    sides   same Muslim fandos call   muslim baiter   same time Hindu bigots claim   anti hindu   doing some thing check  chess  have written shae that means could  please name  known scientist   said that astrology   science Astrology flatter myself   start believing that plants neptune saturn  interested    office result   next film Sense  humour      times  awkward shock absorbers   vehicle   roads full  potholes  bumps agree only those players  remembered  change  game  raise    ever folly  believe that  those   mostly very serious   wise  many  them  duffers  lack sense  humour ideas  accepted because people  because  people    people sher that perhaps Othello could aksar  kehte hain   mere kyon kehte hain hairat hoti belief   belief needs some proof  logic   least  approval  common requires none  them corruption  higher places also  considered  antinational activity Dignity   quality that  fast becoming  rarity  people  short   society name  booked  someone else     choice email  your  promise  will call  talk about rise above  petty negativity  biases  hope your answer most  those  were accused  godhra train carnage    Since  blind reading about arctic     mitra suppose   never these birds move from  place  another   they  across continents like  north   that  migration willing  stand tell  where  southern hemisphere   witness this phenonenon bird migration  only  northern hemisphere because  migratory birds follow pole star which  seen from southern really want  know  opinion       testing   response will mother tongue gives  roots helps  branch    branches   either theist   person  would rather have visible means agree more should  used  share thoughts Shabana Azmi group  built homes  people  FREE  Chandivli  largest single rehab Project Some pple know that  being neutral they  supporting injustice while some  want  support injustice pretend this topic   long  tweeter your number  will call      tell   that   wrong interested  life every thing becomes Molecules  ammonia   crystals  hexagonal   molecule  crystal including salt  square name  already booked  someone else     choice Have  ever thought  There  nothing square shaped  shape  invented  human Some people want   their cake  have  with  hare  hunt with  know what friend  have  drawn this meaning   wish  every choosing  life partner what  important  mutual love please wish your   very happy birthday  give  warm regards sorry   understood your today every aspect Society   some extent  there   dearth  good people either biggest human right activists recent times have seen  Martin  admire injustice    only reason  this problem     solve  without justice   tribals agree with     justified  isolate naxals  will have  give justice  respect  tribals Most human rights groups believe that naxalism cannot  eradicated without giving complete justice  tribals should  believe   octopus when  octopus  ever believed bhai   write  type  learn some when extremists  both sides condemn  rest assured that  must  doing  right think  understand what   trying    really desprate Rahman also   same   sighned  appeal   govt  seems  have more opinion than from music album SANGAM written    composed  sung  Nusrat saheb raat here  mean  darkness  hate  Poverty  injustice while some  pretending   hunky dory haami bhar lena means agreeing unconditionlly what  noble thought  want continue    want    pass   willing Your over  world composers  these royalties   India suppose that  what  were doing while representing  vested interest   corridors  power fooling  represent  vested interest  this matter  stand totally over  world  royatlies  here they  taken away  onesided contracts strange that wants  protect  rights  Zakir Naik     Ravi Sonu Nigam  Javed thankful that soon   will save  from  contracts that  like bonded from  over  world royalties  collected   name  author composers  often reach </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>