<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">Super  have Padma Desai  Times  Fest Jagdish brilliant better half Those criticising have left India  long time  Monday take  Page patriotism Keynote address  Jagdish Bhagwati today  Times  Fest Please note  sessions today DELAYED   Thanks  please Power packed line  today again  Jagdish Wendy Salman Come Third  final   TImes  Fest power packed Jagdish Amarinder Salman Wendy economists needs  politicians need  learn history above  fantastic Times  Fest Delhi with Superb session Keynote   Times  Fest Please note  sessions today  delayed   HOUR Times  Fest Delhi rules front Come today  equally exciting Thank   preserving  literary  Bagga says  Times  Fest  this Lovely     Times  Fest Rushdie reacts   Times  Fest thanks  much  congratulations invited Times  Fest comes  town  come over  Maidens Here goes updated Good  starting head  Maidens Hotel Catch   cases that have defined Indian democracy   liberal democracy TOMORROW Political titans   kick  Times  Fest High stalled  exactly  Parliament debating Diversion from real issues atmospheric Maidens Hotel  Civil venue  Times wish used some Indian titles  Small Check  this wonderful video  Times  Fest invite  Times  Fest Delhi  your name  email   Start smsing another appearance  Times  Fest Check  updated sessions schedule  Times  Fest Jaitley  Chidambaram  hear them this wknd  Times  Fest Everything  want  know about Times  Fest Many congratulations Love  blessings Dissent will always live  Wendy Doniger tells Hear Wendy  TImes  Fest Delhi this Look Coming  Times  Fest Delhi this  come Bookmark this weekend  literary excitement  Times  Fest many   frothing   mouth  lack  patriotism  NRIs  voted with their feet  left India decades Ridiculous fuss over mentions Kiran worried about  read lectures  Wahabi bhakti Hear    Times  Fest   cases that changed Indian legal Idea  India damaged   fiddle with founding tells  ahead  Times body  free woman   prime enemy  orthodox count down begins  Times  Fest this some Monday humour   from tejaswi  some Monday morning humour   from such  sweet Hard working week ahead  enjoying being Director  along with  brilliant dynamic count down begins  TImes  Fest starting Meet Rohan Murty  Times  Fest Maidens entry pass  Times  fest Delhi Whatsapp  bookfie with your favourite book Pahlaj Nihalanijee check with bhaktas before censoring  word many congratters runner  Best Speaker  Titans  That   punchy excellent presentation Delighted  moderate superbly high quality Titans  debate this  College faces Hindu College  other Colleges  well  Titans  debate this Delighted  moderate Dazzling array  yummy food Catching  with  lively dynamic folk Wonderful     Berkeley   such  excellent dedicated cadre  academics keep India studies alive    power Public lecture this     Berkeley mastermind   Belgian citizen  will terrorism  stamped   bombing mastermind   Belgian citizen   bomb  problem    where  West thinks read     read beyond that Pulverizing Raqqa will only lead  more  real answer  worth Tuesday public  come  near Delighted  moderate  session  Gujarat Model with  dear friend Christophe Jaffrelot   Berkeley Among  Californian Woods were remotely self  would realise that those destroying  culture  folks like using Islamist terror  justify Hindutva bigotry  violence play right into  terrorists Those seeking  talibanise  violence need  draw lessons from massacre  Paris Horrifying brutality  Paris  another chilling reminder  what happens when religion  hijacked  those playing cold blooded politics thanks great  interact with      this  city When will have  open press conference  India like Journalists  India  allowed    questions  asks Modiji Crumpled Kurta    take    political Curiouser  Gadkari Naidu  they welcome With  religious polarisation defeated   moves   what   elected  boost  Good news Major  push  sectors Diwali  endless Pappu chopper when  need thanks   thought everyone spoke just heard  twice Superbly written take down  poll pundits  Mukul     sheer  supposed   calmer with Left Left March  March these  Monday Nitish bank  Lalu  create  victory   report What  trounced   sweeps   huge Time    rescue  remnants   Cheerio folks With great power comes great hope  will make sure Bihar wins    victory  theirs morally defunct folk    claiming first with Congress   Paswan loss   major stories  this election show your exit  should  ashamed voice roars  election sets charts    hurrah   Indian anguished  pusillanimous journalism which serves  powerful majoritarian atmosphere  becoming From  land  inflated egos  arrogance always  their comeuppance Many happy returns  respected  Advaniji with whom  honoured  share  Have  good Wonder  leads  seats    other Paswan looks decimated Stunning Mahagatbandhan powers towards majority     return Times  showing different  over until  folks Leads varying wildly across going creating history  Bihar generation laden with careerists   heartening    young journalist  courage  Bravo intolerance march  then whats  biased narrative Writers   fact alive  Dadri Would  hilarious    darkly tweets  woman journalist provide interesting glimpses here   package  Jammu  Kashmir  announced Everyone  Kashmir will announce Kashmir package news channel sponsors  poll  telecast because  agree with Sponsored journalism Delighted    Chandigarh  Fest yesterday  celebrate years  Biblio headed    predicts anyone  what they maybe   meeting  many   both liberals  nationalists vision  thoroughly progressively protection included     crucial difference cultural mainstay   well written dear   confused liberalism with  south Mumbai sleepover     Kabir liberals wrote person  adorned this throne before   also convinced    eternal   look  where   Arun Shourie Modi pushing India into  fundamentalist Arun Shourie  What  barred attack from  veteran Prof  Raghuram Narayana Murthy  Arun Shourie Lovely feedback   column Quoting  Only   regards  wife going     story   months satirical   movingly written novel  Bhima  Resident Editor Vikas Loved shout   colleague  winning Best Book Award  Tata   book   must Modi    convinced  will  against hotheads  sangh  Mufti Mohd Sayeed tells Great catching  with Mufti Mohd Sayeed Sahab  Srinagar today Instead  constantly bitching  libtards  words  Swapan  write  book creating  modern manifesto Rural electrification  Worth  read from Murthy   sickular anti national  Naxal   sent Kanshi    catch  with   campaign  need goddess dooj   honour male family Does   pray  long life   wife  Durga really More  ceremony Loads  folks reeling  names  Sirs   name  festival that celebrates  wife women   totally patriarchal feudal Instead  need  modern society where women should  need back   such delighted   know name  festival that celebrates  maybe  sister Darbhanga fears  religious tension before  report from Darbhanga Well analysed  Avijit Picture book prettiness  Bihar countryside much   cost  create outfits  visiting African  about  fund  kids predicting outcome  poll  popularity  undeniable across   Jyoti Basu  Bihar Lalu   fake    real Pappu Yadav tells    travel with This election   tough   gets  formidable foes square Bihar  Hurray   four lane Catching  with college buddy Kirti Azad  Darbhanga blame  when every party practices tells    campaign trail Campaign fever  district Bihar chopper with Pappu strongman  Kosi Modi  Shah will have  resign after Bihar  upbeat tells  report from Patna Monday take  effigies that burn  easily Humungous Narendra Shah posters  over Patna seem slightly   Locals  have  more take from  edge  still much more salient than ever  quota comment game changer gentleman called  Yadav  sits  your Patna gentleman called  also After Jaitley presser Raghopur with proxy  these Bihar polls thats This   byte from  lady    asked around  your party office   said report  Missing interesting    campaign trail with   looking better than     decade Good morning from  banks   Ganga Shotgun lambasts will return  Patna only  vote   Times  India Chatting with  irrepressible Study linking  aggressive  intelligence with right wing Health vanishes from Modi govt faces threat  repeated   national security crisis What  stimulating debate  show with  agreed  disagree  democrats Shout people even know what talking about Elite illiteracy   longer  luxury that  threat   guys  horrendous beyond belief Shri  little toddlers have been burnt alive  your state apparently   caste What   going   about Whatever  what kind  evil monster burns alive  sleeping What     this Wake  whats going   your Exhilarating visit   Lovely Devi ever victorious over evil ahead   show Capital View about Sahitya Akademi Awards  these books authored   awards International stands  solidarity with Indian writers Tonight Indian writers  guilty  double standards when  comes  tells Bihar    contest shaping Capital View    this wknd strikes down judiciary roars  stay   appointing judges Maharashtrian insecurities fuel  rise   must read this  even worse than Bahadur Shah Zafar This traffic this  civil Good move  declassify Netaji History must  based  primary sources  rumour take   myth    called Hindu towards  animal because  want   violent towards Gopal Gandhi Gandhi tells  writers returning awards   landmark more should With  obsession about other Time   mere bhains  danda kyon  Monday Writers returning awards   landmark more should  Gopal Gandhi tells show       trust after Babri with Ajoy Bose Badal  Nelson History  Amar Chitra profile    humour  mighty pegs Great    Kovalam  Fest with  colleague reading from  brilliant Uncharacteristically rude   mannered ground staff  Delhi airport this Whats happening   fave Excellent report  reporter Padmaja  Balanced  insightful talk   ideologue Rakesh Sinha     politics this wknd Post   inter community trust   show    this wknd India Today Cicero poll shows  shift  Bihar from Mahagathbandhan projected    behind Very good  hear  speak  religious harmony  please tell your party colleagues Shiv Sena feeling left    some Hindu nationalist action Ashok Vajpeyi returns Sahitya Akademi award  protest   right  freedom  life With  participation   freedom  Hindu Right seeks legitimacy from  Vedic This   must watch Balyan   caught  sting admitting they faked  registered fake rape This govt    tone that  threatening  inimical  freedom this Pigeons  firecrackers  welcome  Lets  forget Congress   inventor  sycophancy  public what about these anti national sickular Bhaktas  what about what about  point  India   crucible   idea that   generis Watch  full interview Yours  Mahatma writes  thank  letter   Monday live   country that banned  kind  India must never become  Hindu Saudi Arabia those countries your role movement   where  aspired  highest moral politics  murder  mayhem whats called bharatiya sanskritic This important book    must working hard      willing American colony  take Yankee  home  take  with  India  happy    American  Monday absolutely right  pursue investment  technology   UNSC just  club  rich columnist Balakrishnan should India   desperate  join  rather discredited club like Great catching  with Giving  accepted  views   thats trust netas  maybe  should have been Mubarak     brotherhood abound Modiji mocks secularism   Catholic country which precisely because    secularism tolerance allows  kids  sing Such  pleasure  spend  morning chatting   Karan  politicians were  erudite children singing shlokas raise qsns  secularism  food church burnings  murders  rationalists this   need instead  foreign take  virtual tour  India Excellent opposing hate religious targeting  minorities  being then  must opposing bigotry religious extremism  having  then    have There  also something called  sovereignty   independent nation What  this stuff with like your same  that trolls hysterically trended Devendra slaps Bombay High Court slaps folks Changal farmers  does  visit suicidal distressed farmers instead  travelling across launch this  Wishing both amazing women every success Always enlightening chatting with  articulate  Watch  full interview maybe   could have done  fact check  whether  journos Bombay  stays sedition circular issued  Maha well done your Overwhelming vote  Nepal assembly  acceptable  some meat  debate   full show here sound like  Islamic State bravest journalist  Shame  those threatening Rahul needs  reality check   rethink  entire strategy  Cong Amrinder Singh tells Always great  chat with  feisty  frank Amarinder Singh classes   everybody loves  Monday detailed conversation with    Mahesh Nehru other institutions  pocket borough   tells   this wide ranging after   image  Capital View this wknd Mandate   governance   erasing history hope   fully recovered fine scholar  unimpeachable integrity goes from Meat    issue   forced down Supreme Court beautiful Ganpati  love   peace abound this Ganesh good governance   food    meat earth could  resident  Jhabua collect   explosives   premises without  authorities knowing about Monday humour blog Monday take   wonderful Biharis  their political time     Bihar state   Monday full interview that trended this  Modi  Nitish  tragic watch here Neta because   dwarfism  Yogendra Yadav tells watch Sunday morning conversations with bhakts  Twitter  like passing   urinal   morning Have  smelly this   sign   guys  demographic which   Some Wins  both Left  Right  student polls Tune    show Capital View tonight Those    Left  dead better their books Catch  show Capital View   tonight puts   pollsters Catch  full intvu here Tonight     full interview  Bihar polls sure they   they  what they were promised ministers meeting with   crucial  Bihar      cadres     relies  sangh   footsoldiers Sangh cadres made rollback  Land ordinance  condition  coming   work  Bihar  source tells Caste arithmetic  Bihar  longer  Instead identities seem   more  good polls held   heading   simple majority  survey fish   joys   what  call  hardcore Will weep Bugle sounded  Bihar replug  detailed interview    whats Donning  psephologists talks    possible outcomes  Bihar Bihar   choice between naked majoritarianism   defocused caste Yogendra tells matter  wins  will emerge  predominant force  tells Sanju Varma   need   meat because mosques blare   this lady  spokesperson Republic Mumbai residents will have  sing  mila Will India ever  free  caste  full   show here Thank    overwhelming feedback   column today  bouquets  brickbats Tonight   caste quotas here Congrats   interaction with      forbidding supremo  generally Attagirl  your fearless fight that  brazenly lying handle author likely caste quotas best   affirmative    Sunday prayer  these little ones truly hideous Twitter    museum   sheer hideousness Thank    longer  prime time news  fifty years  time must Hold  candle  Indrani   avalanche  bitchy male moralism  women   about  thugs about  with drinks  their hands  claw their mnths  home  foreign where  Labour minister Bandaru Anybody seen Coverage  Indrani case  becoming rank  Grow please  some What bothers   Mikhail   trying  kill   last years    speaking  only Just when  think   worse Patel Patels want   OBCs  they know        take   great Patel Watch  Farooq Abdullah interview here Police sources  right wing Hindutva extremists could  behind  killing  Prof Kalburgi very Raksha Bandhan    Internet Hindu Take  break from  hostilities bhaisahebs thats what  call hurray   Golden nuclear bomb falls   will  ever combative Farooq Abdullah tells Shocking chilling story  Indrani  mother allegedly killing   Kaliyug Dear India will witness more social insurrections unless your govt starts giving things Bollywood scores over take Aisi Taisi what  bilateral dialogue should really  Some Monday humour   from need   hour  costs  Full show Time    call  chintan shivir  hammer   coherent consistent   proceed episodically through public tamasha seasoned responses from Amid fracas over forget Justified Full   show here Delightful   into dear friend just   delighted  learn    adviser   with cabinet minister Corporate wannabes will never make great that  need fearless sympathy   another only poor    jail  sexual Rich Most popular    winner with  Jayalaithaa  distant second with Today Cicero Poll Disappointment growing with govt  still Neta  India with  preferring   India Today Cicero poll Absolutely shocking what happened  When  dissent  protest become fighting  gender  woman  runs faster than many    woman  stains Mumbai  need  catch  filthy scum masturbator   waste time moral policing couples Heartfelt condolences  President Pranab Mukherjee   passing   Suvra Dubai  Saharsa Prodigious energy that keeps journos  their toes Cheerio folks great feel  right note before heading into Bihar Politically diplomatically when will India  strong enough  secure enough  host  visiting head  govt with cheering expats   cultural rural medieval society produce  efficient democratic good  from Kanti Bajpai Lots  good  still missing  overall original policy vision  More  election stump Happy Independence   Lets have freedom from  backward Pawar watch here Tonight   full Pawar interview Agree  disagree with   brainiest neta  rebuttal here worth pkged food   clears Spore clears  Maggi fails stds  probably  food government stages protests against this talk  faster  even faster    seem     phone show Capital View every Friday advice    break start  Dialogue  essence  Sharad Pawar Bill must  Oppsn   think  Sharad Pawar tells When  visits Bihar  must respect institution    vice Sharad Pawar tells Speaker  failed  give confidence  partial  ruling Sharad Pawar tells feel should come back  India  face Sharad Pawar tells Sabha Speaker  guided  someone  ruling Sharad Pawar tells absence from House  sending signal  does  respect Sharad Pawar tells have never seen  much bitterness   House   years  electoral tells Sabha shaken confidence  gives  much attention  ruling Sharad Pawar Sorry    years  parliament  assembly Senior most      years  electoral politics Always  pleasure  chat with  senior most Pawar Good Water supply  clearly effective  grievance redressal Have been told water supply will  restored Fingers crossed Thank   this Dilli  water  south Delhi colonies  past sheer hypocrisy   porn    country where choli  peeche     Monday take those instigating prejudice  violence against Indian citizens should keep their mouths shut  nationalism Extremely impressed    chancellor make   great school Does India need  death Full show  Capital View here What  honour  meet Nobel Laureate Kailash Tonight  show Capital View    time  abolish death scoop    speaks  father execution sparks fierce time  abolish death penalty   ETNow Time  abolish death penalty  Friday This story needs    flyer headline  channels Equal rights foul gang rape public stripping threatening  Twitter  about porn there   open transparent debate  least before comprehensively banning internet Moral police happening  enjoyed writing   when brilliant another film screening stopped   thekedars should  mere political made   politicking netas vying   seek  monopoly Delighted   quoted     wonderful writer Aakar Patel Trying  curb autonomy   will  warns India First then discussion   standard     only following Kapil Sibal tells commander  chief Military salutes  India normally given  heads  state   that often  heads   elected civilian govt seen   giving such impressive salutes  Modiji  doing  Kalam  normally   head bowed Commission currently holding consultations  death Until death penalty debated    moratorium  state killings This govt  only  sound  light Kapil Sibal tells only following  precedent     Kapil Sibal tells violence  pursuit  political  thus acts  terrorism  riot perpetrators must  punished  terrorists Hope justice will   given     Gujarat  lost loved They  need closure Congratulations  this well deserved Cursor Creeping India  turning increasingly illiberal under  present Women violent abusive trolling means upsetting  right Keep homage  lets also remember that     favour  death once asked  only  poor were  death Abdul  were  true  touched  hearts  every  will miss Deewana  secret diary     monsoon  humour column Monsoon  mirror   bitterly divided politics  full Yakub Memon   category   requiring death What about  those mentioned  SriKrishna report Yakub   about  about whether enough evidence against   justify taking  life Pachauri sacked after shockingly long When  justice  women  elite imagine fate  millions  women outside media glare Monsoon session floundering into Friday elect  govern saffron Amartya  take   dearth  intellectuals  global stature Horrific shocking case  Delhi girl stabbed  death because  protested monsters biryani  kababs  their  delicious  Monday humour blog your weekend reading  review   superb collection  essays Beyond Turk brotherhood Cong  face     policy  Friday Delighted   royalties  this Netas  funded  Their religion  welfare  Their  faith should   their   flaunted  public Politicians paid    payers  keep their religious beliefs Either celeb  every religion  taxpayers When   seen resplendent  saffron wearing double rudraksh  Nepal  then also  attending wrong symbolism Mind  either attends  religious rituals  attends Skipping Pres iftaar  doing ganga puja sends wrong final  anything that   banned  political parties religion  naked power festivals  public time      IMHO follow whatever faith   HOME precisely competitive rituals  netas thats brought  absurdity like  political party appointing itself  priesthood Netas should       faith  Please keep   public life they already have every possible What  earth    looking statutory violations under FCRA attract   What crime social media   voice  public opinion would give   unearned Mature stand    persist with with  inspite  Aziz stop talking Work  gave hope  many   bridge     raid    vindictive When  comes     Adarsh  Monday humour column  your reading this needed   super piece which deconstructs trolls  quotes  coinage interview with full show Talks with     tone towards positive moving well   optics however short term What happens    threats Will economic reforms split  Sangh Govindacharya talks   tonite Tonight  Govindacharya   should What  beautiful   lovely wishes  proud    baby Nawaz Sharif gives   breather from  daily scams  prime  breathe  soon  angry fake tweet lead  bomb scare   Airways These  chillingly scary some serious criminals hiding behind Sushma Vasu should have stepped down watch Govindacharya market economy needs  complementarity  public  Amartya  intvu Nobel Laureate  targets Modi govt  says  taking over Indian  intvu with folk taking over every academic scholars being Amartya  tells Amartya  targets Modi govt   tells  about  concern bout govt seizure  academia inIndia Amartya  targets Modi govt   interference  academia  extraordinarily  intvu sheer enormity  public policy failing   must read from Shankar Sangh outfits will never accept this  Bill  labour Govindacharya tells Monday humour from   your reading numbed  death  colleague Akshay  covered   Deeply worried twas hilarious wicked with superbly wild panellists charming  will repeat Exciting power packed launch  Much  being Director  with  brilliant show does India need    stop conflict  Watch full show here Govindacharya this disagree  fiery committed  ever Does India need  conflict  interest Friday Happy Doctors    docs     budding surgeon   making Wish    very best Very cool   Times Welcome    fest Grand launch  with Upamanyu Chatterjee Party  hapless warriors  Prime Time  Monday humour where would   without  underwrite your give   reason  build  shrine    your home since  love reading endless shows  Bansal Accusations   Endless scams   govt from    Adarsh were covered  detail almost  jail across   surely   case  much more media coverage than Visit    everyone  talking about  humungous    word even  local massive  scale  which  mind  even   blanked   mainstream media give  your Indian passport  have when Sachin Pilot interview   show here entire political   long  folks Tonite    fiery   stalled unless Raje  Swaraj desis have  understanding  what conflict  interest Sachin Pilot    will  stop protest until Raje Journalists trying     ques  manhandled  prevented from doing press duty  brute police there even  need  declare  Freedoms  curtailed  lynch mobs    money muzzles dissent recall  vigilant about  unleashed   press even today   daily Mathur already given interview Shocking statement  that  okay    treasonous   Congress govt   Unacceptable foreign govt  India   govt   tricolour depend  which party   power First  Praful Bidwai  early when  joined  first   Always  inspiration   courage first  Remember   Will  missed Uncle pitfalls  Indian tendency  create masis chachas  public Uncle Aunty Sushma Vasu  ties lead cant have  different   Robert   Dushyant Singh tells Getting  this  little late Lalit serious taint  Modi sarkar  manufactured show last friday Always interesting  chat with Sachin Pilot Count   Lalit Modi cocked  snook  Indian When Yoga became  stick  beat  gross injustice   heritage Hope catches  within    ministers used surgical methods  weight loss folks Have been doing yoga   twice thrice    think  would      politics religious Yoga  with tomorrow Pune this Have always opposed dictatorships within  Advani Have always been against dictatorships  opposed  even   Advani Those  power must guard against  Advani tells Many many congratulations  prestigious Fukuoka Prize think  anyone more Brand Narendra Modi could become Brand Lalit  Capital View tonight Such  delight meeting respected  Advaniji  Pratibha this morn Shocking horrendous situation with  many students parents suffer because  bungling  incompetence Those throwing charges  journos  their    telling foreigners  hide facts from person  valuable thing  pecuniary advantage without  Public Prevention  Corruption criminal misconduct   public servant   while holding office   public servant obtains ever well informed Fallout  Vasundhara  trust deficit between  public  Modi sarkar could become  yawning very   hear about  passing   genial   architecture   modern vision signatures appear  original docu filed   file lawyers  have Swaraj Kaushal   bono work    years    family When  constitutional entity tells  foreign govt tell Indian this surely makes  nonsense college admissions high stress  parents  their Heart goes    aspirants  stress  cancelled exam case  Priya valid passport holder   case  someone without   herself facilitates Scourge   governance systems best summed   that important   public govt policy towards Lalit    reversed  have been done thru  with  babus    flying solo should govts uphold  continuity  govt policy towards  indiv  unilaterally reverse govt decisions based  personal blue corner notice against  notice  Modi lawyer Interesting point  when  cleared Modi  actually fighting against Modi  Delhi    passport Congress  escalates issue   asks  Modi helped Modi Start your week with Hasina embrace    where   better Bengalis  take    Bong Theory with some elevating talks       search   just long time admirer  someone   always admired  guts  hate seeing corruption because this  helping  Suresh also Indians helping cancer medical care generally  better    than When entire campaign pitch  this govt    surely gross impropriety when  minister someone being probed Lalit Modi passport  problem  many detractors would like  make  Entire govt must answer  public body   supercomputer  have  read  tells  ahead  Yoga Capital View   rule   Watch  full show Tonite   statehood long term answer hearts must     yrold  scored  well   lost     night they were celebrating   drunk driving Statehood  only solution  Capital View Looking  wknd Pick  Padma Breaking superbly incredibly candid memoir   brilliant woman time  launch   keep them good  thump chests over violating another summer version  only potatoes  papdi   even more  patrel always  great starter power  Under cover  they throw  slander  scum exactly  this  incredibly brazen relentless loses    night they were celebrating  exam results because   grossly drunk lawyer shocking  little  scored  cent lost   because   gross Fabulous patra  undhio  lunch Dear kindly help popularise  joys  yummy Gujarati food  north Thought   when political insecurity masquerades   come  looking like Tomar self goal  Case     take praise   humble   politicians dictating  food fact somewhat   critic  more concerned with action With  show   energetic  pragmatic  foreign policy Foreign policy   Modi Watch View full show here Stephen Hawking says  there Tonite    foreign policy   Modi Laudable focus  wish  were equally agitated that  huge number  Indian citizens have  access  safe drinking Counselling after exams indefinitely delayed  errors appear  answer predicts India stares  straight drought would have blamed    asteroid collision  outer saying  achche    drought This government should have  grace  acknowledge  work done    Chidambaram This govt should gracefully acknowledge  work done   previous tells Very disturbed  hear  friend Kancha   column stopped  Asian  silence dissenting When NaMo   exclusive from  conversation that between  Modi such fury because  like  particular Clearly  views rock people  their  freedom When NaMo   take   conversation that between Modi  Manmohan Singh Today  perfect   lacking emotional intensity   Hrishikesh Mukherjee  Bimal teams behind  successful foreign idiocy clearly your  wonder year  Modi hope growth  missed year  Modi hope  missed Editors panel Tamil Rapid change  Bihar  Nitish NRIs  vote   politics  rooted  town   long distance hold    stuff    himself sending   these just  another This everybody  Twitter  this MODI stands  Murder  Democratic says Jairam Ramesh selfie  instant autobiography  unbound  take Cronyism more pronounced during Congress years than during Modi very best   become just celebrating  year     Railway Minister Suresh just celebrating   also introspecting suresh Prabhu Tonite   Suresh  need  manage expectations Tonight   govt    Suresh Prabhu tells scores  disappointed students after CLAT  something  wrong with  first online version thanks   dear Sonia Delighted that Tarini selected  CLAT with  good Very proud   baby girl solid  frills assessment   year  Modi Sarkar with Suresh Prabhu nurses  looked after angels  Every   without they brought  Aruna Generations  dedicated nurses since cared  today     anyone Interesting chat with  this evening guess never   organise things   Ciao Modi  Chow Haqeeqat  Mera Naam Chin Chin     Monday visual  against imply professional Really fail    dark glasses   sign  Whats Remove Remove security army pilots  wear sunglasses around heads Modi sarkar gets Divison   distinction after  year Delighted   director    Delhi Literary with  brilliant dynamic Always interesting  chat with  highly informed  expert Suresh Rise  Jaya  forced  embrace regional Much better than  imitation  Perhaps  took  advice Lovely catching  with  resplendent  minister this morning Jayalalithaa mighty women regional satraps once more   Neerja Monday take  heartless elitism Garib heartless elitism exposed Poor     heartless  Monday Hope your exam went well CLAT   best cheer  does anyone remember  languishing  jail without IMHO   role model  have been driving drunk  humbly submit    instead  trying  subvert Salman   then tried   driver  take using every legal trick   behaved like  coward Bollywood heroes portray angry underdogs  against  foul  real life they keep alive that foul Capital View this Shourie attacks sour grapes  well wisher Watch full show result that proved pollsters pandits actually    drunken  killed  injured   needs  follow criminal CrPc allows trial court  suspend sentence  when year term  accused taken into custody back When  rich drunk license drives  over poor kills   punished Arun Shourie attacks disgruntled  constructive Arun Shourie attacks Modi disgruntled  constructive Tomorrow really Father  Green Revolution talks    farm pitfalls  beef Beef  hurting farmer   buyers  cattle during Father  Green  tells Netas only   farmers Father  Green Revolution tells Govts   service   father  Green  tells that  reportedly going after Gates hope  remembers that Bill Melinda Gates  Padma Bhushan Bollywood romanticises rich  poor morality plays   real life they   money power  folks Cars must have accident insurance     basic  third party insurance without which cars legally without third party insurance cars legally read  full article people  should Does anyone know about  victims   Salman    died  were   their were  their gets loads  airtime sympathy    sympathy  What condition  they media reporting story from incl  riding     story   they even  insulted sure  eyes glint   mention    Classic scum guys  cutesy innocent such helpless pleading  crumbs  attention Nepal  designed   exercise  assertive Indian cultural appears   have been fully appreciated  that Today    journalists  sorry this nothing  government short hand  censorship Media must  open  Those  judge others must turn  spotlight squarely  themselves After Nepal folks trended Nepal  tells NDRF  wind  operations When  Turner everyone should interview with CPIM  Secy Sitaram Marxist  always open  Watch here Serious  scholarly explorations  media  sorely lacking    well placed Excellent book   colleague Behind  Billion  this     becoming media academic does your speech  haunt  read Hyper Indian  performance artists   kick from pleasure interviewing  thoughtful  articulate  always ruler must  talks   about politics    poetry book want      tool against tells interview with Sitaram full show COURSE  Hope  makes   fearfully tough  sailed through very best  luck  this aspirants  exams kick    baby girl   been studying Shourie  dynasty anti wait  read sure Watch  intvu with Sitaram Yechury     today many congrats well deserved When will India     take   rich care enough Modi abroad   wants  give NRIs  Sitaram Yechury     tomorrow Tomorrow  Intl Workers Sitaram Yechury talks    future Watch  labour   with  chief Sitaram Yechury tomorrow leader among Those  India lamenting horrifying killing  Sabeen Mahmud  have they also heard  Govind Pansare Narendra Concept  marital rape cannot  applied  declares   wonder    woefully  away from  gender just Rahul gets  political    found  political every  reporter using  mere backdrop  triumphant More less walkthroughs school exams begin this good luck    little girl Executive    heading towards  constitutional What exactly  abusive  about  words  Purely descriptive Interesting chat with Varun Gandhi this afternoon      more news sent  extra reporters    Asking this only Very disappointed with Whatever happened  your famous customer Always poorest  vulnerable  bear brunt  prayer Fresh tremors   pray  give help   time  seek political thats Showstopper Modi booted   quite Warmth abroad  chill Modi govt suited booted   quite  your Sunday reading Tonight   Cong   anti corporate India must  only democracy where political activists loyal  ruling party openly exhort their govt  squash press your twitter  says    member     politician very  someone  calls himself  member calls Offensive  pulled down Will  suit boot  Modi sarkar  wake    reality beyond social ceremonial spectacles  hugging foreign Gajendra tragic death  prompt    what kind  country   living      this billion dollar fighter tycoons     within communal poor  poorer farmers dead  prime time  gets news only from Twitter Tired   foreign media freely steals  ideas   done with  piece  intellectuals society   need thriving Melinda Gates tells Every society needs  healthy  Melinda Gates tells this   suit boot says  much more aggressive Rahul Gandhi   than  have ever Vipassana seems  have Wonderful talking  Melinda Gates this Cong embraces Land Will dharti pakad help   humour column Rahul  back    Congress still  Monday morning humour column sounding rather Leftist these days Meanwhile raving  media   nonplussed that messiah positioning himself   saffron What needs  worry about  that   party  poor     party   rich   wont Bhagat Singh  your    know about Hindustan SOCIALIST Republican where does that leave Agree  disagree with every polity needs  dynamic Cong realised that line been taken over   going  socialist Left Irony with sore throat   real fighter once again given  mazdoor line  Rahul  technocratic oration Congress stands with  kisan   Rahul Gandhi Modi  incurred huge debt from  business   thats   wants  take farmers land  help business Rahul Gandhi Modiji went abroad  said   cleaning dirt  last These words mock  hard work  Rahul Gandhi hands  ploughs  Rahul    going  take   more than decorative ploughs  make  political mvmnt Sitaram Yechury    Secy Link   this show Capital View    corruption with Officers must  impartial during Bhartendra Singh more democratic  internal  less corrupt  Sandeep Dikshit Money power liquor power cannot  controlled    Umesh Sinha High Command culture leads  abuse  money Muzaffar Hussain power  elections directly related  rule  feudal families  Muzaffar Husain Baig Political goons loyal  individual netas have moved from street  social their prime target politicians  their hired troll goons  target journalists  social election funding root    show Many congratulations Sonali Mukherjee  Wish  many years  happiness Sandeep Dikshit warns against  change  leadership  Cong looked exactly like  checkerboard design    view jamewar  much more classy that Rahul Sandeep Dikshit tells  this   right time   change  leadership have  been mistaken  this time  call  flag   called Overwhelming majority  Cong feels this   right time  Sonia   replaced  Sandeep Dikshit right time   change  Cong Sandeep Dikshit tells   Rahul   return well   fair   showcase  choicest collection anything that Nothing wrong with  Banarasi stole showcased  Varanasi   been Correct secularism  shaken  same  convince your bhaktas Hinduism  shaken  Wendy Trying    touch   both   Times  India   email Great panel  electoral reforms this Watch Capital View Gunter critic  morally stunted birth anniversary  that great modern Indian  must work  social democracy  just political fashion Check   designs here Sanjay Shiv Sena ally   ruling party  calls  Muslims   denied  Will  unequivocally denounce Politicians want  Fourth Estate   their  real  take Newstraders  media   easy  Media Trolls busily celebrating that genuine   been proven  only   Hohohahaha What       mention  Louis Vuitton  case  spitting venom against   world renowned brand many apologies   shawl    shawl after Nothing wrong Calm  said made fashion statement   whats wrong    view been certainly will when  become Fashion statement  with Louis Vuitton shawl  showcasing  Indian handloom would have been even Sena  example  Marathi super show  congrats like Maha   leave about NRIs  live    profess  hate western Nothing irks desi netajis more than  smart opinionated modern patriarchy  thus assaulted  both class Perhaps next step    participate   lively global debate   legalisation  with interview today with outgoing Chief Election Commissioner person shall  deprived  life liberty except according  procedure establshd officially South Indian states worst  money power    Brahma tells    prepares  retire this mnth Tribals   shot    police clearly   This   Thoughts  this Dirt poor tribals shot dead   real mafia bosses remain anyone  asks  qsns  star Nothing star about people   real mafia bosses fund political parties  they  always safe Time   judicial tolerance   police have right    these executions Will  constitute  judicial enquiry into  deaths   police   Nothing about those star activism    dirt poor only smugglers  shot   face  heavily armed need phase phases   Brahma tells    gets ready  demit office this disasgree with Prashant Aruna have enormous respect   democracy thrives because attacking judiciary  also sounding  warning   interfere    thus crossed  laxman Dushyant Dave sorry  started from PILs  Prashant Five Star Activists  Five Star Lawyers  defend cases Mukul Mudgal seems   warning judiciary from public interest litigation   comments could even  contempt  Prashant Bhushan Five Star activists would have been  rulings   Dushyant Dave star Bazaru anti national list  persona  gratas grows longer    these Nice chatting with   Brahma Slated  retire this Looks Salon  Khan  rudest nastiest hair stylists  warned  potential customers Does know that Draupadi   colour      take Happy Easter   there   resurrection   idea  ideals that make  unique   world your sunday reading   Intellectuals Gone Chillingly Even better than show  supremo culture  politics with Ajay crores   sunk into  India  have funded many schools Super piece   friend Rathin sure that  Twitter   hall  best   trust  completely Supremo cult    talk   Ajay Kumar  Cong   tomorrow which outburst Fact  does  minister know that over  million Indians live Justice   secret    secret  greatest menace  freedom   inert know  society  becoming coarse degraded when talking heads bend over backwards justifying every  down crudity know Truth  this world    back  cave mine   CRITICISM  fair skin hang  ENDORSING racism fair skin hang racism  HUGE problem   country Ministers should society fight  fair dark skin hang  when none other than Union Ministers  openly More than   brazen racism  which  gori sorry      line earth  openly racist Giriraj Singh stay   Union someone   taken oath  Sack Hear Keep trolling Barkha    still here  will  here would have    fight between Marx   take  intellectuals  mass thoughtful  important message Excellent piece What Cong  learn from decline  British Take same  sleep with your wife says Only  travel Prob with locating womens empowerment ONLY  sexual sexual vanity   ends   same trap Video   what womens empowerment    interpreted  about safe everyone  Thoughts  prayers with  thank   rain  stopped Happy that CBSE  marking   boards maths Daughter Tarini extremely good  maths  even  found    hard Those targeting   maiden over always part  take rajdeep  loads   worries  that news channels fans their team  shrilly blaming family truly produced   with Sanjay Gautham   Ishwari just tweeted  article from Blast from  past  Quiz Time India with Siddharth Basu   fifth from Journalists   Trip   Rajiv Aircraft news silly season  taken care rise above from  reconciler  pragmatists  intellectuals  activists cover story  Outlook magazine jtly written  Ishan Joshi This  anchor   Oxford Blue Replug    Bharat  Swadeshi  coverstory   Ishan Joshi rich only  last Unfair  call  govt    tonite Friday Venkaiah Naidu   candid feisty intvu with exactly  point   desis thrive  immigration policies  other countries   like immigrants some people maybe  from  countries prefer India ever have  tourism policy that will allow over crowd   cricket match  support  foreign Many   women drivers   road Where  most  some sporting event apparently ruling   joint sitting  parliament   options   land bill Always  pleasure  interview  candid  feisty Venkaiah Naidu Where does truth  Land Bill    overboard  consent  social   going  other Debate needed Need    solid informed debate  Parliament  Land  nation hear  views sirjee  tweets from years  still making most channels  flashing that Lutyens  tell  General  very sternly this morning   Duty  Disgust definitely caused Funny celebrate    call  activists   journalists   censored   muzzled that  same spirit will  apologise  Priya Wendy calling media struggle  relevance   changing political  take Mufti solve Kashmir that role belongs  Mirwaiz Umer Farooq tells Excellent   baat   Positive sign that  spoke  this  issue  nationwide debate needed  LARR your sunday reading  profile   inimitable Johnny Spring  Have  nice Sunday Kiss   online violence against proudly announces that Tonight    Anand Sharma  Cong failing    constructive Oppsn what     years joke from  school  today seeing Hajipur Teenage   India  This   Nirbhaya  Daughter Affected bile against post attacks    media assaulting   media gangrape  shoot Chronicle  deaths from Congress failing    constructive  talk  Anand Sharma Case against Manmohan Singh  political Watch Anand Sharma    with govt policies  domain  Court only rules  kickbacks nails Dilliwallas  March    beauty  here    fleeting  with those running shoes Glorious spring  Flowers  full weeks  bliss before   Mean Heat occur   that talking   Union Daily attacks against bile against masjids from  senior  late Prabhash Joshi once   Raghukul What    that   Julio Ribeiro feels reduced   stranger       these attacks Unacceptable disgusting remark  Sharad Yadav   must withdraw   unconditionally apologise Difficulty with netajis   that brazen lechery  passed   subaltern Sharad  just their brazen lechery  passed   native Sharad Yadav makes  clean breast   commitment  national  take just     under Case against  political Anand Sharma says     Drinkers     favourite  year  Nothing  touch delightful  with  brilliant  ever  Penguin Spring Full mesmerising allow Manmohan  function from  full intvu tonite Most impressive   gently  want your daughter  marry someone  only wants fair Came across    cheerio mighty   terrified   Priya  self mount  counter   Kudos Delhi Cong does  short march   long march  revival  needs  rediscover Bombs thrown  swine Dimapur Netanyahu speech    every   News going      with Cong awakens from stupor   going  take  long march   short   Lutyensland  really revive never   function from foray into higher govt AQUIRE land  profit   Jairam ETNow Delighted  moderate  public forum with    book Flood   Habitat Spring every Kashmiri Muslim with  beard  Mahmud    news analysis  ties criminal charges against  every Kashmiri Muslim with  beard   villainous Mahmud   leader govts want  they will have   channels   paid  price  being overwhelmed   surround poorer place without  were  best boss ever  acquires  editor  Mehta much loved boss Vinod Mehta   will miss  greatly  India will miss your irreverent valiant dear Disappointed     turned   much time left  ciao apologies from  that They named   which  turn  been given sheer quibbling lame hypocrisy surrounding this case just kills Lets honour bureaucratic  needless Jyoti needs  name restored     parents appeal last some journalistic   Nirbhaya Film Wholly Says Editors Guild  India naming rape victim surely does  apply when    Jyoti parents  clearly  docu they want  name Nirbhaya good name      more   call    name Jyoti Singh   parents Such fussy moral prurience Delighted  CFAndrews award  Alumnus   this  Memories  receiving  last found  lawyers scarier than Happy Holi  Lets always celebrate Very enlightening chatting with Jairam Ramesh    book  more sheer governmental ineptitude  rushing    docu without even seeing film reveals that this govt   being Goswami utterly insane that this film insults     tribute   young women daring  dream    life would urge   watch  Have posted  link daughter shows incredible courage  male bestiality that must  punished      must watch Daughter powerful  need  face realities   changing work Lift Your nuanced arguments  docu unfortunately played into  hands   moral police yours  channel that upholds  national interest  important From Cong    Akalis   diminishing returns word  describe    Nirbhaya stupid Catch  Amartya  interview Friday Netas   will  words like   will  docus that show   ugly truth about upset that  docu  Nirbhaya  been made  upset that  WESTERN  dared  show  some  India child marriage  making  documentary parents have  objection  docu being  should anyone Would   Satyajit  because  shows Dynasties fail when sons outshine their  take Cong  anointing Rahul   time when dynasty failing  every  edit piece today When   Goes Cong  anointing Rahul   time when  dynasty failing  every party incl  When   Goes Down final word  Nirbhaya bans  Docus with provocative intentions  some disservice   Cheerio that  course goes without very well moderated programme tonight already sparked  raging debate like yours  would stay away from public only those with  grammar Thank   your views   consider   illiterate misfit  civilised  just  opinion rapid meltdown into  heap  primeaval spewing inarticulate abuse  ungrammatical Trolls will call   filthy Reply   same coin  their feelings  they have  right  call  names   have  right    same Have huge issues with content   Nathuram Godse Boltoy  emphatically   support      bans though when   channel aggressively calls  censorship  another  approve    censoring need mirror  society   only rich powerful  India hold similar   poss thru provocation Nirbhaya docu IMHO Many Indian  hold pathetic neanderthal  them digression from real issues Troubles  could   routine strum  drang    resolution will have   swift Mufti will need  keep signalling  sold     news analysis swearing  colourful clash  Bharat mata     swear  name  report Antique water fountain  Raghunath  Jammu Raghunath   Jammu  city Power gathering  swearing   govt  Jammu Power gathering  Jammu  Mufti govt swearing govt   sworn  govt   peoples Mehbooba Mufti tells Nice    Jammu ahead    swearing  moment arrives govt  What  enormous    jewel  secular India will shine forth   world Delighted       Varanasi  Will  speaking  Politics  drop   nearby Whether  just     always Look   being     fave cities   time    Technex    speak  Indian Politics Those  call  shots  Cong must  those  bring value   tells cricket   patriarchal bachelor Governance  about driving  bullock cart thru   give govt right   Amartya Academic freedom  under threat  Amartya When  journalist takes  conscience call   have resigned from  Daily Capital View with what lies ahead  Budget Friday When journalists  called  asking questions about   disproportionate force   Cheerio what  meant  Indian waters  international patriotism justly inflamed when Italian marines kill  patriotism untouched when unknown boat bombed outside Indian Indian Express  worked Will   government  time  intvu today with  patriarch Mufti Mohd Sayeed fact  with such  mandate  perfectly justified when  says   usage   heard recently After years   with such  huge majority Interesting refers   tolerance reference usually made  Queen govt would   historic opportunity  Mufti Mohd Sayeed tells    interview Lovely  spend time with    only Mufti campaign  Indian Americans  revert  Indian when overseas supporters change citizenship   have problems with those changed their Betw hacks  hacks corporate journalism  longer what   questioning Media  must take sensationalisation three ills  modern learn from western brief media take pressers interviews  encourage favouritism  enmities with journos Instead  extremes  banning media  crony netas need  create  rational means  dealing with media   level playing field some   actually leave  original places  work  actually MOVE first post Polls record comments   intvu  part   larger piece  writing what makes  think look   this   your sluggish brain  trying    trying  find Carry Enjoy  rest  Sunday Monday Cheerio would love  reply   could kindly translate into Agenda   Garbage water treatment bypass  noise pollution male contact sport IMHO   highly patriarchal place where women  accessories never  view good cricket  such   male club wrong with that    women  identify with   strongly when  have   euphoric  justify   patriarchal territorial nationalism Always wondered   many women   excitedly worked  with  swaggering machismo  male   must super fast check   security check  chennai airport    glued   match Rahul wanted    campaign   allowed  Congress After that long Delhi winter  almost forgotten  bliss  warm Femfest  Satyabhama University celebration  women students With  incredibly stunning   Madhuri Dixit  Chennai this With  utterly charming Mary   Chennai this know Indeed winter   indeed people celebrated after Like crime   fashion also defeated media moguls  their supari journalism Tonight    show Capital View     Delhi vote have given reams  advice    Cong over  years that   anna worth     gets ready  Delhi makes India until tomorrow Advice  need  accessible  accessible govt officials    many local netas doing Advice  deliver smart governance  wealth   corporate   honest wealth Advice  create   accessible  empathetic shine  mandate will write  book     only thing that will cure your obsession with frame this reply from Sure made your Recording  episode  Capital View Manisha  ETNow Wonder  many Delhi folks voted against  because   daily bile from foul mouthed bhakts Delhi feels like   happy family this Strangers smiling  each morning walkers Hope  lasts media   this result   work  janta Advice from  build Delhi   model  urban transparent accessible What  victory     over  cent unheard They closed  Nadiad call centre Only   just  never lost  election advice  listen   advice   understands  paradoxes  political power better than most Health  political formation that   landslide been able  sustain  long before shine reality kicks Warning    become what happened   will happen   Your time starts Must  living    promise   since  interviewed   Rhodes modern POTUS visit before Delhi what  supposed     coup became money power channel   world will  sway Indian public  jaanti Lesson from   money power  channel   world will  sway  Indian public  jaanti this result only from  Cong wait until bulk  those  voted    have shifted wholesale  This   almighty roar against both  Cong earthquake   national Good luck  netas   hues  Delhi Counting  Whoever lets make  national capital  city   proud those   legit have nothing  fear political  moral pressure     that   such Investigations will have  speed earlier said only names   names plus more    only  after some names truly       have  little time every   indeed  bonus Dearest friend  colleague  were loved    knew other glaring rout  Cong  Delhi after  year  talk  Delhi what  Delhi staring  abyss Cong vote share  still then   into votes  middle class votes More gyaan tomrow folks Vicious personal attacks    gave  public  bhagoda became Exit India Today  these  Delhi high turnout usually means strong     incumbent Voting  Vote Delhi Meanwhile while netas fret     catch  late night shocking plight  Urdu editor Shirin subramaniam woman   extremely  joke Freshly brewed coffee favourite music recommended Delhi moderate Hindus  just defeat this space Moderate Hindus moderate Muslims  take  intolerance  surely conv wisdom Salil your relativism   reminds  blue cheese Such tremulous quibbles  surely confronted with more urgent realities hope  find ISIS equally have   Perhaps  missed  front    this Many more more moderate Muslims  speak  strongly against shocking hounding  Shrin Battle against intolerance this  recorded yesterday early evening Tonight   show Capital View   intvu Tonight    show Capital View ETNOWlive Religious intolerance  India today would have shocked says POTUS sheer with splayed legs making dirty jokes passing    high obediently laughing along Parties which spend  crores  worried about crore   Arun Living  Delhi equal  smoking  pack  cigarettes  Click here Aggarwal community   backbone   tells calmer person thodi thand ayee tells party which says women  have kids  security  tells national Whoever this election  been  much Interesting morning travelling with confident Indians dump  litter with  Monday blog   Great Indian Litterbug Much hilarity with Today     political  drop   free great   here lose  will  back  speaking  Oxford  tells Fridays  show Capital View   Obama  hype obscure Watch tonite Capital View    with  Obama visit Imperious humiliation   inability   elex  make Cong think seriously about Rahul Cong wants  must move   Rahul reform Cong  same time stay   unelected Severe indictment  Rahul Gandhi  letter   secret that never   with Tonite Capital View with  Veena Obama Subhash stormy petrel   Gorkhaland movement Congress  will shrink   will benefit from  Cong collapses below Spent days visiting East  North VERY strong tailwinds  much squib Travelling with today   campaign trail riding with this Catch   borne intvu coming soon shows  high diplomatic  take from slightly wrong note   persist  calling POTUS when latter stayed strictly with What  wonderful with incredibly communicative intimate  lesson which  news national capital heads   take   Delhi   Maximum Lockdown  south Folks avoid khan   Khel gaon  POTUS   move sure This have said before when  call  year   remember  takes    compliment Delighted   invited    Home where POTUS    bday party congratulations    their very thrilling  rainy conditions  bravehearts     that vertical raining   Magnificent setting  please   have some sparkling January Citizens   Indian  take   Delhi beats  other cities  urban Happy Republic keep  maybe just start with  press people  burn churches   must agree  Goodbye studios should     when netas  tags  pure politics problem  each have  right  hold  opinions  Wish   splendid evening journalists       fourth every right  disagree  abuse  uncalled member    should your language    little more first Republic love  Brit accents   India Radio questions rule imposed   press   House press Seems    following Great body language energetic  seems relaxed     good resist posting this Welcome share with  leadership your vision  vibrant civil  free press  political Superb piece   writers  barter their intellectual freedom  power  pelf from Unprecedented conc  power   single party  Watch full complete interview with worth this   with Tonight  with   Capital View Deleted  earlier tweet congratulating  says reports Will tweet once Delighted that  talented    book  Sibius Looking forward  reading Catch moderating global round table this morning    POTUS India gets  mojo President State   Union Thank   much Another publicity shot Catch candid conversation wish    that Yogen Yadav Locked down India Traffic nightmare  dilliwalis Security  high alert mins  stoppage time  India Gate India Gate locked mins  stoppage feel     only insurance policy  tells Meanwhile  traffic  clearing   indulging    trip down memory cheerio Remember years  thinking   name  came   great years  living Nothing like being stuck   traffic       philosophical lockdown  logjam  India Always  when  build something from scratch like   with CNNIBN life takes   different  change Soon will complete mnths   channel  with  much already seems  distant Every time   panels  always most impressed with  fierce   best team that   great interview  Kiran Bedi anointed    Love hate Kiran always been  tough   best Rajni Doyen  Indian political institution tireless crusader Capital View episode  with Jagdish Bhagwati Congress   terror campaign    Sari   showed Sonia   simple Italian Moro author From satyagrahis   become    Summit Watch  live  small steps  lead    Business Summit Spent  delightful morning with Javier Moro Pramod publisher   Sari  Sonia Congress tried  kill  Javier Moro author  Sonia   Sari tells Amartya    launch  Murty Classical Library Praying  speedy recovery   beloved  boss Hope   fine very soon reading pleasure this first ever profile  Amar Singh      Here Dear kindly provide citizens  full explanation Away from freezing Delhi looking forward  this weekend  warm Freezing rainy  crawling along   monster traffic    Ring Wishing   steaming must speak  against Hindu hardliners  they  undermining economic economist Jagdish Bhagwati shock Jagdish Bhagwati tells Recording Capital View  with Jagdish Bhagwati Recording Capital View  with Jagdish Bhagwati Friday searing piece from  courageous journalist  proud Indian Rockstar Freezing foggy   Spare  thought   hundreds  homeless   cruel Tharoor mania   anyone they were stupid enough     Delhi under nose Shocking numbers  homeless  Delhi almost every flyover groups  folks huddling  cold  threadbare Ache Simply  artistic IMHO    lightness  which  cartoons Nothing   with community Sudden adoption   desi votaries  Islamophobia post same breath they   silence sickulars Ordinances Capital View episode with Arun nails   unacceptable killing  were those cartoons funny Capital View tonight  Ordinance  NITI good Delighted that picked   piece Someone  describes himself   tweet below this reminded   need   free  fearless   courage   many journalists around  world press freedom  predicts  second Emergency coming soon Question  would  cartoon   Indian magazine  Lord Rama invite  armed attack Today   could  other journalists  stand    betw modernity militant traditionalism that your secret  pump Muslims must   saffron extremists push them into  take Remember well  last conversation with   distraught  Hope  soul finds eternal peace Shocking chilling that police believe full   woman  sparkling  touched Gratifed   response from Organiser   Christmas piece Lets  fearless Loved clever send     rituals equally  sense Capital View   year ender show with Capital view with Sagarika Ghose  Economic Times Video Jealousy   most dominant emotion  makes  world  superb piece Capital View with coming  tonite Growth  Hindutva Tonite bold reforms  social Fireside chat with very Happy  Year    peace abound Karl Marx said religion   opium   religion   opium   extremely well Happy  Year must    outriders  political Former hear  passing   inspirational public spirited make them like Year  fireside chat with  Capital View Friday Year ender fireside chat  Capital Watch Friday caught between  rock   hard place over with  report campaign hots  take    need  Freedom  Expression After Unity   Good Governance  about  Freedom  Expression  take People   News with biggest majority  decades today looking weaker than  Bihar writes Social media  about thought control political propaganda   piece introduction   Gujarati sheer brilliance from Aakar Patel Suggestion   Swach brooms  just  flimsy Provide modern cleaning equipment   footing Capital View  Whats  best ruling combo Looking   great read  Purulia  colleague Chandan night  rained from flipkart Watch Capital View with   tonight coverstory  written  colleague Ishan Joshi  Swadeshi wonderful  ties that govt will celebrate bday Another  fact  Good Governance  also birthday  Mohammad  Jinnah Hope  NRIs celebrated Good Governance Feisty  debate with with  Narasimha vibes  Christmas  very Happy Xmas    peace Merry Xmas Merry Christmas  Lovely memories  Midnight govt must bridge  between Jammu  Valley   editorial want  truck with Mehbooba Mufti  told    campaign trail  Kupwara hope   revival  fortunes  RahulG incapable there  upto your expectations  Jharkhand  impressive gains Powerful economic with Vajpayee best role model Capital View  show   first Will Mission succeed   Capital View Will Mission succeed  Capital View with studied  convent schools hardly felt  threat  when  celebrated  take Santa Claus  whatever  ministry  Christmas   thoroughly Indian year  which  realised just  much  value  editorial freedom   will ever Tonight Capital View   political show  with   Will Mission succeed piece     Ministry from Hell ministry   behemoth  Stalinist thought miny once described  Rajiv advice  Modi down kids enjoy  meddling  instead build capacity  editorial proud that  former Outlook boss  described    star Thanks Happy birthday      were present    happy  were once part   same miss  Friday night date with   Capital View   Modi suceeed  MIssion Recording Capital View  Will Mission succeed Lets remember Pakistanis   biggest victims  Time  voice  those Pakistanis  love peace  heard loud resolute What kind  crazed evil would  down children trapped    softest possible trying  play  Grinch  stole Loove Dilli   wish   sunny Cold grey  Perfect weather      steaming chai   plate Fascinating lecture   caring  elderly  major healthcare challenge must overcome  problem with  take Most efficient streamlined systems  place  license renewal   Some systems working well   land Hugely look   Reith lectures this week hearing   Oxford  book  must sometimes  lose count  just  many people  obsessed with thanks lovely meeting </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>