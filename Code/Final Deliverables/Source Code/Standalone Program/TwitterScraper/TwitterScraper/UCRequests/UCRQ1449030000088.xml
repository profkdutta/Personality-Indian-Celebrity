<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">Spoke  Jayalalithaa    flood situation  parts  Tamil Assured  possible support cooperation  this unfortunate Ambedkar made pertinent points  industrialisation empowering  Highlighted them Here   video   speech   Rajya talking about  Constitution Congratulations    phenomenal speech Golden Jubilee Raising  salute  brave  personnel recall with pride their rich contribution  making  nation Best wishes   people  Nagaland  their Statehood  hope Nagaland scales  heights  progress   years Sharing  speech shall live   Mahatma call  care   world that  shall Through research  must make renewable energy reliable conventional energy Talked about  importance  innovation  combat climate change   Innovation Summit hosted message     turn     power International Solar Alliance brings together developed developing labs institutions   common enterprise deepest gratitude   world leaders  joined launch  International Solar  made insightful Launch  International Solar Alliance fulfils  long cherished President interest support  been India  committed  climate  merely want higher incomes   aspire better quality  life India seeks  equitable durable agreement that leads   restore balance between humanity India Pavilion    window   aspirations Summit   have come together  shape  future   world health rich world must take greater responsibility  climate piece President  will jointly host  meeting  International Solar Will also attend hosted will inaugurate India showcasing harmony with environment commitment  mitigate climate Leaving  where  will join    will deliberate  crucial issues relating  environment climate begins   also hear   your wonderful interaction with media friends over lunch Mahatma Phule   Punya  towering  focus  education social reform touched many Austin   Constitution   social  only  legal  credit  this goes Spirit  parliamentary anecdote with Ghulam Nabi  exchange between Lohia Pandit suffered    there    trace  bitterness  greatness  Babasaheb makers   Constitution were remarkable Here speech    Sabha  commitment From  history  great women   gave   exemplary Informative exhibition  Parliament Library marking Winter Session  hope  will   productive rich  debate innovative Greetings    poll Best wishes   becomes India deeply values ties with congratulate Antonio Costa  becoming     look forward  working with   strengthen bilateral always uphold  ideals values   Constitution create  India that would make  founding fathers very mention   Constitution  complete without remembering  stellar contribution  Babasaheb  salute This    tribute   those great women   worked tirelessly  give India  Constitution   very proud Greetings  people  India   historic occasion  Constitution  this  inspire   know more about thank people  Singapore  their hospitality invite them  come  invest here discover  beauty   great Singapore visit  brief  extremely   meet investors This visit will further cement Great interaction with  dynamic Indian community  Sharing Interacted with investors  Explained  India   best place construction workers outside   Memorial Paid tributes   Also  families which comes under   many  visited maritime aerospace precision engineering Thank   taking  around Focus  technical education skill development Emeritus Senior Minister  Chok Tong played   role  strengthening wonderful  discussed ties ways  further reproduction  done from  cartographic collection   National Archives also depicts  description  various points   vicinity  Singapore town above  level   water spring Measuring   based   survey that  done during   depicts topographical details  parts Presented   reproduction      island  Singapore dating back friend     taking    impromptu outing  discover Watch this space Reached Will deliver  Singapore Lecture Hear   your Malaysian made great arrangements over  last  Thank   people  Malaysia Leaving  visit  filled with bilateral interactions investment  outcomes will benefit India Interacted with Corporate Exchanged views  economic Urged them  invest Taking Swachh Bharat Mission   parts    very good Torana Gate celebrates   cultural ties with Malaysia illustrates  commitment  enhance them even Diversity democracy connect India  want  further expand cooperation  trade Discussed  many dimensions  relations with  spoke  ways  deepen Lauded progress explained  scale  which India  Together  nations  achieve appreciate  love  Malaya Indians towards Remembered Subhas Babu  which  strengthened  many Malaya Splendid interaction with Indian They   living bonds Recalled  strong bond between Ramakrishna Paramhansa Swami Vivekananda while inaugurating Swami Will inaugurate  statue  Swami Vivekananda later interact with Indian community    Looking Spoke  need  closer economic mitigating climate change menace  terrorism  East Asia Birthday wishes  Mulayam Singh Yadav  pray   long life great also dial record your message   upcoming Share your thoughts  this bilateral meetings investment highlights Highlighted need  expand  trade economic partnership increase cooperation  development  Ocean speech    world faces economic India ASEAN  bright spots Meeting   always   comprehensive talks with    lunch Track record  ASEAN countries   will ensure that this century belongs Talked about    overcoming economic initiating reforms creating infrastructure  bring more investment  India ASEAN Business Investment  emphasised  India ASEAN being natural partners   must deepen  economic convey  good wishes   Almighty bless  with  long life great Wishing  Meghalaya Shri Shanmuganathan    pray   blessed with good health  long Reached Kuala programmes include ASEAN Business Investment Summit Leaving  Malaysia Will attend crucial participate  bilateral meetings seek greater investment Friends  Malaysia share your inputs   community Will meet some Officers shared presentations  themes like Citizen Centric Service Soil Health Card Mineral Exploration officers  batch  Interacted Urged them  make best    first years  their Malaysia     East  visit will build   trade Will also interact with focus will    areas  economic cooperation inviting investment During  visit  Malaysia  will attend East Asia Summit meet world Told young  officer trainees   uniform gives   power  empower lives  common Policy driven approach empowered  technology   best   eliminate Here short  Government  taken significant steps  check corruption black speech   Sixth Global Focal Point Conference  Asset Join  Bharat Shreshtha contest  MyGov share your valuable inputs  aspects  this Bharat Shreshtha   endeavour  boost cultural bonds  enhance interaction between people  various Central Military Commission always fortunate  receive Ashok blessings  condolences   family countless Ashok Singhal    force behind several noble deeds social which benefitted     inspiration demise  Ashok Singhal    deep personal    institution  whose life  centred around serving Balasaheb Thackeray  committed      widely admired  Tributes     Punya thank President  people  Turkey   exceptional hospitality during  Leaving been  very fruitful World leaders shared their insightful thoughts  global challenges held comprehensive discussions with King Salman  Abdul Aziz  Saudi working lunch  trade talked about  ecology economy  deeply Spain   valued  extensive talks with     make ties more particularly highlighted against corruption black money  steps  have taken against unaccounted remarks   resilient open global financial system   tackling corruption black speech  global economy   initiatives will   source  strength   world Thank  President   warm India cherishes  warm ties with Glad    Turkey nations should build support systems with  focus  nations with high growth Focus  infrastructure should also Spoke about  development goals  aligned with Also talked   importance   attaching  renewable lead intervention   working lunch focussed  aspects  development climate their Statehood  extend  best wishes   people   pray that Jharkhand continues  develop   years Theme  BRICS Chairmanship starting  will  Building Inclusive Collective Solutions united  condemning  dreadful acts  terror   part   Need   hour   combat  forms Reached Turkey  participate  Will meet world leaders discuss global economic security issues gratitude   British people Special thanks     personal attention    aspects Visited Jaguar Land Rover  focus  quality innovation Basaveshwara Statue unveiled today will   inspiration  those believing  democratic ideals News from Paris  anguishing Prayers with families     united with people  France  this tragic special thanks     fully agree with Team India Team    winning message   India awaits Amazing positivity  Gratitude Reached   community Talked about focus  British investment  India Prime Minister  interacted with CEOs    Economic times   vital aspect Discussions with  continued this morning Tanchoi stoles that   specialty  Varanasi were presented     Majesty Also presented   Majesty some Darjeeling  from Makaibari  estate  West Bengal fine organic honey from These photographs   Majesty  Queen date back   visit when    Chief Guest   Republic Presented  Majesty  Queen some photographs taken years  from  first visit  India First presented Aranmula metal  unique  protected handicraft from  some pashmina Also presented David Indian Voices   Great Presented   specially handcrafted pair  bookends made  marble Later today  will join  community programme  Follow news from   visit   Mobile Will continue talks with   followed   meeting with CEOs lunch with  Majesty Greetings  Bhai  festival that celebrates  unique bond between  brother sister Thank   sure   visit will deepen ties   people will gain tremendously from Proud emotional moment  certificate  Shyamji Krishna reinstation  Inner Brooke Bond curry  there  lots that binds India  must continue  deepen this bond speech   British Parliament focussed   strong future  ties  many Interacted with  Punjabi community   exchanged thoughts  various statement   media   press briefing with Some glimpses from  Guard  Honour  Official Productive extensive discussions with   ties global Thank    very proud   Indian diaspora  Their role  strengthening ties Spoke   Aung    congratulated India will  delighted  welcome Reached ties will receive  great Will attend  wide range  programmes dear sisters brothers  Saal  pray   peaceful  prosperous year Stay connected with  updates from  visit Leaving    hopeful this visit will strengthen economic ties between India   bring more investment great spending time with  troops interacting with Their courage patriotism visit  these places comes when   marking  anniversary    salute everyone  fought  that places  visited were  places where  troops laid down their lives while defending    proud   armed forces Today   very satisfying Visited some important places along  western border that  action just visited   Force base  Halwara  interacted with   This base  action memorial also displays  captured enemy  interacted with  brave Jawans landmark victory   forces paved    further success   western Just laid  wreath paid  respects  Barki  Memorial  which marks  fall  Barki town Paying homage  CQMH Abdul   awarded  Param  Chakra posthumously Asal Uttar Memorial marks  Battle  Asal which     largest tank battles fought within Indian territory During this battle CQMH Abdul Hamid single handedly destroyed enemy tanks helped stop their inspite  being mortally wounded Battle  Dograi   under  inspiring leadership    Desmond  adding  glorious chapter  history Battle  Dograi       toughest battles fought just laid  wreath  paid  respects   Dograi  Memorial Today   auspicious occasion    visiting  border areas  spend time with Greetings best wishes   Majesty Jigme Singye Wangchuck      blessed with  healthy happy Wishing people  India across  world President Obama  discussed  wide range  other issues    good knowing   marking short while   exchanged Diwali This   first conversation through  newly established Government believes  Sabka   part  this vital  citizens  know about  because they   means  achieve timely satisfactory justice Glad  share that  infrastructure targets  current financial year  broadly  track Various ministries  undertaking commendable skill development This will benefit  youngsters projects relating  renewable railways came   discussion   meeting Reviewed work done  infra Happy  share good progress  being made   infra projects discussed  PRAGATI Will address  conference  Legal Services  today Dhanteras greetings     pray that this very special  brings good health telephone conversation with Shri congratulated have learnt  much from Advani  Karyakartas like    best teacher  epitome  selfless Advani contribution   country    always been respected   person  immense knowledge Warmest birthday greetings   guide  respected Shri  Advani  wish Advani   long life filled with best health delegation  artists writers   Shri will enjoy reading this   speech  Delhi Economics There  something special about that draws  there  Always  delight  visit  gratitude   people Development projects that will contribute   progress Guided  Mantra  Sabka   ensuring that  fruits  progress reach every person  every part package  announced today will give  boost  development   state give wings   aspirations public meeting  Sher  Kashmir Stadium reiterated  message that India  incomplete without Tomorrow  will visit Shall address  public meeting  foundation stone  development Every major economic indicator shows India  doing better than when  took achievement that  worst critics will Ports  seeing rise  traffic operating Shipping Corp made pace  road construction Reform  that which helps citizens especially  poor achieve  better   Sabka Saath Sabka fiscal deficit substantially increased productive public about Achieving Today  spoke  length about  economy  efforts  transform lives through Discussed cooperation  infrastructure culture during  meeting with After   will join  Summit  Turkey where  will hold talks with world leaders  various global privileged  visit  house Ambedkar lived when  stayed  London  homage  this great want  boost ties between  Will address  community programme visit    aimed  strengthening cooperation with  traditional friend major economic Money build roads brings  speech while laying fountain stone  highway projects  Sonepat moment  launch  India Gold bearing  Ashok Spoke   gold schemes will contribute  women empowerment need  integrate goldsmiths  these golden launch  gold related Know more about these schemes  this Greater partnerships will give  boost  learning will benefit Conference  Rashtrapati highlighted  vitality  innovation technology   development Infra projects across Arunachal Chhattisgarh  were Reviewed progress  fencing     national security  there   question PRAGATI session focused  aspects relating   Dhan Also discussed issues relating Strengthening  historical bond enhancing video takes  through highlights telephone conversation with Nepal  Shri  Condemned  demise   youngster from Ecstatic atmosphere   rallies across development agenda  being appreciated across Today will campaign  Forbesganj  Looking forward  interacting with people These numbers tell  leaders should answer about their failure  provide good Action oriented   land Atmosphere  Bihar indicates people want People  seeing      Will campaign  Madhepura Haryana manifests  spirit    wish people  Haryana  their Establishment  pray Kerala Piravi greetings   people   beautiful State that  contributed immensely   development Blessed with natural beauty home  wonderful progress  been Greetings   Foundation Wishing  Kerala Chief Minister Shri Oommen Chandy  happy  pray   long life good Tributes  former Prime Minister  Indira Gandhi   death Saluting  Iron    Architect  Modern Sardar extensive discussions with African There  immense enthusiasm  deepen cooperation After  rallies  headed  Hyderabad House  bilateral meetings with African Scams Jungle   things   Bihar wants development people  placing their faith priority will  attached  trade  seek  enhance defence security Education  also  core focus partnership   want  make  ties more engagement with Africa will remain intense historic    opportunity  listen   whole   gratitude  African leaders  joined Congratulations   Tanzania  John  Magufuli   election victory  very happy birthday will walk  steps  rhythm voices     great future  this ancient proceedings      great Dreams   humanity gathered under roof Sharing highlights more pictures   meetings Some more glimpses   interactions with African Today   many African leaders  comprehensive    holding fruitful meetings with foreign privilege  welcome leaders  African nations   summit  historic will deepen ties with congratulate    came together worked   report  Rationalization  Centrally Sponsored delegation  State  presented Report      Rationalization  Centrally Sponsored Schemes Government will cater  Bihar does  need those   arrogant will take Bihar back Some glimpses from  Bihar campaign warmly recall  conversations with Lord  promised  meet  during    worked    enhance Lord Gulam Noon   hardworking individual distinguished  affection  India  Saddened attitude   infantry  always been  prized asset   armed Courage valour   infantry Salutations   ranks   infantry  Infantry  remember with great pride  infantry martyrs  lived died Expressed  gratitude   Nawaz Sharif   efforts that ensured Geeta returned Spoke   Nawaz Sharif expressed condolences   loss  lives    Offered  possible assistance from What  Edhi family  done   priceless   measured    happy  announce  contribution  crore  their think  amount  words  enough  thank  Edhi family  taking care  They  apostles  kindness Welcome   truly wonderful  have  back  truly  delight  spend time with When President  telling  about   mind went back   similar tragedy  Kutch  Felt very President told     quake  school building collapsed children lost their   very pained  hear President shared with   initial assessment    offered  possible Returned from Spoke   Shri Mufti Mohammad Sayeed took stock   situation arising    unfortunate have asked   urgent assessment   stand ready  assistance where including Afghanistan Heard about strong earthquake  region whose tremors have been felt  parts   pray Sharing highlights   campaign rallies Public participation    Calls  organ donation cleanliness after Diwali featured happy  talk about promises  have recruitment  select government jobs gold marked  start   year   radio Spoke   diverse range  issues from short while from Join    hear    Mobile Bihar     Phenomenal enthusiasm  Will address rallies Nalanda Looking forward interacting with  through want  congratulate  Sangeet Natak Akademi  their creativity efforts  promote Indian music insightful interaction with  delegation  members from Sangeet Natak ideals path shown  Gandhi   extremely relevant today they resonate with  charter ideals iconic buildings worldwide will  illuminated  blue   Sabarmati Ashram  Ahmedabad will India    forefront  various initiatives    committed  doing  best  supporting   their Greetings  everyone   completes years  service  committed   goal  making  world  peaceful hopeful  achieving stronger economic ties between India Also hopeful  deeper cooperation   other told over media persons from Africa  coming  This indicates  vitality   Summit optimism towards Exchanged views  relations with African journalists attending India Africa Editors Interacted with Trade Ministers from   here   Trade Delighted   results  Ladakh Hill Council  gratitude  people  placing their faith  Congrats dirty  Very valuable point raised     this With  message  harmony    walking across  appreciate  efforts commitment  these causes engrossing conversation with     scholar spiritual   Gita Laid foundation stone  Shri Venkateswara Mobile Electronics Manufacturing integrated terminal  Tirupati Airport will give impetus  religious tourism enable more pilgrims Spoke about efforts  growth highlighted  focus commitment towards creating developed Reciting   lines     very optimistic about Amaravati want   this city From  national capital   upcoming state from  Parliament water from Congratulations  people    historic  Amaravati emerge   capital world class greetings   Swayamsevaks    completes years  service Birthday greetings  President Shri  contribution   Party   pray   long life good Greetings best wishes   auspicious occasion  Vijaya Police Commemoration released also great meeting your whom   woken  early that Best have fond memories   visit  Canada  April   meeting with attach high priority  close ties with  share  strong bond  democracy inclusiveness enriched   vibrant Indian diaspora Congratulations  victory  Canadian parliamentary Your voice   share your Some  them will   part   programme this Have  idea  programme this Share    MyGov Open that will transform  banking launch  IDFC spoke  giving  boost  banking sector  rural Villages  great growth Kamal Thapa reiterated desire    stable prosperous Bapu Africa share  close Exhibition  talks about Bapu  connection with many events  being organised  promote friendship relations with Africa  India   major investor  Africa trade  been growing remarkably  recent India  proud  host  Summit reflects India desire  engage more intensively   better Warm birthday wishes   Governor  Shri   Almighty bless  with  long life filled with good Sharing  speech   Annual Convention   Central Information Naveen Patnaik  extend  greetings pray   long  healthy Rashtraratna before  always  teacher builder  great speech  Kalam stamp   honour   stalwart  left behind  distinct mark  Indian through science Birthday greetings   industrious   Chhattisgarh  wish   long life  good report    Swachh Bharat contains insightful material  creating  Clean Niti Aayog  Group  Swachh Bharat shared their  congratulations    their view more photos   interaction with family members   Mobile Will also request foreign Governments  declassify files  Netaji available with Shall begin this with Russia Process  declassification  files relating  Netaji will begin  January Subhas birth There   need  strangle Nations that forget their history lack  power  create told Subhas family please consider   part  your They shared their valuable suggestions with privilege  welcome family members  Subhas Babu     remarkable extensive Tomorrow   very special  will meet family members  Subhas Babu      honour  host Glad  join birth anniversary which includes unveiling   statue photo great hearing experiences   officers  various participating  training those Shubho  this festive season bring even more  prosperity only talks  development Mahaswarthbandhan  busy  personal Democracy  about  negative remarks Here   speeches  rallies  Jehanabad desire  change  becoming more more Urging  those voting today  Bihar  vote  large  particularly urge  young friends  cast their historic moment  dream come Laying foundation stone  Ambedkar Memorial  Indu Mills Feeling extremely blessed  offer respects  Chaitya life vision always Container Terminal  JNPT   part   efforts towards which Spoke  Shri  Congratulated  invited   visit  value ties with Nepal want  strengthen them even Going  where  will join various Nanaji saved life followed established  Prabha Nagar devoted himself  serving programme  mark birth anniversary   great walk down  memory with those  participated Spent time with Atal  George Sahab earlier   forget their pivotal role  safeguarding inspired birth  tributes   great Nanaji Saddened   loss  lives    bomb explosion  Condolences  families  deceased prayers with mood   punish those  have ruined sole focus  progress Shri Ravindra Jain will  remembered   versatile music fighting Pained   Condolences   family Bihar campaign Rallies  Sasaram Join  through  Mobile Best wishes  your birthday   remain  best health serve your country with  same energy Thank  Bihar  such  great Your enthusiasm makes  Here fight each Together  need  fight   speech showed Need   hour   create opportunities  youth  Bihar give  boost want  work   people  build hospitals transform message   talked  length    will revive agriculture sector  help  hardworking rallies across Bihar everywhere  desire  change  Here   picture from Incredible pictures from   Force  Valour    force  exceptionally Will   Bihar  will address four rallies  Samastipur Contribution    Force  They  always      protecting skies   times salute   force personnel   Force They have always served India with great courage Warm birthday greetings  Nagaland Shri Padmanabha Balakrishna    blessed with good health  long National  Memorial will   perfect tribute   brave soldiers  have given their lives Dear  well    fighter will overcome  illness  your trademark  prayers  with Greetings  your President  pray  your long good health leaves gratitude  Chancellor This  been  productive which  taken ties  newer Witnessing  various technological innovations laud Chancellor Merkel   vision where German engineering Indian  fuse  create world class software will move hardware across  talent will master technology  market will motivate Business Forum organised  Frauenhofer Institute illustrated  strong potential  economic tree  partnership will This partnership   force  good Discussed cooperation  clean renewable Climate change  Temperature rise   contained  change German partnership  Smart Clean waste education  taking concrete This will accelerate Very pleased with  discussions with Chancellor Merkel  broad range  outcomes that will benefit  nations Namaste Chancellor Warm welcome     look forward  fruitful discussions strengthening thank   enriching every episode with your inputs They  life This this last programme  marking  start   special What amazes     people from  walks  life have made Swachh Bharat Abhiyaan their   contributing towards Spoke  social making cleanliness  habit positive role  media  issue congratulate  their passion support towards Swachh Bharat Awards function   enjoyable programme with  serious message unequivocal support  Swachh Bharat Shall join Will spend time with those  made inspiring efforts   Swachh Dhan Yojana opened gates  banks   MUDRA  about enabling access  credit other traditional welcome must watch speech   Several issues  international importance have been raised Fully agree with  empowering  girl child  vital  bring about  change speech   rightly emphasised   need    forms  terror make  world  peaceful place  live wonderfully highlighted contribution  shared vision  what  must Just spoke  congratulated    excellent speech    perfect articulation   global Congratulated   recent    IBSF World Billiards Dear pained   unfortunate demise  your  thoughts  with  during this hour greetings   people  China  their National Birthday greetings   Governor  Bihar Shri  Nath Kovind    prayer   long life good postage stamp   great Ambedkar  another tribute  this farsighted contribution extensive PRAGATI interaction Infra solar projects  Afghanistan were Caught glimpses  programme marking commissioning   Congrats  Navy Looking forward  review important national projects with officials from Centre State Govts during PRAGATI Sharing some highlights   programmes  Silicon Birthday greetings   colleague Mahesh  pray   good health  long gratitude   American people   very warm welcome  hospitality wherever  delegation shared  thoughts   global issues   also  many world leaders  strengthen ties with  global opportunity  attend  wide spread  each  which generated many positive outcomes that will benefit visit demonstrates  extraordinary depth  diversity      ground  been covered  these homage   those brave peacekeepers  laid down their lives  ideals    make  world  better Summit  Peace talked about rich contribution towards peacekeeping picture   meeting with  President  Mahmoud Here  more details   meetings with world leaders meeting with focussed  advancing some   immediate priorities  broader strategic Fruitful meting with President India always cherishes values  unwavering support Urged     partner  programme during  productive meeting with Shaheed Bhagat Singh   birth  sacrificed  life  that   lead  life  liberty fruitful exchange  ideas with California Edmund Brown Discussed aspects relating  education knowledge during  meeting with Salman founder  Khan Academy Thank    warm welcome   attending  programme Warm birthday greetings  Lata  wish  good health Well done This   more grand accomplishment  Indian science Attended  roundtable  renewable energy with  CEOs  experts from energy more than commercial success They  powerful examples  social elaborated     encouraging  creation   dynamic ecosystem that will transform  lives Unbelievable vibrancy enthusiasm   natural engines  growth    transformation fruitful discussions with  renewable energy other Happy  have   Zuckerberg  sure  family  proud  what Mark created nurtured over Facebook Townhall   eclectic   Thoroughly enjoyed Dear   thanks  hosting  giving   tour   various technological advancements innovations Birthday greetings   great friend  Bangladesh  Sheikh  hope  always leads  happy healthy World Tourism  invite    visit India experience diversity warmth eventful Saturday    Indian visit Digital Here Manipur Governor Shri Syed Ahmed   experienced leader  held many positions   long political Saddened Thanks  showing  around  discussion   battery technology  help farmers Valuable interaction with   wide range picture   meeting with leading CEOs   Tech Interacted with  delegation   Sikh this digital   have  opportunity  transform lives  ways that  hard  imagine decades Highlighted steps taken    mitigate poverty through technology  technology  transforming lives  billion Digital India dinner  could   perfect picture  partnership   digital This will benefit  entire Landed   Jose   great Eagerly awaiting  programmes   coming More legitimate effective UNSC  needed  address global Here   joint gratitude  President Chancellor Merkel   gracing  summit sharing their valuable views  UNSC historic Summit after    comprehensive deliberations  reforms   Sharing Thanks  your  appreciate  role   look forward  meeting will host  summit  leaders  reforms  Will then travel   Jose attend programmes Speech  bilateral meetings interaction with Indian  highlights from meeting with President  talked about stronger cooperation between India wish Manmohan Singh   birthday  pray  Almighty that  remains  good health leads  long Talked about ways  further enhance ties during  meeting with  Stefan President Sisi discussed relations with Egypt With President Exchanged ideas  global development Spoke about regional  global issues with President  meeting  very picture   meeting with Discussed cooperation   meeting with  King Abdullah Just before  speech     meeting with follow Deendayal path create  India that  developed Have shared some thoughts beacon  selfless service  excellent     inspiration Pandit Deendayal Upadhyaya   birth anniversary interaction with Fortune CEOs   investment opportunities  India  they must come Digital technology   vital role  making democracy stronger  overall human resource Explained  media CEOs  India   great opportunity  them  many regional languages makes India even more special  invest American CEOs from media entertainment They were enthusiastic about  change initiative Discussed ties with President David Granger invited   visit Thank   friend   more insightful interaction  policy global meetings continued with world business persons media Here  some CEOs were very interested  They appreciated steps taken   make business Highlighted steps taken   improve business environment  India  this translated into increased  investor Roundtable with Financial Sector CEOs   fruitful exchange  views  economic Urged CEOs  invest  India  various great meeting with   Saint Vincent   Ralph another productive meeting with  Sheikh  discussed Warm greetings wishes   Muslim community across  world   special occasion Distressing news from Pained  loss  lives    Condolences  families   deceased prayers with  injured thoughts  with  countless people inspired  Dayananda Saraswati    powerhouse  spirituality Simply Great   these children recite Spoke about growing global optimism towards India  youth will take India  newer heights Overwhelmed   community programme  Recital  Shlokas  Sanskrit  children  very India   anchor  Asia Ireland   vital gateway  Europe bridge across fruitful meeting with India Ireland  form productive partnerships  technology other quite delighted  hear about interest  India   pursued   collecting information even shared that  went   Indian Embassy collected literature about India that would help told while   studying      project   country   choice  selected During  conversation with  shared  interesting anecdote from  student days that made  very Also presented  specially handcrafted piece  silver marble  roughly hewn sandstone Linguistic Survey  India provided scientifically based taxonomy George  Grierson conducted  linguistic survey  which  published over several years between Oldham conducted systemic coal mapping  India later initiated mapping  other  wrote   about fossils Thomas Oldham  appointed geological surveyor   joining    marked  foundation   Geological Survey selection  connected with Irish Thomas Oldham  George Abraham recognising their contribution Presented reproductions  selected manuscripts papers from  National Archives  India After will travel   York Receive latest news updates from   visit Leaving  where  will hold delegation level talks with Enda Taoiseach  Ireland interact with Indian Greetings best wishes   people  Saudi Arabia  Saudi National Birthday greetings  Sikkim  Shri Pawan Chamling  pray that Almighty blesses  with  long life full  good health Wishing  friend  very happy  pray   long life good Have always cherished  interactions with thoughts  with  family  Shri Jagmohan Dalmiya  this hour   Shri soul rest This programme included messages from people  cleanliness earthen diyas during thus completing  year   programme that  been extremely deepest condolences    unfortunate untimely demise     Sheikh Rashid  Mohammed  Rashid Indian diaspora  been  source  immense strength  Will interact with Indian community visit  West Coast will focus  innovation technology    further support them visit will build   substantial ground covered during  visit last year President visit  India earlier this visit   first     almost will focus  improving economic also hear programme  your mobile through  Modi Mobile Birthday greetings   youthful dynamic    good friend  pray   good health long These little cubs  inviting   visit Sanctuary completes    home  Asiatic    matter   that population  Asiatic lions  risen over initiatives  skill development MUDRA bank  dedicated towards which will become  engine  economic Also   great interaction with beneficiaries   They dream  better education  their Financial inclusion initiatives will change fortunes  people  Varanasi will  strength   fight against Integrated Power Development Scheme will rejuvenate  electricity network across India help provide Spent  fruitful    people from different walks  life discussed development grateful  President Putin   kind wishes Leaving  where  will attend various Nuakhai Greetings   people  Odisha  they celebrate  festival   this festival further happiness thanks     your kind  truly means  Totally humbled Thank  very much   kind Thank   much mention  Hyderabad merger into India  complete without remembering exemplary role played  Sardar Patel during those salute  those  sacrificed their lives  unity during  period   merger  Hyderabad State into Thank  very much President thank  President  Almazbek Atambayev   birthday greetings   wish   very happy birthday from Akbar Saheb shared  wonderful painting with  thank   this Samvatsari  this  further  spirit  harmony  Michhami Thank  very much  your kind wishes thank  Holiness    warm birthday spoke  appreciated  efforts  improving ties between India spoke  short while  congratulated  conveyed best  also thanked    birthday Dear thank   your Thank  Lata  have been fortunate  receive your blessings  many They give  immense Thank  what   democracy without constructive Debate makes appreciate your good wishes Raman Thank  Glad  know about  efforts towards  Swachh thank    kind wishes Nitin Thank  very much Sushma Dear Rashtrapati deeply humbled  your good Thank  very  learns  much from your wisdom insight valour sacrifice   armed forces during   remains etched   memory  every   very proud Spent time   commemorative exhibition  Golden Jubilee  Here  some Ganapati Bappa Greetings  Ganesh  Lord Ganesha bless  with abundant happiness fruitful meeting with Heads  Delegations  Developing This year  been historic   assure  unwavering support   progress success excellent discussions with  Emphasised  wider economic cooperation heard some   voice messages they were Keep  messages Some will   part   programme this Interesting effort  which enables   join this From  engineers have  pivotal role  realizing  aspirations  crore tributes    foremost Bharat Ratna Visvesvaraya   birth dear engineer greetings     salute your hardwork which  benefitted India Jewish community celebrates Rosh  extend  best wishes pray   wonderful year Congratulations   phenomenal victory   Your accomplishments make Townhall will  incomplete without your Share      Modi Mobile thank Mark Zuckerberg   invite  visit    Townhall Congrats   poll Looking forward  working with    further deepen Well played Congrats   great    very thoughts prayers  with  families  those  lost their lives   crane crash   wish  injured  quick rallies    said that time  negative politics  Cong must change spoke about OROP   credit   implementation  OROP must    poor PGIMER  happy that children from government schools joined  sure remember this civil  terminal will benefit people  Chandigarh nearby  will enhance wonderful with people form  Here  some inquiry will  held responsibility will  fixed   inconvenience caused   people inconvenience caused  citizens  especially shutting  schools    visit    totally Will visit Chandigarh where  will inaugurate  housing  civil  terminal attend convocation Addressed  Karyakartas    gladdening  people   have time again placed their faith salute Bagha Jatin   centenary    courage sacrifice   Motherland will always Accomplishments  have contributed greatly towards peace progress Congratulations   being conferred  Gandhi Peace This   fitting tribute   hardwork  generations outlined steps taken   Centre towards facilitating boosting skill development MUDRA agreed that  should look   scenario today   opportunity  India that must meeting with industry economists bankers    insightful constructive discussions  economic picture   meeting with Anglo Indian Richard   Shri George speeches   book also contains some wonderful Happy birthday dear Wishing  good health  long Space science   vital role  achieving good  space programme must benefit  common Emphasised   initiatives  areas  governance using space technology apps called  seeking ideas from young generation Meet  Space Technology based Tools Apps   given  series  insightful presentations will address Meet  Promoting Space Technology based Tools Applications  Governance Talked about efforts towards providing housing  other development metro journey from Delhi  Faridabad back   memorable conversations Will visit where  will inaugurate  Metro Line address  public Highlights   interaction with students     where  answered many  their Shri protection  natural peace  dialogue speech  Bodh Here  some more photos from Bodh been  unforgettable confluence  thoughts ideas that will   long   creating  better Some glimpses from Mahabodhi Feeling very Will join Global Initiative  Bodh Looking forward  interacting with Buddhist scholars delegates Greetings salutations   teaching community   tributes   great scholar teacher Sarvepalli congratulated  teachers conferred  National Awards  their determination their invaluable service teachers  have been conferred National  interaction good  have    good have confidence  yourself take answer answered Rabia question shared memories from  school Sarthak asked  Digital India endeavours towards electrification Anmol from Patna asked  about medical engineering students  what  answered will interest Beautifully sung   young friends from Sardar Patel Some glimpses from interaction with Interaction with school children   enthusiasm  children their curiosity  always part   tomorrow    will attend  programme very close   with school children productive discussions with  Highness Sheikh Abdullah  Zayed  Foreign Sankara Mandana Mishra taught   importance  healthy without  anger enriching interaction with various delegates  Through  video  shared  insightful themes  Samvad  conflict environmental consciousness Looking forward  fruitful Will address  global conference attended  Buddhist spiritual scholars other respected Dear President wishing   very happy   remain  good health  blessed with  long best wishes   people  Vietnam  their National  Government attaches great importance  strong ties with Bihar seeks  Govt which   Narendra Modi Governments must give  account  their work  focus   Cong  instead  work  Bihar From   response across Bihar  been Congratulations   Indian Cricket Team   historic series  against    proud   impressive Birthday wishes  Agriculture Minister Shri Radha Mohan Have known   years admire  humble   lead  long life great initiative   recognise  acknowledge  contribution  women congratulate  entire team  their efforts  compiling  Ramcharitmanas broadcasts   form years Ramcharitmanas  been broadcast  This   extremely commendable digital version  Ramcharitmanas released today will further popularise  great epic across also hear   Modi Mobile radio programme begins   short Happy birthday   spirited colleague   lead  long healthy Congrats  sportspersons coaches  will  honoured with various sports   proud  their efforts contribution Best wishes  sports enthusiasts tributes  Major Dhyan Chand  National Sports  sports sportsman spirit shine Check   your city  doing   smart cities recall  dynamic leadership  Shri  Bahadur    from  front    source  strength courage bravery   Armed Forces  very They triumphed over every obstacle protected unity mark  anniversary      brave soldiers  fought   Motherland Dhan Yojana completes    thank    those  have worked tirelessly towards Greetings   auspicious occasion thank delegation  Sufi scholars  appreciating efforts  work towards development irrespective  caste Sufism   integral part  ethos  greatly contributed  creation   society talked about  Muslim community must take maximum advantage  skill development initiatives   This will benefit Muslim youth delegation rightly pointed  that Islam preach hatred  Need   hour   marginalise forces promoting extremely enriching interaction with Barelvi Sufi Scholars from across delight  meet ministers from participating people organisations working  improving maternal child Summit will give  world  direction  improving maternal  child Another  another phenomenal accomplishment   Congratulations   successful launch Through live video conferencing with police stations   Karnataka   given  demonstration  progress interaction through PRAGATI covered many schemes initiatives spread across various India Seychelles  working together   areas like climate This will benefit Reviewed progress  digital rural infrastructure connectivity sectors   high level successful candidates  UPSC examination  were trained thank   Shri Laxmikant Parsekar  presenting  cheque  approximately crore towards continuous faith     humbling   fully committed  fulfilling aspirations  crore After  BBMP poll results complete   wins  This     politics  development good Thank   gratitude  people congratulations  Karnataka  leaders workers   great BBMP election Party Delegation from Rani Gaidinliu fought against  spread Gandhi message across  Northeast believed  unity Deeply honoured  inaugurate birth centenary celebrations   great Rani  life  truly sure  have    ideas suggestions   upcoming  programme  Share them told Balwant  must take vows that  inspired  service nation  also resumed wearing Balwant Kumawat  taken    remain barefoot till  became  till     good meeting    also From space ocean India  Pacific islands  cooperate  several spoke  many spheres where India will assist  Pacific such  disaster During  FIPIC Summit  have made concrete progress have demonstrated that geography   barrier  productive FIPIC  regional summit  Govt  hosted  India that   this summit will always  special Have   series  productive meetings with leaders  Pacific island will leave  stone unturned  fulfilling  aspirations   dynamic industrious people picture from  Ceremonial Reception  Heads  States participating   FIPIC thank   people  Congrats  Rajasthan  workers leaders   commendable performance   civic Urged scientific community  work towards mitigating problems India faces including   areas like health extensive interaction with eminent They shared presentations  progress Give  missed call  download Modi Mobile    many wonderful features  will enjoy using very optimistic about FIPIC  sure  will strengthen bond with  Pacific island welcome   leaders delegates   coming  India   Forum  Islands good meeting with  Sheikh Simply these pictures from onboard Mars Orbiter those  claim   inspired    joining hands with  same forces that humiliated Skill Training Centres inaugurated  Bihar will open several windows  opportunities   youth Better more enhanced health education package will fully transform confident that under bilateral ties between India  Lanka will Spoke  Ranil Wickremesinghe congratulated    wonderful performance Birthday wishes   colleague  admire  zeal diligence towards  Wishing   long life good Suvra Mukherjee will  remembered   lover  culture  warm nature endeared   everyone Pained  know about  passing away  Suvra  condolences  Rashtrapati   family  this hour Wishing  Parsi brothers sisters   start  Parsi   hope this year  filled with prosperity Navroz ties    grow   historic  discovered  areas  cooperate  invited investors    changes visit    opportunity  engage with  meet investors interact with Indian speech   programme  Dubai Cricket Electrifying   understatement  describe  atmosphere   Dubai Cricket   thank strongly condemn  blast   thoughts  with  families    pray   speedy recovery thankful  Akbar Saheb  this very touching   great meeting When  read about Akbar Mother dedicated     really keen  meet wonderful meeting with  talked about several issues agreed  need  stronger message  investors India   land  great explore  rich potential Masdar City   amazing illustrating  pathbreaking approach  urban development clean Glad  mark this special   Malayali community  where  community    presence  admired   industrious very thankful    Govt  their decision  allot land  order  build  Temple   This   great Spent time with Indian workers   ICAD residential Sheikh Zayed Grand warmly recall deeply appreciate  pioneering role  Sheikh Zayed Sheikh Khalifa  creating strong Deeply grateful   Sheikh Mohammed  Zayed  Nahyan   welcome hospitality deeply appreciate kind gesture   Highness Sheikh Mohammed  Zayed   received    airport Hello   very optimistic about this   confident  outcomes   visit will boost ties civic poll results   thank people    reposing their trust   salute efforts  Karyakartas party Here   interview with Sharing selected snippets from  speech    Fort Spoke  Delhi  Shri wished     prayers   long life  good gratitude  President  Independence     deeply cherished friend  will continue  expand Thank     Independence   warmth friendship   people  Bhutan  very emerge  every part  India must become  India years   only  Agriculture   will  Agriculture Farmer Welfare gave maximum strength  Swachh Bharat  children  they took These young voices will bring  smile  your From  ramparts   historic   address   citizens   great insightful address  Rashtrapati      Independence Greetings good wishes   people  Pakistan  their Independence extremely happy  know that PAHAL scheme    Guinness world record   Largest Cash Transfer will interact with  Indian community   programme  Dubai visit   will boost ties between  nations will enhance economic  well  trade Sharp  pointed speech  Shri    Sabha Birthday wishes  Nepal  Shri Sushil    veteran leader with great political  wish  long life good health Congratulations  best wishes    role Discussed  strong vibrant ties with  delegation   from these young friends from Vasundhara Charitable News  another attack  Kabul  very Such attacks  unpardonable deeply Condolences  families pray that  injured recover  spoke   Raghubar Pained  loss  lives    stampede   thoughts prayers  with  families   deceased  this hour  grief wonderful interaction with freedom fighters  Rashtrapati  truly admire their talked  length about  need  elect  govt  Jungle  opportunistic politics  taken  toll Greetings   people  Singapore  they mark years Birthday wishes  Gujarat governor Shri  Kohli  hope   blessed with good health  long strongly condemn  gruesome cowardly attacks   thoughts  with families   deceased prayers with  injured telephone conversation with  conveyed  best wishes Congratulations  Gujarat Government   inauguration  state     Station  This will greatly benefit Spent some time with   enquired about make handlooms   part   daily lives give  traditional handloom products  stature they wonderful video   handloom sector  vision   growth  this very crucial Handloom  programme marks  beginning   continuous movement  popularise handlooms improve lives learn about devastating floods  India stands shoulder  shoulder with Myanmar  this hour  need remember Shri Rajendra  from Surat   hardworking always immersed  public Saddened Also reviewed progress  power coal  called  stern action against power theft Emphasised  quick implementation  renewable energy projects reviewed progress  rural electrification   meet  energy Solution  problems  humanity   peace   walk shoulder  shoulder  create  peaceful free from homage   those  lost their lives   bombings remind    horrors   their effect shared included  wonderful painting  Lord Buddha    long eminent Buddhist scholar artist shared  book with many paintings Tian artwork contained  interesting   caricatures   visit  Here  some Chinese Tian    shared their artwork with Grateful  them President visit will  strength   very important ties with benefitting both Glad  welcome Filipe India   destination  Asia after  took prayers with  Authorities  doing everything possible    situation  being monitored very train accidents  Madhya Pradesh  deeply Deeply pained over  loss  Condolences  families Achievements  Indian contingent   truly They were  triumph  hardwork sportsman Congratulations   athletes winners   developed   that would contribute   Swachh interaction with more exciting features  Modi Mobile  Download Dear wishing   Happy Have  great year  pray  your long life   remain  good Wishing  Chief Minister  Shri  Rangasamy     remain  best health lead  long will  making  special announcement   from would  witness   important landmark event Have always cherished  interactions with Dada Here   such occasion from when Warm birthday greetings  Dada   devoted  life  service  pray   good health long Chaired meeting  issues relating  sugar Reviewed progress  incentive package approved initiatives include distributing study material  Classes through Tablet    great Shiv Sena They spoke   about initiatives  Yuva Sena   education Discussed aspects relating   handloom sector with weavers from Andhra Pradesh meeting with Shri Sher Bahadur former Prime Minister valour  Shaheed Udham Singh remains etched   memory  every    this brave   India   martyrdom Thoughts  written fruitful meeting with   Aung  Myanmar Defence meeting with Penned   thoughts  Kalam  phenomenal person that Kalam enjoyed being with people youngsters adored  loved students spent  final moments among mind  filled with  many  many interactions with Always marvelled   learnt  much from India mourns  loss   great  wonderful President above   inspiring   Abdul create  curiosity among young minds towards science  Share your inputs Share your thoughts  ideas   August speech from farmer creating  seeks  bring  qualitative change  lives create  developed Unimaginable fervour  Direction   wind  People want progress Eastern India must lead   when  comes  green  speech  ICAR Foundation rail projects inaugurated today will improve connectivity  Patna will cater  development Deendayal Upadhyay Gram Jyoti Yojana only lighten homes with  opens many avenues  opportunity Spent  very satisfying   Launched development projects addressed  massive congratulations  Rashtrapati    completes years  India  greatly benefited from  rich experience Birthday greetings  Harsimrat Kaur Badal  Almighty bless  with wonderful health   long pointed   need  raise global awareness  contribution towards welfare  society humanity elaborate exchange  ideas suggestions    observe  birth anniversary  Ambedkar during Research Initiative   wonderful which will greatly benefit  speech Wishing  young industrious       always remain healthy lead  long Birthday wishes   valued whom known worked with  Praying   long life good Looking forward  share  this Share your inputs  ideas with  combined efforts  labour industry   government that  economy will scale newer glad that crore workers  have portable  Account through Universal Account which connects them   online Talked about efforts towards welfare  workers emphasised  innovation that will benefit Talked about importance    Indian Labour Conference  launched National Career Service Portal ESIC Will inaugurate Indian Labour Conference Join Live Remembering  apostle   shining beacon  democracy  champion   beloved Madiba  Nelson Mandela Rath Yatra brings back many memories from Here  photos from  Rath Yatra Wishing everyone   auspicious occasion   Rath greetings  this pious occasion Ashadhi  Kutchi   greetings   Kutchi   coming year   filled with prosperity Spoke about  need   political untouchability   divide  heritage  partisan From  programme  mark  birth centenary  Shri Girdhari delegation expressed their firm commitment  Naga Peace  talked about efforts towards development Nagaland   Zeliang  member delegation  MLAs across  political rail network  being created  addition  enhancing  existing network   cost Under SARDPNE  Crore will  invested  develop Highway  connect  district headquarters   lane last year  seen  significant increase  infrastructure investments   Centre want  nurture  spirit  enterprise among  youth empower them  lead  life  dignity Through  skill development   strengthening  surplus manpower with skills abilities  tackle global When  comes   progress prosperity  farmers   have   there   room emphasised   Centre States working together   Also appreciated efforts meeting   Governing Council    very fruitful discussions  several Congratulations  efforts will provide rich insights  enhance  understanding   solar landmark feat  space exploration  aptly named spaceship sends back data photos  Pluto from almost billion kilometres away That  kind    keep affection   best source  inspiring   keep working will also chair  meeting   Governing Council Will meet   Northeastern states  development projects about  Northeast will  discussed Governor  Aichi Hideaki spoke   discussed  situation with  State Government  working  restore Deeply pained   loss  lives   stampede   condolences   families   deceased prayers with  injured good wishes   pilgrims   start   Kumbh Mela  Have  wonderful filled with Strong ties between India Central Asia  important   future that  seek   countries complete  tour  Central  visits  these nations convince  that India Central Asia must reconnect   larger Tajikistan visit  been   laid foundations   enduring Thanks   people  their natural  India Tajikistan  cooperate extensively  Together   achieve Have attended programmes  manufacturing overseas    attended  Workshop  Agriculture Bust  Gurudev Tagore highlights  deep cultural spiritual links between India India Tajikistan have formed  deep bond based   shared aspirations  desire  have peace Spoke about defence cooperation combating terrorism extremism   joint press meet with President Abdul Qadir Bedil  regarded   master  Persian particularly  Born    greatly influenced Presented President Rahmon  specially commissioned miniature painting   tomb   century Indian poet Abdul Qadir very heartening   Sumit Nagal   Congrats best wishes  this young More good news from Congrats again your accomplishments  truly inspiring they make  very seek  take ties with Tajikistan  newer heights through this visit expand  scale Goodbye Thank    people  this wonderful nation   extraordinary  ties     become Very happy  initiate phase  Mountain Research Handing over medical small contribution from India   valued friend important Launched links with   Central Indicates  technology   used  touch happy    enthusiasm during inauguration  Gandhi Several people from Indian mostly young students Mahatma message  Glad  have inaugurated busts  Gandhi   Central Asian Sharing  remarks   joint press meet with President With   meeting  very positive   both optimistic about  ties between Presented President Atambayev  carpet  very fine grade wool blended with Well played  played wonderful tennis registered  fantastic     proud very Reached   optimistic   very good  that will enhance ties between This visit  Turkmenistan  been  have achieved substantial progress  deepening cooperation between very happy  join  programme  inaugurate  Traditional Medicine Yoga Centre there Melodious singing  students learning  Hindi Pictures from  visit   National Monument Laying  wreath   Mausoleum   First Presented President Gurbanguly Berdimuhamedov  specially handcrafted horse Discussed various aspects  cooperation with President Gurbanguly Sharing some glimpses from  ceremonial welcome earlier Wishing  hardworking Rail Minister Shri  very Happy    blessed with good health lead  long Successful launch  with  satellites   moment  immense pride special thanks  President Putin  being  exceptional host during  stay leave fully satisfied with  ground covered during    meetings talks have been Plenary expressed gratitude   members  accepting India   full member assured full cooperation Here  some pictures from  various meetings programmes today Warm birthday wishes   valued grassroots leader  dear  pray   long life good great meeting with President   very optimistic about  potential  strong President Zuma    wonderful Discussions were centred around strengthening Africa Given    create excellent synergies  many  results  which will Business emphasised  merits  close economic relations business engagement with  developing regions Discussed  immense opportunities  economic cooperation among BRICS Nations with Indian CEOs during Proposed  setting    Agriculture Research This will help  efforts  make agriculture more speech  spoke   strong cooperation between Nations    entire world Great meeting President  Jinping  talks were comprehensive    topics came hopeful  productive meetings interactions   BRICS  forums  attach immense importance very special     Nation whose remarkable friendship with India  always been Thank   leave this wonderful nation with  renewed faith that  ties  going   even better   years Sharing  remarks   joint press meet with President very fruitful meeting delegation level talks with President Here  some photos from  ceremonial welcome this must President Nazarbayev  held  Congress  Leaders  World  Traditional Religions every three years  Astana since Business talked about  strong economic ties between India Kazakhstan Concluded  speech with these  lines penned  Abduraheim will create  Asian Century when   Asia   East Nazarbayev  talked about  need  work together  build  Silk Route Massimov   very optimistic about  future   meeting today  very happy    very valued friend  Central memorable visit   will strengthen Spoke  people  people connect cultural ties  interaction with Hindi students Indian community Indian language music  very popular   Uzbek radio completed years  Hindi short while from will interact with Hindi language students Indian community members  Looking Dear warm birthday Praying  your wonderful    blessed with  long Amir himself born    link with    land from where  father work  written  Persian  profusely decorated illuminated with colours including gold Delighted  gift President Islam Karimov  specially commissioned reproduction   Amir Future  very bright   remarks   joint press meet with President President Karimov  agreed   need  improve  economic  also talked about cooperation discussions with President Karimov were very aimed towards further deepening first meeting  Uzbekistan  with  Shavkat Miromonovich    fruitful Hello  thank  Shavkat Miromonovich Mirziyoyev   warm welcome  Wonderful being Leaving    follow  latest updates from  visit  Central Asia Russia India  yearning   digital Effort towards   encompassing aimed  transforming Answered questions  mobile empowering citizens through technology other Gladdened  response  Technology     means  evolve Birthday greetings   colleague Shri  Vilas   live long always remain  good visit  Central Asian Nations will enhance ties with this  scope  cooperation  very Monday  will commence  visit  Central Asian Nations where  will attend  BRICS those  clear  such moments   part  This must  deter  from your future  best Congratulations   those  successfully cleared  Civil Services Exam  best wishes   begin  journey  serve Inviting tech enthusiasts  share their views using Will   answer some questions overwhelming response along with    insights inputs  initiative  inspired   have Would love  hear your insights views    talk people   very Happy wish      party colleague Shri Laxmikant Parsekar     live long always   best Warm birthday wishes  prayer   good health  long life   Governor  Tamil Shri Swami Vivekananda   Nirvan    enduring source  inspiration whose thoughts influenced several people Also urged officials  focus  connectivity with ports ensure adequate tree plantation along   highway While reviewing highway construction   emphasised  ensuring good connectivity between road projects Road infrastructure     development   Reviewed  progress   National Highway Programmes Congrats  these Kudos  their innovative zeal proud  their efforts  create  Clean Know more about  National Policy  Skill Development Entrepreneurship approved regulated markets across India will  integrated with common This will  hugely beneficial Scheme  Promotion  National Agriculture Market through Infrastructure Fund  been approved Krishi Sinchai Yojana will fulfil  dream   enhancing irrigation facilities representatives  Global Poverty rather late  wishing  doctors      Both have  role  play  societal From making electronic goods that  globally competitive  enhancing cyber India must show Emphasised  giving digital strength   demographic focussing  mobile governance creating  vibrant Today  commenced  special journey towards  where technology will play  pivotal role Home Shri Kiren Rijiju  going   locations  take stock    team from NDRF  extending  possible compensation  lakh from  PMNRF would  provided   families Deeply pained   loss  lives    landslides  Darjeeling Condolences   families Today   taking  landmark step   quest  create  Digital Dear wishing   very Happy  Almighty bless  with  long life filled with good Warm birthday wishes   Chief Minister   Shri   always remain  good health  blessed with  long good wishes  Governor  Haryana Shri Kaptan Singh Solanki    pray that   blessed with good health  long Discussed initiatives  defence civil aviation during  meet with  Bernhard delegation lauded told  about their  initiative  improve discussed issues relating   They appreciated various Govt News   plane crash  Indonesia  deeply  thoughts  with  families   deceased prayers with those Very proud    wonderful victory   Canada Congratulations   brilliant Amazed   fantastic response   remarkable  people across  world have chipped Thank   sharing Lovely Thanks  both   mother working towards modernising agriculture focussing  increased This will benefit spoke about water conservation tree planting among other issues during eagerly awaiting  Varanasi visit  unfortunately    weather    Sincere apologies   people also hear  programme   your Will share   short while from Will  foundation stone  Indian Agricultural Research Institute  Hazaribagh will inaugurate  trauma  foundation stone  various development projects address  public Tributes  Shri  Narasimha    birth  remember    wonderful scholar with very rich political know  forgotten  thought remind forecasts perceptions  corruption  investors better Investment  India   world  coming  explore  opportunities India remain grateful  Djibouti   strong support active cooperation during Yemen  indicates  robustness   ties Independence  convey  greetings best wishes   people  India truly cherishes  ties with thanks   Wonderful seeing  wide scale participation Delighted  receive your message  Thank  enthusiasm across    Yoga   extremely progress  humanity lies  brotherhood   terror mindless violence against thoughts prayers  with  families loved ones  those  lost their lives   cowardly attacks  Kuwait book   highly personal account  interactions between  very respected Delighted  receive book  Spiritual Encounters with Pramukh from Brahmvihari Swami wish  people  Madagascar   occasion  their Independence Dear greetings best wishes  your  Almighty bless  with good health  long extend warm wishes   Cabinet Shri Ashok Gajapathi Raju pray   long life  good These initiatives mark  paradigm providing  people centric approach  create world class urban Smart Cities Mission Housing   mark  watershed moment   quest  create better futuristic Three major initiatives towards urban development will  launched very proud   excellent work   doing across   noble efforts have always created  major impact tributes   former Prime Minister  Shri  Singh   birth Warm greetings   people  Slovenia  their Statehood   very optimistic about  strong ties between their Statehood  convey  greetings best wishes   people   Nation which  deeply valued vibrant liberal democracy        everything possible  further strengthen  democratic ideals Emergency   great opportunity  work with  wide spectrum  leaders organisations fighting   same return Emergency brings back many   learnt   during very proud   lakhs   resisted  Emergency whose efforts ensured that  democratic fabric Inspired   call  several  women across India selflessly immersed themselves   movement  safeguard mark years    darkest  when  then political leadership trampled over Also discussed grievances relating  passport delivery ways  enable quicker processing  passport PRAGATI reviewed vital infrastructure projects  energy Next  programme will  held  Share thoughts ideas   programme  MyGov Open Released  Tape    then written  Gina Syama Prasad Mookerjee   Nirvan  great thinker  remember    service   Nation deepest condolences   Missionaries  Charity family   passing away  Sister Sister life  devoted  caring   poor Saddened     soul rest their National  greetings   people    confident  ties will  even stronger   years also emphasised  greater synergy between Digital India initiative programmes related  Sarva Shiksha meeting  Sarva Shiksha called  identifying embracing  best practices  education that  benefit sure  will enjoy reading about highlights  celebrations across officials from Soft Bank Bharti Enterprises Japan Bank  International Thank    touching message your good wishes   agree when   people will greatly benefit from Thanks   support Prime Your participation will inspire several people  Bhutan  practice Yoga prayers  with those  stand shoulder  shoulder with  people  Afghanistan  this attack   Afghanistan Parliament   despicable cowardly There   place  such attacks must take forward  enthusiasm seen during inspire people  make Yoga   part  their daily Thank  President Rousseff   kind words  Yoga  spirit with which Brazil joined Yoga congratulate each every person  practiced Yoga today made world  celebrated with immense Across  people have joined  large This   great people belonging  nations joined  programme  world records have been Yoga truly Sharing  speech   International Conference  Yoga  Holistic Tremendous buzz  social sharing experiences showing Have  look   people across India  world  marking would like  thank Rashtrapati   joining celebrations  Rashtrapati  very special encouraging will join  programme   Delhi   short   watch  programme some parts    rays    have already been welcomed  people practicing will continue across  world Greetings  people around  world  International   Lets pledge  make Yoga  integral part   daily lives Tomorrow  world will celebrate  first  urge      part   inspire others  join Wishing   very Happy Hope  have  wonderful year participate  this survey  innovation This video takes  through  features  advantages convey warm birthday greetings   Governor  Droupadi Murmu Sharing  statement during  Joint Press Meet with President President    comprehensive  productive talks well   know    know through this unique Greetings   Foundation    Anandpur This  truly  special historical Wishing  Congress Vice Shri Rahul Gandhi  Happy  pray   good health long Greetings   Chief Minister  Manipur Shri Okram Ibobi Singh    Almighty bless  with  long life good Here  more about Bhramari  benefits    must practice farmers     progress  possible steps will  taken  their Spoke about  efforts  provide soil health financial inclusion social security schemes  they will help farmers farmers expressed gratitude over  decision  provide crore  sugarcane farmers other steps brilliant interaction with  group  farmers from various districts   spoke  length about  steps taken Maryam donated each  PMNRF Swachhta interest  various religions   inspiration young Maryam Asif winner  Bhagavad Gita Champion League organised Talked about technology investment opportunities  India with John Greetings   people  Seychelles  their National move  which   very important aspect  Discover more about Anuloma Viloma From  Siachen Base Indian Army Personnel practising  geared visit  President will further cement  close friendly ties between India Mobile   several innovative   download  from Play Feedback greetings best wishes   people  Iceland   occasion  National More about  Asana about which representatives  They were appreciative  Beti fishermen released will  able   with their families  observe this blessed Also conveyed   Sharif  decision  release detained Pakistani fishermen  this pious Spoke  President  Sheikh Hasina  Nawaz Sharif  extend  best wishes   start  holy Ramadan  June Pavanmuktasana  many benefits practicing this Asana regularly will surely enhance your Living life   full make  impactful contribution towards Have ideas   digital India  transform  Then  must participate    Digital India positive mind brings  positive change   which  most India  very What  need   create right opportunities enable  poorest   poor  become totally  tribal communities must become prosperous this  vital   developed Released    Islamic Perspective  Knowledge  Education Indian merely sharing aspects about     must practice Yoga inspire others Impact   Dhan Yojana recently launched social security schemes  tribal communities were also India will prosper when  tribal communities Today  chaired  meeting  progress relating  schemes  tribal meeting with Zhang Chairman   Standing Committee   National Congress   very Discover  salient aspects  Setubandhasana   benefits  this Greetings   people  Odisha   occasion  Raja  this festival bring happiness prosperity Makarasana relaxes  body   useful during back problems orthopedic Staircases were cleaned along their walls paintings  officials their spouses were  creative Ajit Seth  shared with  about   unique initiative  Cabinet Secretariat  promote  spread message After  distinguished career spanning Cabinet Secretary Shri Ajit Seth retired Best wishes    phase Members  Naga  Naga  They appreciated efforts towards development wonderful meeting with Finance  Sharan Chand  will always  remembered   artistic genius fabulous creation that  cherished    soul rest good wishes   people very good  stress helps remove backaches bronchial birthday  extend  good wishes  Shri Narendra Singh  pray   good health long Along with   focusing  common facilities connectivity  rural areas  that  move towards Mukt Assessed  work done  urban rural areas   which    focus area Also discussed ways  promote greater awareness  cleanliness Swachh Bharat Mission   meeting From toilet construction  leveraging interest  diaspora towards  Clean discussed aspects relating  Swachh Bharat Visited Atal   delighted  hand over  Bangladesh Liberation  Honour Satguru  Sivananda Murty impacted several lives through  work Saddened    condolences    followers website that keeps  updated with programmes across Shashankasana   ideal Asana  practice  reduce stress While planning  rural  clear provision must  made  water requirement other related needs meeting  National Rural Drinking Water said that water conservation must    part   water supply Reviewed construction  toilets  schools   meeting  monitor progress  Swachh Vidyalaya Know more about Ardha This visit  historic  ties people  both nations will meeting focused  aspects relating  irrigation sector delivering quicker results Reviewed preparations  Krishi Sinchai Yojana emphasised  need  include young university researchers also known   posture keeps  body firm stabilises Over  last  days  shared aspects about standing Today onwards  will shift  sitting  which  Bhadrasana Very kind   visit  historic   warmth   people  Bangladesh Most  successfully overcame long pending issues   past this will enable   create  better future Thank   visit will remain forever etched   Outcomes   visit will lead   stronger Comprehensive meeting  economic ties with Presidents  leading commerce industry meeting with opposition leader Begum Raushan With President Abdul Hamid  Sheikh Hasina wonderful meeting with President Abdul Hamid Such  farsightedness that   said ties with Bangladesh will never break under  pressure   victim   diplomacy Award  Bangladesh Liberation  Honour  Atalji   fitting tribute   statesmanship support  Bangladesh political support  very  leaders came together   cause that will benefit passing     watershed moment happy     warmth   people here Thank Bangladesh   very valued friend   have  further scale   relations   potential will   honour privilege  receive  Award  Bangladesh Liberation  Honour  behalf   beloved Atal With  Sheikh   played  outstanding role  strengthening ties between Bangladesh important agreements have been signed today that will give   dimension History  been made  have resolved  border question that  lingered Artwork  this tapestry shows Kalpavriksh tree  Kamadhenu Presented  tapestry from Andhra Pradesh woven  Jamdani style   Sheikh Saluting  icon   towering personality  great friend  Bangabandhu Sheikh Mujibur Paid tributes   National Hello  bring with   affection goodwill   people Leaving  This visit  going  strengthen  bond between  benefitting people   countries There  great potential  Rashtrapati very recent visit  Sweden will strengthen  relations even their National  convey  greetings   people   Nation that  valued connected  shared Another benefit  Ardha Chakrasana that helps mitigate cervical Practice Ardha Chakrasana  strengthening spinal neck muscles better breathing capacity These schemes   part   efforts  bring  positive change   lives   This will always remain  Govt Enthusiasm  people towards social security schemes efforts  banks have been very They made this record enrolment What   more heartening than  fact that crore   sisters brothers have been included under  social security Enrolment under  social security schemes  crossed  crore number   month This   matter  immense Very good Good   your affection towards visit  will   long   realising  full potential meeting  discussed cooperation  renewable health other extremely productive comprehensive meeting with also known    important confident that  Bangladesh visit will enhance  ties will  beneficial  people  both Interacted with  young officer trainees  batch  Indian Foreign Service mindless attack  Manipur  very    each  every soldier   sacrificed  life Today onwards will share details   begin with Standing first  which  Tadasana unique portal wonderful initiative   Government  track missing Secretary  Ashton Carter    discussed aspects Excellent meeting with former  Shri  Deve Keep sharing photos   photos  being compiled   form   album sharing beautiful glimpses  after    also several photos Happy Birthday  Best delegation  appreciative   efforts towards  first International delegation  leaders from  Muslim Talked about  initiatives  skill education other priority Loosening exercises  important before commencing Asanas They help increase convey birthday wishes   Ministerial colleague Shri Anant Geete with  prayer that Almighty blesses  with  long their Republic  warm greetings felicitations   people Greetings good wishes   sisters brothers  Andhra Pradesh   development journey  this hardworking best wishes   people  Telangana   occasion  their Statehood  best wishes   development Connecting strengthening  bonds equally talented   field     Thanks   Hope   doing There  lots    discover  Digital media   great medium  draw  world Good    enjoying travelling even writing about  everyone must  best Happy    keep doing this through interview   United News Sports   integral part  character  always person There   much    India  diverse  very When photos  shared  will inspire others must write more  especially  interesting travel Apart from  deep loss    promising public career  been tragically   deepest condolences   Biden During  urged everyone  share their travel experiences across India with  using summer  scorching exams also hear Will share    short while from  tune World  Tobacco  reminds    harms associated with tobacco consumption    reaffirm  commitment  reduce this Tomorrow   will share  Looking forward  communicating through   tune What makes  think Constructive criticism   cornerstone   democracy  must  Express There    zero tolerance  Corruption affects  poor Discussed cricket rich potential   sectors like tourism great interaction with school children from Mawar Valley    touring parts   part  Operation Sadbhavna Talked about several initiatives Govt  taken that touch lives  poor also spoke about foreign policy interview   answer questions about  work   last agriculture Govt  committed  OROP  doubt about right Subhash   have   role  making Yoga  mass Your support This answer  mine during  Google Hangout should interest have  ensure that  International   Yoga   mass involving  sections  society together   have  make   must actively participate Fully   needed more than ever especially  bring calm   midst  busy Spoke  Satguru  Sivananda Murty enquired about  Wished   speedy recovery prayed that  leads  long healthy Building Connecting Moving  Next sure that    always work always brings  never teachers  other well wishers have  great role   success Team that      peon   Principal their active support handwork planning events activities  International   Yoga with    making Yoga  mass movement work together make ever International   Yoga   request people from  walks  life  actively overview  various events being organised   International   Yoga  India  various parts young friends  passed  CBSE Class  Congratulations best wishes   continuing academic Many    asking about  complete interview  Here   full salute Veer Savarkar   emphasis  social reform remember  writing poetry that ignites  spark  patriotism among people Veer undying love  India made  fight injustice against   inspired many others  join freedom great Veer Savarkar   birth  remember  indomitable spirit invaluable contribution wonderful interaction with   family earlier Very happy  meet Manmohan Singh  welcome  back     great Thank Your kind words mean   remain  great inspiration  many made India very sure  channel will  very useful   hardworking absolutely  villages must  best facilities  their distinct character must farmer   very very important position   Nation  have    farmer   core From quick relief enhanced compensation focus  technology  agriculture   doing everything picture from  meeting with Ursula   Federal Defence Minister PRAGATI  aimed  addressing grievances monitoring important projects schemes PRAGATI Session  Meeting officials from across  Nation  technology  review progress  various Thank      have  work together  make  World  better place particularly    menace Greetings  Mahesh particularly   friends   Maheshwari  Lord Mahesh keep showering  blessings Tributes  Pandit Jawaharlal Nehru   Punya  remember  contribution   freedom fighter Dear wishing   very Happy  pray  your long life India will progress when  villages develop agriculture  Govt  working tirelessly  ensure Launch    effort towards helping  farmers enabling farmers  know about best practices Have  been able  reply  everyone   accept your good wishes with humility will continue  work  fulfil your very grateful     kind wishes Virbhadra thank    wishes  thank  people  Gujarat  their good wishes constant gratitude    your good wishes Raman Singh Thank  very much Many Your wishes Many thanks  your Through    have been getting  many congratulatory      that   deeply touched   thanks letter   fellow countrymen Share your thoughts using   personal message from Looking forward  hearing from world  optimistic about India  enthusiastic about exploring  opportunities India last year  been characterised  full quick reforms strengthening   Federal Production  inflation  power generation  poor  getting bank changed  year Thank  Shivraj  thanks   wonderful people  Madhya Pradesh   tremendous have always  will always  accountable    Government    accountable Congrats  this remarkable Delighted  Congratulations best wishes Please congratulate  from  side  convey  best wishes happy  know  most important   effort support from their Before    fortunate  have visited Deendayal Dham paid tributes  Pandit Deendayal thank  those  joined   Mathura   rally  spoke  length about  work during this Congratulations    young friends  have successfully passed  CBSE Class  Board Best wishes   bright intellectual powerhouse with  long lasting contribution  John Nash will  remembered  Alicia John want  bring  qualitative change   lives   poor   through financial inclusion social gratitude  your appreciation  Swachh Bharat Looks  sure  atmosphere Dear congratulations   remarkable year journey  best wishes   start touched upon this theme  being free from casteism Rashtrakavi views  this during  speech Makes  very happy  Glad  programme  able  strike that chord with thank   donating lakhs   PMNRF  Nepal Earthquake This   very kind compassionate Ours  Government      give  poor  better life free them from That    beginning    made somewhere then change will take  sure This news from Jayapur   Parliamentary Constituency  very Congrats  these Works  Rashtrakavi Ramdhari Singh Dinkar ignite  mind inspire people across Remarkable watch  colleague speaking colleague  speaks about  work      last   articulate congratulate Gujarat  entire Team   completing  successful year  progress good  best Economic ties  cultural ties   world together must grow there must  peace Very considerate   will   possible without  natural surroundings remaining People  India have  strength potential  take  Nation  newer  Indians  real Thanks    your Work   biggest source   refreshes relaxes like nothing Hello  best wishes    sure  will Keep   good Together  have  create  Swachh team      think  something unique that connects   Nations  strikes  emotional welcome everybody  wants  invest   opportunities exactly this last   first visit   Parliament important  enjoy  work that   work  determination  serve crore Indians   biggest source members   Strategic team scaled Everest  this   Their accomplishment inspires every Indian makes  very surviving members   deceased members  first successful expedition leave with  confidence that  ties will  even better  relationship will benefit people Meetings with President Park business leaders were Many aspects  strengthening cooperation were discussed visit   Republic  Korea  been very  thank  Korean people Government  their warm spoke  cultural exchanges active participation  International More photos   meetings with  Korean meetings with  Korean CEOs were learnt more about their work invited them Asian Leadership Forum spoke about contribution   world  rising global Explained  steps  have taken  facilitate ease  doing business    Korea CEOs Hyundai Heavy Industries Shipyard  very  asked them  come  India explore  vast opportunities sure this will spread awareness inspire others  work   Swachh Your country     special place   hearts   people Korean partnership  these areas   vital  deeply Happy Birthday  Best wishes   year city  Modern People  very  have been here before lovely Discussed  global issues during  wonderful meeting with Secretary Today India  Republic  Korea have signed  agreements MoUs that will deepen Special Strategic Partnership between India Republic  Sharing  Joint Talks with President Park were fruitful will lead  stronger ties between Korea visit  laid  foundation   relationship that major Asian countries with shared values should have Chal Chal Mere   Long live poem Gurudev Tagore specially wrote  Korea  hand embroidered  English Presented President Park  finely woven pashmina stoles  which Rabindranath poem  Korea  hand Glimpses from  Wreath Laying  short while Wonderful being   gratitude   Indian community here   very warm deepest gratitude   people   carry back wonderful memories  your  land that   spiritual leave Mongolia with great  visit  pathbreaking  that will take ties with Mongolia  spectacular heights Thank Mongolia   amazing Wonderful wonderful hospitality  close spiritual friend formal training  this  others playing   taught     there scope  ties   desire  vibrant partnership with team does help  with    that  have  reasonably sharp Thought  must share  many similarities    perform   ceremony Laying  foundation stone  Atal Bihari Vajpayee  Centre    moment traditional playing With  gift from Greetings  people  Norway  their Constitution Strong ties with Norway benefit both     friendship Addressed    large gathering  Overwhelming told  Business economic environment  changed    wonderful place very happy    immense enthusiasm  initiative during  meeting with  Chinese good interaction with students  Fudan University launched   Gandhian  Indian once again express  gratitude  Party Karyakartas volunteers whose untiring efforts created history sisters brothers  India congratulate them even  this memorable Credit  this major shift goes   people    this  last year gave  most resounding mandate  thirty long faith  Government  increased  optimism about India  growth people  India whose strengths    fulfilling their giving wings  their visit   significant step  better  have signed  agreements that will benefit people  both Beijing   Today  interaction with    good That    happy economic dimension   relationship with China  Scope  immense  outcomes  benefit Thank     will surely keep that Temple  very grand Indian Chinese Children doing Yoga Taichi like  fact that    opportunity  communicate with  people That   interesting Enjoyed interacting with  address  Tsinghua Launch  Forum  Leaders   historic moment Sharing  remarks   Joint Press Meet with Premier Spent    Beijing attending  series  interaction  Tsinghua University very      affection  Narendra Modi  respect  crore Thank  together  have  make this century doing everything possible  enhance ties with President  Jinping    good special thanks  President  with whom    extremely productive meeting earlier Reached Beijing after  memorable    gratitude   people   their warmth Spoke  President offered condolences  loss  lives    Kabul    when  comes  fighting very glad    enthusiasm among  people  ties  always Will always cherish this token Daxingshan Temple  Visited various Halls   Temple interacted with Hello from Landed   warm followed   spectacular visit   Terracotta Warriors Museum aircraft   news about  attack   concerned about  situation  pray Passing  Black Money Bill   historic   very  indicates  priority  attach Punsari Panchayat  decided    premium   Social Security schemes  great Officials told  that over lakh people have enrolled   schemes   last Congrats   people officials Social Security Schemes launched last week have generated  tremendous response among This  very heartening historic event  Support  political various   been Wishing   very Happy both look forward  working together  further enhance between India    wide range told that such  impressive  while being  incumbent  makes  victory even more spoke   congratulated    victory conveyed  good wishes    entire President Putin called   short while  discussed various issues  mutual assured  Koirala   possible from  side   wake Sushil Koirala    telephonic  reviewed  situation arising stand firmly with  people  Pakistan  this hour   wish  those injured  quick attack  Karachi  deeply saddening utterly  thoughts  with  families shining beacon  great service   very proud  your phenomenal work  India   world warmest greetings  your   pray that   blessed with  long life that  filled with good being  land  Buddha   responsibility  ensure that this   century free from talked about  shared responsibility  help developing especially  poverty Interacted with  Chinese where  highlighted  strong potential Spoke about leveraging  manufacturing strength  South with young human resource During  interaction with media  South  said that there    better partner than South Korea very good meeting with  from Here   page  which  will find  latest news   South Korea   also share your views Keep  with  latest updates   Mongolia visit through this Express your views   upcoming China visit  this specially created individuals organisations  working towards  Swachh Bharat this  inspiring several others Swachh Bharat Mission   team effort   must work together   Clean News that made  very increase  Asiatic Kudos  officials wildlife lovers whose efforts compliment Railways  this prolonged Such efforts must surely fully  very proud Thanks   kind   leaving  stone unturned  fulfil strength  crore Indians  what will take  Nation  newer have asked  ministerial colleague Jitendra Singh   stay  touch with authorities ensure timely Disturbing news from  accident  Udhampur  saddened  thoughts  with families   Prayers with salute efforts   scientists political leadership behind  success  Pokhran Tests  this Greetings   fellow Indians   occasion  National Technology wonderful seeing  versatile much admired Shashi Kapoor  being presented  Dadasaheb Phalke Congratulations always special     Belur  spent precious moments   wonderful Offerred prayers   Kali   Dakshineswar With immense   dedicated   Nation  modernised expanded IISCO Steel Plant Dear wishing   very happy  pray that Almighty blesses  with  long life full  good refreshing interaction with youngsters  success Went  Dantewada with  clear Development   only  ahead  must reach  poorest Social security schemes launched  locations across India   landmark step towards Spent time with Swami Atmasthananda good meeting with Today  would  visiting where  will   Dantewada Gopal Krishna Gokhale   great  remarkable freedom fighter social Tributes     birth through  Canada visit   will enhance ties Here   that summarises  highlights   visit ties with    outcomes   visit Congratulations   rightly pointed   Cameron  best While releasing  commemorative coin  mark  birth centenary  Swami  mind went back   interactions with Swami Spoke    Tripura West Bengal thanked them  their that   passage Also reviewed  projects   shipping telecom sectors during  meeting Reviewed progress  issues such  skill development   railway sector about  status  Patna Munger Railway Chaired  meeting   sectors spoke    thanked them  their support   passage   Land Boundary Work done    creating infrastructure  toughest  terrains    proud their foundation   best wishes   personnel  Border Roads Organisation  their spectacular Appreciable effort  Mohammad Kaif towards  Swachh thanked these leaders  their support   historic passage   Bill that will mark  fresh chapter   ties with want  convey  gratitude    allies   support that   passage  Land Boundary Spoke  Bangladesh  Sheikh Hasina  conveyed  greetings   people  Bangladesh  this landmark This reflects  collective will   nation  build constructive relations with thanks    political parties  their  also   states  Tripura West This would contribute   stable better management coordination   border lead  enhanced security  well Amendment passed ensures  permanent settlement  land boundary with Bangladesh resolution  boundary Today  historic milestone  been reached  relations after  passing   Constitutional Amendment Always  delight  meet Thanks  your contribution  lakhs ties will  given   energy  Korea will always   special partner   development look forward  harnessing Korean capabilities investments  ship defence production Trade Investment relations    core   bilateral Korea  OECD country with which India signed look forward  meeting President Park  warmly recall  meeting with   Myanmar  November last South Korea   very important pillar    East   committed  maximising engagement with  Asia Pacific Hello   friends   Republic   will  visiting this beautiful land   morning calm once Honoured    opportunity  address  Great Khural   reassure continued support   areas Democracy  Buddhism bind India with Mongolia  spiritual Looking forward  more trade  investment ties with certain that  visit  China will strengthen progress  prosperity also look forward  meeting  captains  industry  Shanghai sharing with them  wonderful opportunities India confident  visit will   foundation  further enhancing economic with China   wide range Honoured that  Jinping invited     home province  land associated with Xuan  visited China  will visit Beijing   eagerly await productive discussions with President  Jinping Premier Looking forward  visiting China from   boost friendship between  ancient civilizations largest developing Agree with  proud   efforts   forces other Great seeing   Hope  enjoy convey  warmest greetings  Governor  Vohra   pray that   blessed with wonderful health  long Sharing  speech   International Buddha Purnima Diwas Hello Looking forward  interacting with Chinese friends through Greetings  everyone   auspicious occasion  Buddha Some more photos from  cleanliness drive Wishing  Jharkhand  Shri Raghubar     occasion    Almighty bless  with long life good rural infrastructure  highest priority  being accorded  Pradhan Mantri Krishi Sinchai Yojana  help Reviewed  status  stalled projects  given  detailed overview  completion  pending projects  this financial Chaired  meeting   focus   specific sectors  rural renewable petrol natural hardwork  over crore people have joined   Congratulations   phenomenal Maha Sampark Abhiyaan   wonderful opportunity  further connect Party members with  Party ideology brief them about other Party Office Bearers   part  Maha Sampark Greetings   people  Gujarat   foundation Maulana Wahiduddin knowledge efforts towards peace make     most respected admired Congratulations  Maulana Wahiduddin  being conferred  Sayyidina Imam  Hassan   Peace Award   function Sharif  also discussed  unseasonal rains   adverse impact Sharif appreciated this idea told  that  should take  such SAARC Nations  come together hold annual exercises  rescue doctors      minimise damage during natural suggested   Sharif that SAARC nations should conduct regular joint exercises  disaster relief Nawaz Sharif appreciated efforts   rescue operations   thank    kind call from  Nawaz  expressed condolences   loss  lives  various parts  India delegation  media persons from Madhya Rameshbhai   contributed lakh  Earthquake  thank  this kind Shri Punam  College Managing Committee presented  cheque  Crore towards Chaired   Nehru Memorial Museum  Library engine tested today will enable    satellites    tons  geostationary  proud Congratulations   space scientists   successful testing   indigenous cryogenic India stands firmly with  people  Afghanistan  they build  democratic prosperous President  discussed many issues including cooperation against strong economic ties enhanced cultural Agree with  President Your visit  truly added  momentum Indian  Security Forces  facilitating  sending  affected people coming from Nepal back  their From which    border  colleague  relief work  help affected Took stock   evacuation  those stranded  Also took stock  provision  relief supplies material  affected follow  meeting   situation    reviewed progress  relief rescue work  India Assured  Spanish Foreign Minister that India will provide  possible help  Spanish nationals Discussed  smart renewable energy   meeting with Jose Manuel Garcia Margallo  Marfil Sought President support  making India    sports infrastructure President Thomas Bach  agreed that sports   powerful force that  unite humanity These young Artificial Limb Beneficiaries have  been deterred    admire their Spent wonderful moments with these young  amazed  their energy above  salute  resilience   sisters brothers  Nepal parts   their courage   face Mention must  made   They  bravely covering  disaster from thanks   enthusiastic youngsters   mobilising contributions  relief work   resources medicines must thank  armed NDRF doctors  those volunteers   overcoming every obstacle  restore normalcy want  thank  should   crore people  India  have made pain their  extended those saying appreciate  thanks should    great which teaches  Parmo greetings  people  Netherlands warm birthday greetings  King  wish   long life good health convey  best wishes   people  Togo   occasion  their National Greetings   sisters brothers  South Africa  Freedom This    that celebrates hope Chaired  meeting  review  situation following  Earthquake Received  call from Pujya Morari   donated lakh  relief work   deepest gratitude Spoke   Sushil    transit  Bangkok     Assured  support assistance during this tough process  finding more information   working  reach   those both  home News  come  about  Earthquake  Several parts  India also experienced Really enjoyed  Thanks Delhi Thanks Sreedharan Sreedharan  would always tell   experience  Delhi Today    opportunity Reviewed  various activities   Ministry  Culture during  meeting Urged Panchayat members from  over India  work with  year vision  bring about  qualitative change  their respective Glad  have interacted with Panchayat members  National Panchayati Sharing Will address  programme  National Panchayati Global Exhibition  highlighted  rich potential  growth  services sector Spoke  Bihar    situation arising   storms  various parts   Assured  assistance from point must  hardworking farmer think      together  creating  better tomorrow   farmers death  saddened     deeply shattered Condolences Caring   environment   integral part   India  truly show     world  mitigating climate belong   culture that believes     Mother perfect occasion  reaffirm  commitment  keep  Planet green focus  sustainable There  good governance without Responsibility Talked about  need  modernise  working  every department through technology will enhance Civil Services   great interaction with civil Emphasised   need  work towards social economic Supreme Head   India Orthodox Baselios Marthoma Paulose  other Christian Basava Jayanthi      devoted  life  service social  ideals have left  deep impact Babasaheb   very       that  have been able  reach where From social serving  empowerment  women  education  Ambedkar  truly   ahead Ambedkar International Centre   effort  share with  world  phenomenal personality that Babasaheb Will  foundation stone  Ambedkar International Parliament begins  look forward   productive filled with constructive debates  several Congrats   leaders Karyakartas   Party membership drive crossing crore Looking forward      this Wishing  friend Meghalaya  Shri Mukul Sangma    Almighty bless  with good health  long wishing   very Happy    blessed with  long filled with good Addressed     workshop Sharing  video Sharing some photos from  nation tour  Germany special thanks   fine  wonderful human being   very dear leave Canada with immense This visit will further enhance   thanks   people Saying goodbye   friends while leaving Leaving  which   final    Canada Will offer prayers  Gurudwara Khalsa Diwan Laxmi Narain Temple remember  those  lost their lives  board Dear your words  touching Thanks ties  strong     grow even benefitting people  both  Nations Thank    will always cherish  warm welcome   enthusiasm Here   video   speech   Indian Community Programme Thank  Thank  Unforgettable experience   Indian Community Sharing  remarks   Joint Press Meet with Glimpse   traditional Indian miniature painting showing Guru Nanak  with  disciples many   Punjabi brothers sisters have made Canada their home  enriched  with their renowned vigour entrepreneurial visit     glad   enthusiasm  India  Heartiest welcome leave Germany with great This visit will strengthen  Thank remarks during  Joint Press Meet with Chancellor visit  Berlin Hauptbahnhof   valuable Learnt   about railway infrastructure modernisation Terms Raman Effect Raman Spectrum themselves were coined    German physics professor  Peter Raman   deep connection with   inspired  pursue science   career  famous German scientist work finds extensive application  diverse even quantum chemistry  which Chancellor Merkel holds Presented Chancellor Angela Merkel with some manuscripts  papers best wishes   Tamil friends   pray that  coming year marks  fulfilment   your wishes brings Baisakhi greetings   this festival enrich  spirit  harmony  happiness Wishing   Odia sisters  brothers  Maha Vishuba  pray   wonderful year full  prosperity Greetings   people  Kerala   auspicious occasion    coming year bring  prosperity  your Poila Boishakh  greetings   Bengali Have  great year Shubho Nabo Bohag heartfelt greetings   sisters  brothers Good wishes   fellow Indians   various festivals being celebrated across  these festivals bring Vice Chancellor Minister  Economic Affairs  Energy  Sigmar Happy  have   opportunity  visit  Siemens Technical Indian community reception  Berlin   great   conclude  very productive Sharing Grass will  remembered   intellectual powerhouse whose writing  admired  over   will Catching    news while travelling From  Good    growing enthusiasm about Warm birthday wishes   colleague Najma Heptulla    blessed with good health  long Inauguration  unveiling statue meeting highlights   Germany visit memorable welcome  Hannover City Ideals  Gandhi  inspire people across  Unveiled Gandhi statue Privileged    inauguration  explore  opportunities India excellent accomplishment Congrats  being World Number midst  meetings with German   news about  Bronze  Azlan Shah Congratulations   Indian Hockey Hallo Reached Hannover  short while Thank  Substantial ground  covered during  Thankful  French Govt Will always cherish best wishes   Speaker    Sumitra Mahajan     pray   long life good Sharing highlights     France Deeply touched   affection   civic reception  Sharing With young friends near remembered  courage sacrifice  Indian soldiers martyred Amazing visit  They  very enthusiastic about Here   highlights   various programmes events during    France Leaving  where  will visit Mahatma Phule devoted  life  empowering  downtrodden through education social Tributes     birth meeting with President  very  discussed further strengthening Thank  President   boat ride Some pictures from climate change efforts  mitigate shall judge  progress  just  cold statistics  growth   warm glow  belief hope  human Recalled Gandhi message  spoke about  India values  work  UNESCO  partnership with collective goal   peaceful prosperous world where every human   life Paying respects Glimpses from ceremonial welcome Quite  multitasker having asking recording taking photos with  small Photos   interview were taken  with  small    wonders   photo journalist interview with  which  talk about  wide range When small business  India   letter  small business persons across leaving  stone unturned  provide relief  farmers facing problems   unseasonal This video wonderfully explains what  MUDRA Bank    have help India extended included help   neighbours Pakistan Service  humanity knows  Glad  helped many countries  evacuation from welcome  citizens returned from Yemen with assistance from Thank   Nawaz Sharif  your humanitarian launch   MUDRA Watch Ocean   containing highlights   visit  Mauritius Chairman    Khan Development Prince Karim wish    opportunity  attend such  programme   future where  many well known artistes will  enchanting must share that  have heard Ghulam  Sahab   past that Also read   papers that Ghulam  Sahab wished that  attend  this time  would   able best wishes   organisers   Several renowned musicians will  gracing Sankat Mochan Temple  which will   from  April will truly   treat  music Govt  working tirelessly  realise  dream   Healthy India where every citizen  access  proper affordable Theme  this World Health Food Safety   essential  good health   must focus World Health  pray that    remain   best  health   same time inspire others  lead  healthy those  enjoy maritime history should surely read When  comes  mitigating climate India  show     entire Spoke  several issues relating   environment launched National  Quality Index   conference evacuation efforts  Yemen reflect willingness  serve  people readiness  help others  which also glad that India  rescued several citizens from Colleagues  been   ground  have evacuation efforts   exemplary Seamless between   Railways State Govts greatly helped  rescue work will leave  stone unturned  fulfil aspirations create  India that  developed phenomenal growth     efforts hardwork  generations  selfless Karyakartas  devoted their lives need  dismantle archaic Proper utilisation  technology  judicial system will bring  positive change   quick Shared  thoughts   conference  State Chief Ministers Chief Justices   High Agreement signed today resolves  long pending issue  transferring  land Witnessed  signing  Agreement  transfer  land  construction  memorial  Babasaheb teachings  Jesus Christ inspire entire   pledge ourselves  create  world that  compassionate Easter greetings   this  further  spirit  harmony  brotherhood number  people  voluntarily refused  subsidy   also reduces burden MUDRA Bank   those countless people  drive     strengthen their Talking about gave  example   this Railway Budget   different from previous Highlighted  benefits Karnataka will  after  accepted  Finance Commission will fulfil  your From  month experience  there   reason  India must stay Terror attack  Kenya    most distressing that  university campus  attacked  this Utterly Emphasised  need  Geographic Development     Every part  India must Success   Dhan Yojana Direct Benefit Transfer   subsidies show   role banking sector  play  financial Earlier today   addressed   Conference  Financial which    priority Very happy    Thankful   very warm Attended  meeting   office Mahavir Jayanti     venerable Lord  showed  path  peace welfare  entire interaction with  Secretaries   Government Rourkela Steel where  dedicated   Nation  expansion Very happy  have visited Odisha  Utkala Paid tributes   visionary founding leaders Sree Sree Shivakumar Swamiji   source  great inspiration  devoted  entire life  Greetings Wishing  sisters  brothers  Odisha  Utkala  best wishes sure  will like this specially created page   dedicated This effort  entire team  clean  Ghats  Varanasi   salute very good meeting with Jack Sagarmala Project will   long   ensuring development make  coasts  gateway Centre  incentivising  shift towards coastal inland water  also want  expand presence    coastal About cadets  Indian Maritime University   affiliates will receive financial assistance  Ship Maritime sector   vital role  progress Government  strengthening  sector through innovative delegation from maritime Talked about  vast potential   initiative Greetings  people  Rajasthan  Rajasthan phenomenal accomplishments  make  very  congratulate   being  World Number Launch  satellite   another manifestation   exemplary efforts utmost brilliance   Congrats Looking forward  enhancing ties with Canada interacting with captains  industry diaspora Chancellor Merkel  will jointly inaugurate where India   partner Will discuss strengthening economic visit some industrial units outside Germany Canada visit  centred around supporting economic agenda creating jobs ready energy sector must plan   coming decades with  global perspective  energy companies must establish presence across  world Departing from  going  residence  confer   Bharat This gesture reflects grace dignity Will shortly inaugurate  summit dedicated Victory defeat   part  Team India played great cricket throughout    proud Chaired  meeting  National Ganga River Basin which  attended Independence  greetings   people   Nation that  always been  enduring important friend Know more about  integrating interactive platform  address grievances review Govt During  PRAGATI interaction discussed issues relating  unseasonal progress   projects ease  doing launch    extensive interaction with Secretaries  Government  Chief Secretaries  States other Crash   Germanwings flight  extremely  share  sorrow pain   families  those Sharing some excerpts    with newspaper  Seychelles asks   Your favourite place  India lots more  this Offerred prayers   Durgiana Temple speech   public meeting after paying homage  Martyrs firm conviction that  outstanding issues   resolved through bilateral dialogue   atmosphere free from terror violence have written  Pakistan  Nawaz conveying  greetings   National Among many other  Manohar commitment towards cleanliness continues  inspire birth    tributes   Manohar  thinker  excellence  left  deep impact  Indian this hour   prayers  with  Kuan family   people    soul rest statesman lion among   Kuan life teaches valuable lessons  News   demise  saddening Tributes  these great Today  shared   with farmers  radio Spoke  them  various Here Wishing  Parsi sisters brothers Navroz   coming year fulfil  your wishes bring happiness  your special occasion  Sajibu greetings   sisters brothers Navreh greetings   this year   joyful      blessed with good health Ugadi Greetings   pray   year full  good health Wishing  friends  Maharashtra  Gudi   have  blessed  joyful year Greetings   Sindhi Community   auspicious occasion  Cheti  Lord Jhulelal bless  bring peace Thank   presenting  copy  your  best Attack  Tunisia  appalling  stand firmly with  people  Tunisia  this hour  grief pray normalcy returns Congratulations  friend Bibi Recall   York meeting last September will provide immediate financial assistance  people   stand shoulder  shoulder with Vanuatu  this hour devastation caused  Cyclone   Vanuatu  extremely  share  sorrow pain   those  have been Congratulations   hockey  entire nation  proud salute  sacrifice  each  every Indian soldier martyred urge  youth  visit this exhibition  learn about    which nearly    were martyred   flung touching  meet  descendants  some  these decorated Exhibition brings alive participation bravery  Indian soldiers  various battlefields  this  across Africa Visited commemorative exhibition  centenary  First World   Manekshaw Centre Shri Daulatsinh Jadeja will  remembered   rich contribution  Saddened   Condolences   Jadeja Narayanbhai Desai will  remembered   scholarly personality  brought Gandhi  closer     hear meeting with Northern Province   Wigneswaran  very India  proud  assist  project that nurtures dreams aspirations  several Offered prayers   Naguleswaram Temple  Feeling catch    match  heard about  stellar performance  Team India against Laid  foundation stone   Jaffna Cultural Leaving  Will also travel  Talaimannar  Jaffna Looking forward   wonderful picture   meeting with leaders   Tamil National Highlighted tremendous potential  economic during interaction with Ceylon Chamber  Commerce Honoured  address  Parliament    oldest most vibrant Discussed several issues relating  during  meeting with  Ranil remarks   joint press meet with President Humbled   affection   civic reception earlier Thankful  sisters brothers National  celebrations  Port Louis were Glad    opportunity    part   celebrations Barracuda  brings with  goodwill greetings  people Always special  address National Assembly   Nation   proud  call  friend   speech Paid homage   brave Aapravasis  left  shores  India nearly centuries Ganga Talao  felt  deeply personal that comes from  banks   Ganga Here   text video   remarks   press meet with  Anerood Jugnauth last National  greetings   citizens   very glad that   able  mark this special occasion with  people Dandi March remains  watershed moment   Tributes   patriots  joined  inspired  Gandhi Thankful   people  Mauritius   very warm picture from  banquet hosted    Prime Minister  Mauritius  Anerood Unveiled  Plaque  Operationalisation  Radar   CSRS Cooperation Spoke about mitigating climate focus  renewable energy invited people  Seychelles    civic statement   media during  joint press conference with President With President  deeply impressed   Together  will strengthen Beautiful Seychelles picture taken   affection   people  Seychelles  been Landed  Wonderful seeing  Indian community Marking  Centenary Commemoration  World  paid homage   martyrs  Amar Jawan Dear wishing   very Happy    blessed with  long life filled with good honoured  have  this opportunity  mark National  with  people have always  believe  India gets strengthened when  States Thank Mauritius   valued  ties  bound  history shared Will enhance ties with these Nations   wide range Providing security cover  several  units establishments across contribution   progress Raising   CISF  salute  CISF personnel  their bravery sense  duty with which they have served  Nation policy  guided   commitment  harness talent  growth   State Mamata Assured  that Centre will leave  stone unturned Till  final Narayanbhai  always connected    exemplary personality will  remembered Very   hear about  demise  Narayanbhai  veteran professor  Ahmedabad someone  interacted with very experiences  award winners shared left  deep impact   They were extremely International   recipients  Stree Shakti Puraskar  Nari Shakti  interaction Well played   very proud   created history  reaching  Keep Apart from addressing    will visit Maha Bodhi Society will visit embark   visit   Lanka with   confidence that  visit will make relations even stronger   years Mauritius  will address their National Assembly join  programme  mark  commissioning March  will    happy   with  people  Mauritius  they celebrate their National ties with Seychelles   sure  visit will   productive  will benefit both This week  would  travelling  Mauritius   looking forward  enhancing  ties with these friendly Frank direct   Vinod Mehta will  remembered   fine journalist Condolences   family Birthday greetings  Rajasthan  Vasundhara Raje    blessed with good health  long Through various schemes  Government remains fully committed  bringing  positive change   lives salute  indomitable courage outstanding achievements  women  International Congratulations   Cricket Team    against West    Blue seem   having  great want  fulfil  want  give electricity Reiterated commitment  provide power   citizens emphasised   importance  energy conservation Dedicated  Shree Singaji Thermal Power Project   Nation laid foundation stone  stage Kind    present autographed racquets with which  played  Open Mixed Doubles Finals Happy Holi   this festival  colours fill your lives with lots Young    think   Mobile  must Tell delighted that  collaborating   contest  design  Mobile Interesting article  yoga meditation enjoyable extensive interaction with time MLAs  Maharashtra  came Ours   Government      solving their problems bringing  positive change  their From Kashmir  from Kutch  Arunachal people have reposed their faith Solving issues    rise beyond names  schemes  continued which Threats   work      Nation that   bend even during Will  speaking   Rajya Sabha  reply   Motion  Thanks   Address Also asked  industry  help promote tourism potential spoke   technology  help curb urged  industry  develop innovative Mobile Apps  citizens  need     meet challenge  cyber security Best wishes   they complete Their contribution  facilitating growth   software industry  noteworthy govt   historic opportunity  fulfil  aspirations   people   take  State   heights Witnessed  oath taking ceremony  Shri Mufti Mohammad Congratulations  best wishes interesting website that shares insights into   have Budget will further reignite  growth signalling  dawn   prosperous must  congratulated  this paradigm shifting Atal Innovation Mission SETU underline  commitment  enable entrepreneurship  grow shine Success   Dhan Yojana  Building   schemes  announced that will comprehensively transform lives Details   Black Money  being introduced demonstrates  firm commitment  bring back every Rupee  Black Money stashed Budget indicates  commitment  ensure that development  Eastern Northeastern parts  India gets  impetus drives future congratulate   doing  excellent   respecting aspirations   States   same time delivering  National From housing  education total  laid down goals   achieved  Amrut Budget  investment friendly removes  doubts    assures investors that  have  predictable fair Union Budget   Budget with  clear    Budget that  pragmatic Sharing  speech   Indian Science Congress where  spoke about various aspects relating Government  fully committed  encouraging innovation excellence  particularly among  young Science technology will determine just    played  crucial role  bringing  Nation  where National Science    occasion  remember  determination untiring efforts   They speech    Sabha  reply   Motion  Thanks Will reply   discussion   Motion  Thanks   Address Congrats Afghanistan     over  sure this ever     joyful moment  cricket lovers stands    focus   common putting service Rail Budget lays   clear roadmap  make  Railways   driver  economic growth playing   role  progress particularly delighted that   time there   concrete vision  technology upgradation modernisation watershed moment   paradigm shift from discussing coaches trains  comprehensive railway reform forward futuristic passenger centric combining  clear vision  definite plan  achieve Tributes   great Veer Savarkar   Punya  ignited  spark  nationalism  several Very good    Please take care  your Greetings  people  Kuwait  their National  value  close relations with Kuwait look forward  strengthening them Sharing highlights   letter  State   various look forward  working closely with   take India   heights bring  positive change spite   large support   areas such  poverty health will continue Furthering this marks  paradigm shift from scheme grant based support   devolution based Accepting recommendations    another indicator   commitment  move away from Size Fits approach Centre will  left with lesser funds   want  strengthen hands  States  pursuing their development agenda   their needs Total devolution   States   higher than  previous giving more power  States  their progress Never before  there been  increase  devolution  divisible pool  resources   This  unprecedented letter  wrote about  Centre accepting recommendations  Finance which will strengthen  federal Birthday greetings  Jayalalithaa    blessed with  long filled with good Remembering Sant Gadge Maharaj   birth  vision  rural development importance  cleanliness continue Highlighted  vitality  soft power  foreign relations   inauguration  International Ramayana Sharing  video  Rashtrapati address  both Houses  Parliament earlier Young give  exams have faith  Success will case  missed here    with  young friends appearing  their Congratulations best wishes  Shri Nitish Kumar  being  Bihar Will share  with  young friends appearing  their Looking Great Well Congrats Team  make  proud Have spoken  Father Alexis Prem Informed happy family  Father Alexis Prem Kumar   safe return after months Delighted  securing  release  Indian Jesuit priest Father Alexis Prem Kumar from captivity Will soon share some good news with very good TEDx talk   importance  having  Clean Appreciate  efforts    Indore Malini Gaud  towards  Swachh words  enough  thank team   their steadfast participation  Swachh Bharat Greetings   King   Majesty Jigme Khesar Namgyel Wangchuck      blessed with  long healthy Spoke  Nagaland  Shri  Zeliang conveyed  good wishes proceeds from  auction would  impetus   efforts  clean congratulate appreciate  those  participated contributed   auction  Surat made happy that parents teachers  sharing insightful thoughts  this  programme want  infuse  railways with speed  network that reaches maximum number While inaugurating rail spoke  need  transform railways with  focus  modernisation better service delivery development projects launched today will provide both  Arunachal glad    Arunachal Pradesh  celebrate Statehood Inaugurated various development Statehood  greetings   people  Arunachal Wishing  sisters  brothers  Mizoram   Statehood Focus  soil health will boost give  impetus   agriculture sector bring increased prosperity Emphasised   need  focus   Mantra    launch   Soil Health Card TsagaanSar greetings   sisters brothers  Have  wonderful year filled with  good occasion    coming    wish  people  Vietnam   Year with full  peace good Seollal greetings   Korean friends around   pray that  coming year brings with  tremendous happiness Greetings   start   Chinese    coming year brighten your lives with Chhatrapati Shivaji inspires  Here   speech  mine  Raigad last year  which   tributes Shivaji Maharaj shone   battle field left  mark   touched several lives through  good Urged graduating students  work towards changing mindsets when  comes  mental illness  need  cure    scientific Addressed NIMHANS convocation Congratulated graduating students wished them  very given  overview   various research activities being carried speech   function  celebrate  elevation  Sainthood  Kuriakose Elias Chavara  Mother appreciate  Indian Consulate  Hong Kong  their efforts  popularise Yoga their support Congrats  Hong Kong based Indian Yoga Yogaraj  creating  Guinness World Warm birthday greetings  Telangana  Shri  Chandrashekar   wonderful meeting with Told   lamp within Extended  best wishes  them answered their friend    great  will work together  advance  Smart Cities Wonderful  have President Maithripala Sirisena  Lanka ties    grow Dear hoping  have  successful surgery  quick  good wishes Addressed Renewable Energy Global Investors Meet Sharing highlights Congrats Team Well    very proud friend shared this with  have  look  this from  Prayer Pune facility  their announcement  invest more will   major boost Highlighted  vast possibilities  manufacturing employment generation   inauguration  Manufacturing Sharing  speech   Sesquicentennial Function   Association  Western Wishing  esteemed colleague External Affairs Minister   very Happy Would  sending   Foreign Secretary   SAARC Yatra soon  further strengthen Cricket connects people   region promotes Hope players from SAARC region play with passion bring laurels SAARC Nations  playing  excited about  World sure  will celebrate sportsman spirit will   treat  sports lovers Spoke  President  Sheikh  Nawaz Sharif President Conveyed  best wishes   Cricket World congratulate Assam    commendable performance   Party   Municipal Polls held across Jacob  Treasury Secretary Sharing highlights   speech   Conference sure your spin bowling will surprise  batsman give  Play well  good Good luck Bowl   batsmen with your impressive speed reverse Stuart recent  round performances have impressed  wish    best   World wish  young extremely talented Mohammed Shami  very best   World Play well  those young fast bowler Mohit Sharma  bowl  great line    great asset   Best Best  luck Swing every match   Your breakthroughs will determine  fast  will  those young Axar Patel  trick  batsmen with  sharp spin Give your best play without look forward  seeing your  round performances take India Have  great tournament   sure  will keep  runs coming play   role Suresh Raina  always been agile   field with   them    including  bouncers wish   very best  young friend Have  wonderful World Make  most  this great Best wishes Give India  wonderful start every time  step   Score many many    there  cheer wish  flamboyant vice captain  very best   upcoming  entire nation     hopes best wishes  captain cool Play lead well make India Knowing   sure Cricket World   best wishes   Indian Cricket have time please devote  same towards fulfilling  dream   Clean Building such Temples  what  culture teaches  made  very Would urge those doing Have seen   Temple being built     This  shocking against great Dayananda Saraswati  made  remarkable contribution   emphasis  social reform made   personality ahead Spoke  congratulated    Assured  complete support   development discussions with President Tony  reflected  strong mutual trust cooperation that define  unique relations between From smart cites  skill  extensive discussions with Singapore Tony  Keng Wrote  Akilisi congratulating   being elected   valued friend  Pacific region urge parents teachers  share exam experiences that would inspire youngsters even motivate them  exam thinking about this radio prog  share  with students preparing  board competitive tributes  former  illustrious scholar freedom Zakir Hussain   birth Before     very good meeting with   Northeastern focus  good governance through well thought  polices combined with proper execution  desired Emphasised   need  expedite  elimination  poverty moving away from size fits State  gave many insightful views during  This spirit  cooperative federalism will enhance progress meeting  Governing Council interaction with economists  NITI Aayog   healthy exchange  ideas inputs  many policy related wonderful meeting with Minister  Foreign Affairs  International very productive meeting with Takehiko President   Asian Development With Former President PAHAL Yojana will bring    subsidy will reach people more  role This makes PAHAL Yojana among  largest cash transfer schemes   Congrats  beneficiaries Gives  great   know that over crore citizens have been registered   part   PAHAL  momentous believe  lies   working   people will continue working with  same Addressed  campaign rally  Delhi Vidhan Sabha elections  Ambedkar enthusiasm   across Delhi best wishes   development   Lanka   years   look forward  welcoming President Sirisena later this their Independence  greetings  people   bonds  culture shared values that  share interest  India   have  rise   occasion establish global benchmarks  transparency global CEOs  participated   BlackRock India Investor People  Delhi will reject  lies double standards   last years elect   that will transform People have seen  working  Central  last Every effort  ours  been directed towards improving lives Rohini rally  Highlighted    best suited  provide good stable governance tributes  Guru Ravidas Guru Ravidas teachings  equality brotherhood  society   great inspiration Commendable effort  Southern Naval Such  essential  create  Clean From  Dhan  giving homes   highlighted  efforts  bring  positive difference Apart from  stable needs  responsible People  tired  false lies Andolans that   aimed  solutions Continued campaign  Spoke   large rally   assures  developed world class Delhi everyone will  proud Leander Paes continues  make   congratulate    Mixed Doubles  with Martina Hingis   Australian Indian Coast Guard  left  stone unturned  tirelessly protecting   will always remain grateful  them  their salute  determination bravery   coast guard personnel   Raising    Indian Coast Great atmosphere   Delhi Urged people  vote  stability elect   with  complete best wishes   athletes participating   National Games that commence today Once  best wishes  everyone   Thank  very Will leave  Rajghat  tributes  Mahatma sure this conference will become  focal point  several innovative ideas that will help  Nation   years Scale speed  which  have  take development journey requires maximum smart utilisation  latest youthful energy that  Nation possesses   prized Giving  impetus  skill development through technology urge   explore ways  provide  many services  possible through   bring  world into  mobile While  look    think about  thus give importance also certain that technology will make processes simpler remove several obstacles slowing  pace  work actively working  create  robust digital infrastructure that would serve  interests   citizens transform their Centre  committed  realising dream   Digital with  vision  make India  digitally empowered society knowledge particularly delighted that  theme  this conference revolves around digital skill development also told that awards will  presented   congratulate   award winners laud their participants their expertise make this conference  perfect forum  look    forward  effective efficient told this conference brings together several delegates from Central State Armed Industry private despite     connect with That  when  decided   technology talk    this wanted  personally attend  conference   unable   there     could miss interacting with Good morning   delighted  join  National Conference  through homage  each every Martyr  laid    life   Their bravery courage will always Tomorrow morning  will address  National Conference   Looking very proud   determination spirit  service   Sharing  speech from Urged  cadets  think   unique nationwide campaign  mark    This  send  inspiring Will address  rally Mind  full  memories   association with  taught would like  thank   your good wishes   Republic missed hearing     listen particularly happy that thoughts anecdotes  issues close   hearts came  during    truly Thank     kind words   special  episode with President   truly  great Farewell Your visit  taken ties    level opened   Wish   safe Original commemorative stamp issued     back cover    telegram  gifted President Obama recordings consist  interview    video capturing  rendition   hymn Kindly  Gandhi Smriti Presented President    recordings from  tour  American singer Marian Anderson Once makes  distinct appreciable effort towards  Clean  congratulate Stopped  meet people  Rajpath after  warmth   people  always Interacted with  business leaders from India condolences   family countless   legend whose demise leaves  major void India will miss     grateful    adding  much needed humour   lives always bringing smiles Sharing   during  recording   radio Tune   January Best wishes  people  Australia  Australia Will always cherish  warmth   people  Australia during  visit last November Greetings  everyone  Republic Presented President  reproduction   telegram from    Constituent Assembly Answered questions  climate change  friendship with President Obama   Joint Press remarks   Joint Press Briefing with President meeting with President Obama  very   committed  taking relations   next benefitting  Nations Attended  wonderful banquet  Rashtrapati Bhavan  honour  President Recent elections through  years have witnessed increased especially among women young This   wonderful Congrats   officials  those  will  awarded today  their campaigns towards voter education urge  voters across India  make full   this theme  Easy Greetings   fellow citizens  National  also convey greetings  which  formed  this best wishes   BAPS Swaminarayan Sanstha  their commendable initiative towards  Swachh National Girl Child  salute  unparalleled accomplishments   girl Their role  nation building will always remember  bravery  Gaurav Kumar sacrificed  life  trying  save  Touching story  Mesak touching story  unconditional selfless from  sacrificed  life  save Without caring    Monika jumped into  river saved   sacrifice inspires Awards were also given    brave youngsters    with   salute their brave deed remember them know more about these youngsters from  specially created Urge     have brave deeds done  these youngsters  proof that   kept  each    element that inspires    live Extraordinary Meet  carried children    preventing them from Labhanshu  truly   saved  lives from drowning   feet deep river touching deed  Mhonbeni Ezung saved  life    fell into Stevenson selfless brave deed saved  life    courage will always Tooldev Sharma know swimming  that prevent  from saving   from   deep Superb courage Midhun  jumped into deep well saved  drowning year This friend  Aqil Mohammad  from Kerala swam rescued    girl from More power This expert Anjith rescued  boys elder    went fishing   river Kudos Rajdeep This youngster saved  lives  girls  were drowning provided them timely Amazing grit shown  Hiral  rescued  baby   drowning    life Balram from Chhattisgarh saved  child from drowning   feet deep Salute this young words would  enough   young friend Ripa  saved  brother from  deadly suffered pain  that  younger brother could  Hats   Brainson Singh from Meet Ashwini Bandu  extraordinary youngster whose extraordinary bravery saved Sahanesh  from Karnataka also rescued several youngsters    brave Proud Zeal presence  mind timely intervention saved lives  many students teachers   school Meet Rumoh  valour saved  year    stuck    high voltage Devesh Kumar    life  risk  order  chase miscreants  were stealing from Gunjan Sharma from Assam displayed tremendous bravery saved fellow school students from Resham life   inspiring journey  determination Each  these youngsters placed  lives  others over their Their experiences  deeply  salute each every   them congratulate   young friends  have been conferred  National Awards Interacted with youngsters whose selfless efforts courage gave  fresh lease  life  others Remembering Balasaheb Thackeray   birth    life dedicated towards  lives Subhas organisation leadership skills were    phenomenal  whom good   Nation courage patriotic zeal inspire   birth     proud   Netaji Subhas Chandra days   spoke  Crown Prince Salman enquired about King News  King passing away thoughts  with  people  Saudi  have lost  guiding force  King during this hour King  have lost  important voice  left  lasting impact    condole part  this memorable  illustrating  special bond between India MyGov gives   opportunity  post your questions   specially created Open with President will   complete without your Send your  till  using eagerly looking forward   special  programme with President which will  aired This  episode will   special where  Republic  guest  will share  thoughts extremely delighted  know that  membership drive  crossed crore  congratulate Karyakartas  their their Statehood  good wishes   people Greetings   people  Tripura  their Statehood Wishing  sisters brothers  Meghalaya  their Statehood success  PMJDY sets  stage   major transformation   people will enhance embarked  PMJDY with    integrate  poor with  financial  comprehensive extent   coverage congratulate   State Banks  Finance Ministry   great success    Dhan unprecedented success   Pradhan Mantri  Dhan Yojana  This   matter  pride   entire inputs   Embassies received through MyGov would  very valuable   Conference  Heads  being held Friends from  share your inputs  certain aspects pertaining   Embassies Share your ideas inputs  marking  first ever    this MyGov Open picture   meeting with Wolfgang  Federal Finance Minister find more details about these innovators  their innovation Ashwin Nagpal must  complimented  developing this Remotely Controlled Reconnaissance Ajay Rathore  developed  Real Time Tracking System  Mobile Phenomenal This  Indigenised  System  Long Range Reconnaissance Observation developed  Girish Chandra Joshi Integration   Night Camera with Unattended Ground innovation Monitoring System  Armoured Formations During developed   Seemala Vijay System  Monitoring Serviceability  Electrical Transformers  been developed  Vivek Here   Unmanned Ground Logistics Delivery developed  Nitish Kumar Singh shared    meeting young innovators from  Army  Army Today  want  share more details about them their Here   that takes  through  speech    Global Business Ghelubhai worked extensively among  poorest    efforts will  remembered    soul rest condole  passing away  freedom fighter from Shri Ghelubhai    life devoted  selfless service towards great Simple vast   thoughts writings have been  strong influence  humanity Honoured young Army officers  have done exemplary innovation  fields relating Have always enjoyed meeting young innovators  glad  have   opportunity  meet such innovators during Army  function Commendable effort towards  Swachh Bharat  friends from Japan Chamber happy  know about these efforts   Indian Embassy  Egypt  popularise Yoga among people Simply Congrats  great story  human grit very very proud  Bhakti Sharma    best wishes Sankranti greetings   sisters brothers   this auspicious  bring abundant happiness prosperity  lives Army   salute  indomitable courage valour    proud  their dedication Latest newsletter takes  through important events   previous such   Vibrant Gujarat auspicious occasion  Magh  greetings   people   this festival    sprit  happiness best wishes   this special  bring happiness   usher   brighter better full  unprecedented Pongal greetings  friends  Best wishes   hardworking farmers   great   bring more prosperity  their Greetings   sight   skies full  colourful kites   Have  wonderful  with family Wishing everyone   auspicious occasion  Makar festive spirit across India   celebrates  diversity  India that  cherish  extremely proud convey  heartfelt greetings   fellow countrymen women   various festivals across Lohri greetings   this festival brighten your lives with abundant prosperity good Share quotes  Swami Vivekananda thoughts  Swami Vivekananda that influenced  will  some  them this birth    Swami    personal whose thoughts ideals have influenced very good effort   colleague towards  Clean This will strengthen Swachh Bharat Sharing highlights   speech    Conclave during  Vibrant Gujarat Discussed  various sectors during meeting with Minister Chris Alexander Very good meeting with  discussed strategic partnership President upcoming With Secretary General   discussed aspects relating  climate change clean Great start  Vibrant Gujarat Insightful speeches  world leaders captains Deputy  Janusz Piechocinski  talked about enhancing With Second Minister  Trade very good meeting with Trade Minister Andrew Robb Premier   South Wales Mike Talked about  manufacturing sectors with  Minister Lord  Livingstone Discussed several issues  strengthening during  meeting with Overwhelming response   Ramlila Maidan Sharing  video Chaired  meeting   heath  comprehensive discussions  achieving  goal  Health close friend reaffirmed continued solidarity support   development Noteworthy contribution    family towards Swachh Bharat appreciate  determined effort  towards  Clean This effort  inspire several message  there  several opportunities waiting    contribute President Donald Ramotar    very good  discussed ways  enhancing Another picture extremely proud   They have made India global their strong values have endeared them wherever they have been  fruitful   Attended Pravasi Bharatiya Divas interacted with Condemnable despicable attack   solidarity with people   thoughts  with families  those  lost their Spoke about need   assets   Posts Dept  Post offices must  used effectively  provide services  citizens along with  teacher   most respected employee  rural This    small presented  report   task force  leveraging  post office privilege  release  commemorative coin  honour  Shri Jamsetji With Party colleague popular Shatrughan Sinha    delightful invite   share your ideas  Ganga rejuvenation  this specially created MyGov Several aspects relating  Ganga rejuvenation were discussed today   meeting Replacing  bulb  South Block with  part   efforts towards conserving Birthday greetings Murli Manohar  scholarly zeal contribution  public life   wish   long healthy Spoke  Kalyan Singh  greeted    Wished   long life filled with good salute  stellar work   Clean Their contribution  Swachh Bharat Mision  truly great initiative Spreading awareness  Swachh Bharat MIssion during  Powai    very good inspiring personality   hearts both      hear about Shri Upendra their Independence  good wishes  people    confident  even stronger ties   years Greetings   auspicious occasion    spirit  harmony compassion  strengthened Banking sector plays   role  economic  banking sector   country mirrors  economic </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>