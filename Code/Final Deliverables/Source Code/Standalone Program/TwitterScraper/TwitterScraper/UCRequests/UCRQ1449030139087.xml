<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">doors  this government  open   discussion over tolerance  intolerance with those  have misgivings about  functioning also appeal   literary scientists  others  have returned  award  kindly take their awards appeal      people  this country  join hands  strengthening  spirit wish  assure  nation that  anyone tries  disturb  communal harmony   country they will   spared Shall attend   Golden Jubilee Raising  parade  Chhawla camp  Delhi today India  proud   security forces specially those guarding   salute  indomitable courage  valour    jawans emerged   formidable border guarding force    reckoned   largest     best   world Border Security Force  celebrating  golden jubilee   formation best wishes    jawans  their families heartfelt tributes  those killed  Mumbai Terror attack    working  bring  perpetrators  justice Shall participate   debate  Bhimrao birth anniversary year  Commitment    Sabha today good wishes   people  India   first Constitution   heart  soul   democratic system Greetings     auspicious occasion  Guruparab  also about celebrating peace  harmony Mayor  Shanghai city before leaving detailed discussion   range  issues where both  countries  actively cooperate with each Secretary   Central Political Legal Affairs Commission   Communist Party  China Meng Jian agreed  increase cooperation  counter terrorism mechanism  range  other important issues Spoke  Tamil Nadu Chief Minister  Jayalalitha  apprised    flood situation India   National Police Academy   National University  policing  India would   immense help Visited Public Security University  China  Beijing   neraly faculty memebrs  teach security  policing During  China visit  intend  further strengthen  tradition  mutual learning  better understanding from each Leaving  Delhi  Shall spend  days  China  bilateral meetings  other Ashok Singhalji dedicated  entire life  service   nation   five decades  social life made   institution Deeply saddened  learn  Shri Ashok       leading lights  Ramjanmabhoomi pray   speedy recovery  Shri Ashok Singhal Heading  Medanta Hospital  Gurgaon  inquire about Shri Ashok Singhal Nehruji promoted education  children    realised that India would   developed country only   children were better educated Thanks  leaders like India today have  democracy based  universal adult  sovereign Parliament  free press Pandit Nehru   visionary leader  understood that  Government based  democratic principles   need have differences over   doubt  intention  work   welfare  people  nation Attended  function organised  mark  birth anniversary  Jawaharlal Nehru  NMML   Delhi today this difficult hour  people  India firmly stand with  people   heartfelt condolences   families   deceased Deeply pained  hear  news  Paris terror Words cannot adequately condemn such attacks where innocent people have been thank  Bangladesh government   active cooperation  sending Anoop Chetia  India Handing over  Anoop Cheita  Bangladesh shows  commitment  maturity  cooperate with India  issues like terror organised crime welcome  handing over  Anoop Chetia  India   Bangladesh hope these states Jharkhand  continue their forward march towards peace were carved   separate states during Shri These states have come  long  since then Greetings   people  Jharkhand  Uttarakhand   foundation   their respective economic package  Bihar   commitment given   Prime Minister which will  fulfilled   Centre   cost respect  mandate given   people   hope  government  Patna will lead Bihar   path  peace Congratulated  president Shri Lalu Prasad   president Shri Sharad Yadav  their performance  Bihar Assembly elections Spoke  Shri over  phone  congratulated    victory  Bihar assembly elections Going  Shri residence  greet    birthday today Greetings   beloved leader Shri  Krishna Advaniji   birthday   bless  with good health  long life There   need  establish     this potential  Indian police  govt  working  this direction state police  CAPFs have many hidden talents  hold   potential  promise  their sporting winners   India Police Badminton   closing ceremony   Delhi today want  create  sense  confidence among   will  allow anyone  vitiate  communal harmony Certain forces  trying  create  sense  fear among  religious minorities through false Campaigned  Bihar   candidates today  addressed election meetings  Singheshwar  Madhepura assembly segments Heartfelt tributes  Sardar Patel   jayanti    nation will always remain indebted hopeful ties will  stronger  stable under Vidya able guidance Congratulations   Vidya Bhandari   election   first woman president    positive sign  democracy  South Asia After reaching Patna this morning shall address meetings  Goriakothi  Daraundha  Bihar Heading  Bihar  election Shall address seven election meetings have close  security matters   committed  closely fight  organized crime  terrorism bilateral strategic partnership  evolved considerably during  recent years between India Australian Attorney George Brandis   North Block   Delhi focussing  issues like development  good governance whereas  opposition  resorting Addressed election meetings  Minapur  Sakra while campaigning   candidates  Bihar today this auspicious festival   extend  best wishes    fellow citizens  celebrating Spoke   Shri Prakash Singh Badal  apprised    prevailing situation  Assured    possible help from  Centre India  Nepal have always been committed  work closely together  advance peace  prosperity   South Asian Shall address three more election meetings  Shahpur  Garkha  Bihar tomorrow Addressed three election meetings  Bihar   getting  support from  sections  society including young voters family members  Netaji Subhash Chandra Bose   Prime Minister Shri Narendra residence today people  Bihar  looking  development  good  opposition trying  divert  attention from these issues There  massive popular support  favour   candidates  Even Shri Mulayam Singh Yadav  able   this  surge Continuing  election campaigning  Bihar addressed three more meetings  Chenari  Ramgarh today Congratulated     Nepal  Sharma  over   hope ties will further  strengthened under  leadership Shall address four election meetings Sasaram   Bihar today beacon  moral values  ethics  politics  Prakash Narayan represents hope against oppression Prakash Narayan   birth    source  inspiration  those  want change   system Ravindra Jain   instrumental  producing many memorable compositions  Hindi  death    loss   music Saddened  learn  music composer Ravindra Though visually challenged     seeing  world through music Nationalist edited   beautifully captures  journey  Pranab Mukherjee   leader  President coffee table book Nationalist featuring Pranab Mukherjee  released  today Addressed four election meetings  Bihar  people  Bihar  yearning  development  good governance participating states  Gujarat   have expressed firm conviction  strengthen  security apparatus Several important issues were discussed  Western Zonal Council meeting including  issue  terrorism  coastal purpose behind holding zonal council meetings   increase cooperation among states  coordination between  Centre   states Attended  Western Zonal Council Meeting    meeting  fruitful with several positive outcomes Saddened  learn  Manipur Governor Shri Syed  heartfelt condolence   bereaved  soul rest  peace Shall visit Nagla Chandrabhan   birth place  Pandit Deen Dayal  attend  function organised  Nehru Yuva Kendra Shall participate   function organised  Ministry  Culture  mark Pandit Deendayal birth anniversary celebrations Deendayalji propounded  theories  Integral Humanism which  guiding principles  social integration uplift   poor Today  also enter into  birth centenary year  Pandit Deen Dayal    moment  rejoice great ideologue   profound economic thinker Pandit Deen Dayal Upadhyay   birth anniversary Deeply pained   loss  lives during  pilgrimage  Mina near condolences   families  those  died   incident government  committed  strengthen  road  telecom network  improve connectivity   flung border areas   country There  issues  road connectivity  telecom connectivity  Ladakh region  Jammu  Kashmir specially  forward salute  ITBP jawans officers  their steadfastness  their indomitable spirit  conquer  odds ITBP jawans  working  extremely harsh  inhospitable spent  night   ITBP post     amazing learning experience reaching Tagyarmale post    first hand account   situation near Finished  three  visit  During  visit  forward areas  Ladakh  went  ITBP posts  Tagyarmale breathtaking beauty  mighty Himalayas   best described through  Somewhere Near Visited  ITBP camp  Samba  Jammu region today morning    jawans   also known Leaving  Delhi  Jammu this Shall spend three days  Jammu During  visit  will visit forward areas near government  formulated many schemes  give opportunities   youth should  turn into     country youth  seen     They   asset  India   they need   opportunity  perform During  interaction with  students  appealed   youth  become  stakeholder   process wonderful interaction with  students   inaugural function  Youth Conference  SRCC  Delhi today Shall interact with  students  Shri  College  Commerce   North Campus   Delhi Visited  commemorative exhibition    Rajpath   Delhi today Greetings   Prime Minister Shri   birthday   bless  with good health  long Spoke  Madhya Pradesh  Shri  discussed  situation  Jhabua post  cylinder  going  Jhabua tomorrow Reached participate   valedictory session  Vishwa Hindi Sammelan  Singh Memorial Lecture series  National Security Reached National Industrial Security Academy  Hyderabad this evening  meet  CISF trainee Assistant Commandants  other probationers with  delegation  Christian religious leaders   Archbishop  Bombay Shri Oswald Cardinal Gracias happy    inquisitiveness among   youth   country  ready  contribute  making India  great students  Symbiosis university asked  several questions pertaining  politics wonderful interactive session with  students  Symbiosis International University  Pune today Greetings     auspicious occasion  Krishna Shall interact with  students  Symbiosis University  Pune tomorrow   occasion Congratulations  Indian cricket team  winning test series   Lanka after team deserves  credit  this historic Spoke  Manipur  Shri Ibobi Singh regarding  incidents  violence  Churachandpur Centre  closely monitoring  situation also   jawan Shri Ashok Kumar   badly injured   ambush   affected area   pray   speedy recovery Constable Salim  Police  AIIMS   Delhi   injured   encounter with Celebrated with kids  students from various schools  Sharing  picture with Remembering  supreme sacrifice   brave soldiers  laid down their lives     observe  anniversary today Heartfelt greetings   brothers  sisters  Kerala   auspicious occasion  Happy Onam Additional paramilitary forces have been rushed  Gujarat    request made   state Assured  Assam    possible assistance from  Centre  help  people  flood affected areas Spoke  Assam  Shri Tarun Gogoi regarding  flood situation   Central state agencies  carrying  relief rescue party karyakartas  Rajasthan also deserve credit  special mention  remarkable performance  civic bodies Congratulations   Rajasthan State  President Shri Ashok Parnami  impressive performance  civic polls Also spoke   Raghubar   apprised    Naxal  situation   state  improved  recent months Unfortunately  constable  killed  this  express  deep condolences   bereaved Spoke  Ranchi  Shri Prabhat Kumar  displayed exemplary courage while fighting  Naxal groups  Jharkhand Going   Hospital   Delhi    last respects  Late Suvra Mukherjee Saddened  hear  news  Suvra  heartfelt condolences  Shri Pranab Mukherjee   bereaved family impressive performance  Madhya Pradesh  once again reaffirmed faith   commitment  good governance development Congratulated  Madhya Pradesh Shri over  phone  spectacular performance  civic bodies polls Flagged  from Saran There    surge  popular support Leaving Delhi  Shall flag   from Sonepur  Saran district today have instructed  Home Secretary Shri  Goyal  send  extra  battalion  Deoghar  better crowd security spoke   Jharkhand Shri Raghubar   apprised    situation  Deoghar post  stampede  asked  extra  deployment heartfelt condolences   families  those killed   stampede  Deoghar   pray  speedy recovery government   increased  pension  freedom fighters  introducing  hike  percent dearness relief  fiscal honour  support  freedom fighters  their families  government introduced Fighters Pension Mahatma Gandhi   movement from  front  thousands  people joined   become freedom Today   anniversary  historic India This movement paved will    Centre  Excellence  provide better sports facilities   athletes from police  other security forces next World Police Games   held   have assigned  target  plus medals   Indian police They have confidence   capabilities   athletes   medals  World Police They   medals  Olympics  Asiad  well Indian Police team  made  country proud  winning more than medals including Gold  World Police Games athletes from police  other forces   medals   country  World Police Statement  Union Home Minister  Terrorist Attack  Udhampur Rocky Shubhendu  only thwarted  terrorists  also continued fighting till  sacrifice will always  remembered salute  supreme sacrifice   constables Shubhendu   Rocky  fought  terrorists till their last terrorist  been killed   forces   search     condolences   families  jawans  died  this attack Spoke    Shri  Pathak regarding  attack  convoy near   CRPF have launched  operation against also pray  speedy recovery   injured   Harda train  govt agencies  carrying  rescue    spot Heartfelt condolences   families  those  died   train accident near Harda  NDRF teams have been rushed congratulate Shri Yadav   book  wish that  continues  inspire  people  India with  oratory  leadership Narain Yadav  known   inimitable oratory concern   poor  deprived  reflected book  Gaon Gareeb  Kisan    compilation  speeches delivered  Parliament  Shri Hukum  Narain Attended  book release function organised  Constitutional Club   Delhi NDRF teams have been rushed   landslide affected areas  Chandel  assured  Manipur    help from Text   statement  Rajya Sabha today  Gurdaspur terror attack Centre  monitoring  flood situation  Gujarat  other flood affected areas Centre  providing  assistance  Gujarat teams  active   ground rescuing people  flood affected Spoke  Gujarat   apprised    flood situation    Centre  rushed NDRF teams from death  Kalam   irreparable loss  this   left   void hard   deeply mourn   Kalam Sahab Kalam     impeccable indomitable profound knowledge  firm monitoring  situation  Gurudaspur    confident that  situation will  soon brought Also spoke  Home Secretary   regarding  situation  Security forces have been rushed noted film actor Prabhas  Shri Krishnam Raju Looking forward  watch latest film Birthday wishes  young  dynamic   Maharashtra Shri Devendra Phadnavis  pray   healthy  long Greetings  Shri   birthday   bless  with good health  long life Greetings  everyone   occasion  Nabakalebar Rath Yatra assured  Assam    possible help from  Centre including additional security forces Shri Gogoi told  that  state  already rushed security forces  Tinsukia region  maintain peace Heartfelt condolences   families  those  lost their lives  stampede  Rajahmundry  pray  speedy recovery Performed    good wishes   pilgrims coming  participate  Kumbha Reached   participate   Parliamentary Consultative Committee meeting  coastal thank     your good wishes     grateful  your kind words expressing affection people   North Eastern region have suffered  trauma  insurgency   they must reap  dividend main objective   meeting   ensure peace  security    region  dividend   form  accelerated development North Eastern States  Guwahati   fruitful meeting   discussed many important issues Leaving  Shall meet     North Eastern States tomorrow  discuss issues pertaining  development joint statement   step forward towards normalising bilateral however  future outcome will  keenly Meeting      Pakistan Rangers will also help  stablising  situation Welcome  decision  expedite  trial pertaining  Mumbai attack including additional information like providing voice joint statement   shows signs  positive  engagement  different levels will hopefully open  possibilities Tributes  Syama Prasad Mookerji   birth    nationalist leader  sacrificed  life  unity Going  Jhabua  Madhya Pradesh Shall meet  family members  late  leader Dilip Singh Bhuria  passed away last month Shri  launched three important social security schemes   welfare  those working  unorganised sector families  brave sons  Maudha village  Farrukhabad district  sacrificed their lives   nation Paid tributes  soldiers  laid down their lives while serving  country    Maudha village Happy  know that  four positions   UPSC exams were secured   women  would Congratulations   successful candidates  cleared  UPSC Civil Services exams this  should  lose Birthday greetings   Chief Minister Shri Laxmikant  wish  long  healthy life Planted  tree today software engineers have made  country proud with their talent hard need   full potential   sector programme launched   Prime Minister will  only attract investments  also give jobs  nearly lakh Indians India today  recognised globally   contribution  Information  government  committed  provide digital governance Addressed  students   JIIT convocation exhorted them  take pride  rich cultural Shall meet  students  Jaypee Institute  Engineering  Technology   convocation function  NOIDA today decision  build  National Memorial  birthplace   step forward  strengthen democratic instincts institutions must always remember  contribution  Jaiprakash Narain  worked tirelessly   return  democracy Forty years   imposed   country  muzzle democratic spirit    Indian history Ayush Ministry  started  scheme  voluntary certification  yoga professionals which   welcome initiative Yoga  performed  every part   country including land   Thal   occasion made history with  participation  millions  people around  world    Shri Attack  Parliament  highly  express  solidarity with Afghan people  these difficult times should applaud  role    Shri  played  important role  making Yoga Participated   anniversary celebrations  Foundation  Punjab today Shall visit Anandpur Sahib  Punjab tomorrow  participate  anniversary celebrations Good    employees taking yoga classes after office Delhi  Shri  North Block today Spoke  Assam Chief Minister Shri Tarun Gogoi regarding  flood situation   Centre  assured  state   possible help some amazing young wrestlers during  inaugural function  Asian Cadet Wrestling Championship  Delhi today Reached Gandhi Auditorium  Lucknow  participate  Suheldev with  group  Shia community from Lucknow area  apprised    problems facing them Former  Shri Lalji Tandon joined   unveiling  foundation stones  development works  Lucknow city Reached Heading  Indiranagar  participate   launch function  certain development works   constituency Shall visit Lucknow tomorrow  launch certain projects pertaining  development  civic amenities   city Deeply distressed after  news  attack  Army convoy   will  allow  sacrifices   soldiers Sharing pictures   visit  Sukma district   salute these brave   perform their Teamed  with  Raman Singh   badminton court after inaugurating Police Sports Complex building  Raipur Video link   press conference held   Delhi today Heartfelt tributes  fearless freedom fighter  great revolutionary Veer Savarkar   birth anniversary Reached Shall participate  Kalyan government   Shri   action mode    been successful  restoring confidence hope  India   people Shri Modi recently launched three social  economic security schemes   welfare  poor  weaker sections success   Dhan Yojana  helped almost  Indian families  connecting with  economy  this country through  bank account Even after clearing defence proposals worth  lakh crore there   charges  corruption against this government defence preparedness  adversely affected   delays  decision making during   govt cleared defence There   marked improvement  economy   investors  more than willing  invest year  Narendra Modi  govt  pulled  nation    years  despair  creating  environment  hope confidence Shri Modi  taking message forward with   mission    going  benefit manufacturing   country Madan Mohan Malviya    those leaders  started  campaign named  promote Indian goods among Participated   function organised Shall visit West Bengal Kashmir Rajasthan  Gujarat  participate  Sampark next week Going  Lucknow     Shall participate   function organised  Malviya Mission tomorrow jawans  always ready  make sacrifices   country because they have  deep sense  pride Attended  investiture ceremony    only  First Line  Defence  also  First Wall  Defence Wonderful   that    running trials     national highways  emergency landing  fighter jets Akbar   called    contribution then  Maharana Pratap  recognised  Pratap text books have  been able  fully recognise Maharana contribution  significance Maharana Pratap became  icon  freedom fighters because  name evoked  strong feeling  love  sacrifice good meeting with Shri Ratan Tata today News   earthquake hitting Nepal again  Several parts  India also felt    collecting more details  info Spent some time with Mahant Nritya Gopal Reached Shall participate   foundation laying ceremony    wing  Netra three newly launched schemes will benefit  vulnerable sections   society  providing them  much needed Participated   launch function  Atal Pension Jeevan Jyoti Yojana Suraksha Bima Yojana  Lucknow  Uttar Pradesh today Going  Lucknow today     visit  Uttar participate   launch function  three  schemes  social security NDRF team members   exemplary work during rescue relief operations   recent earthquake  Nepal Gurudev Tagore spent time  building  unique educational model  helped  awakening  Indian Heartfelt tributes Remembering Gurudev Rabindranath Tagore   birth anniversary   eminent writer great educationist Centre   only increased  compensation given  farmers  also reduced  criteria  compensation from percent damage Centre  released crore  Assured   that Centre will reimburse  amount after  report  team Spoke  Uttar Pradesh Chief Minister Shri Akhilesh Yadav  providing immediate relief  hailstorm affected Centre  made changes   norms  purchase shrivelled grains  tweaked  standards  moisture content  help Interacted with farmers  agricultural labourers  Banda district  Bundelkhand region  Uttar Pradesh Shall visit Banda district  Bundelkhand region  Uttar Pradesh today  meet  farmers affected  hailstorm  unseasonal rains Assured  Nepal ambassador   possible help from  Centre expressed solidarity with  Nepalese people  these difficult times Shri Deepak Updhayay lauded  efforts  Indian agencies involved  rescue  relief operations  earthquake affected areas Indian Army  other forces  doing  remarkable NDRF  rescued recovered dead bodies  evacuated more than people Spoke   NDRF Shri  Singh this morning  apprised    ongoing rescue operations  earthquake affected areas  Nepal have already instructed  Bureau  Immigration  issue  stranded foreign tourists coming  Nepal India Flagged   inaugural   Double Decker from Anand Vihar Rail Terminal  Delhi today Spoke   Uttar Pradesh  Bihar asking them  mobilise  fleet  buses ambulances  rescue people trapped  Nepal heart goes    people  Nepal  have been    massive  stand   people  Nepal  these difficult times Centre  giving full cooperation  assistance  Bihar government   efforts  provide relief  cyclone affected Visited  cyclone affected districts  Madhepura  Purnia with Bihar Chief Minister Shri Nitish Kumar today Shall visit Bihar tomorrow with  central ministerial team  take stock   situation  storm affected districts Deeply pained  hear  news   farmer committing suicide  Jantar Delhi   institute  inquiry into  incident Shri Kumar  visiting  storm affected areas  take stock    Centre  assured  state   possible Spoke  Bihar  Shri Nitish Kumar  apprised    situation after  storm  three districts Going  Eastern  Shall meet  farmers  Chandauli district  have been affected  hailstorm  unseasonal appeal   state governments  give immediate relief    Centre  allocated enough funds first hand experience  crop damage   Centre  relaxed norms   even  damaged wheat crop Centre   states have  work together  provide relief  Centre  allocated crores  SDRF farmers  Sarsawa  Saharanpur They apprised    situation post  unseasonal rains  hailstorm Heading  Saharanpur  Budayun districts today  meet  farmers  have been affected   unseasonal rains  crop salute  bravery   security personnel  laid down their lives while fighting  wish  speedy recovery   injured Spoke  Chhattisgarh  over phone  apprised    situation  Extra CRPF teams have been rushed states should immediately address  crisis facing   appeal  farmers  distress   commit   with Centre  allocated enough funds    states  increasing their share  revenues from percent MUDRA will benefit millions   other small businesses   This step will usher    dawn congratulate  Prime Minister Shri Narendra Modi  launching  Micro Units Development  Refinance Agency good meeting with Shri Mufti  discussed  range  issues related  development   state promote sports  other such activities everyone should come forward  contribute  changing  mindset  develop  sports culture sports persons have proved their calibre  winning number  medals   Olympics  other international sporting India should become  super power  only  economic terms  also   field with budding sports sports lovers  ethusiasts  Rani Kittur Chennamma Stadium  Bengaluru today During  visit  border areas  West Bengal   apprised  several issues including cattle illegal immigration border  certain unfenced riverine stretches  West Inspected  such stretch Going  West Bengal Shall visit     Cooch Behar area   Beegha Centre  already rushed  teams  NDRF  flood affected areas   will provide  possible assistance Spoke  Jammu  Kashmir  Shri Mufti Mohammad Sayeed today  apprised    flood situation moment  pride  happiness that will  conferred upon Shri Atalji   loved  admired Congratulations   taking swift action  Jabalpur church attack Kerala houses    oldest churches    other country   world   diverse  united India   country which respects   religions believes  peaceful  have  sects  Islam living here peacefully hand  other countries minorities demand  their protection   India country like India allow changes   demographic profile cant  religions prosper without promoting conversion social service   performed  India without resorting also raised certain questions before  audience  there should   national debate  these conversion necessary believe that  minorities   country  patriots  their patriotism should Addressed  annual State Minorities Commissions Conference  Delhi today highlighted commitment  welfare  weaker sections Pakistan should think    long this  will  must come Atalji  only wanted friendly relations with Pakistan  connection between  people Visited border Atalji  taken   through Wagah border  improve relations with Pakistan Going  Lucknow with  Rail Shri Manoj visit  Medical College where  injured passengers  Janta  have been admitted also pray  speedy recovery  those jawans  were injured  terror lost  CRPF jawan  this terrorist  salute  bravery  express  heartfelt condolences security forces have done commendable work  They have eliminated  terrorists  attacked  police station this Text   Speech    International Counter Terrorism Conference  Jaipur gives  pleasure Congratulations  Team India   victory   Quarterfinals  World Indian performance  peaking   right opinion that  government should benefit from  many strands  opinions   formulate inputs  security experts  could play  valuable role  policy formulation timing  this conference  very  since  world  witnessing   paradigm  terrorism   form Participated   International conference  Counter Terrorism  Jaipur today  highlighted certain issues Shall address  inaugural session  International Counter Terrorism Conference  Jaipur Going back  Tokyo from Sendai   Bullet Train  driving staff showed   train wonderful evening with  Indian students  Tohoku  wish  their bright future Indian students studying  Tohoku They  bright students pursuing degree doctoral courses here Mayor  Onagawa Yoshiaki Suda praised  NDRF rescue work   called Visited Onagawa city today which  badly   NDRF  commendable rescue work here   aftermath   Earthquake Also highlighted  importance  global partnership  build communities  mitigating  impacts made  appeal   countries  reaffirm their commitment  pursue effective disaster risk reduction through international cooperation objective   deliberations   generating ideas  bring about better international cooperation  support  Framework There  participation from over countries from  well  international most important round tables focusing   issue  global cooperation  disaster risk reduction  framework Chaired  Round Table  Cooperation  support  Framework   Sendai today Visited  Buddhist Temple  Sendai This temple   Japanese interpretation  Mahatma Buddha Participated    World Conference  Disaster Risk Reduction  Sendai  presented  Country Statement Reached Tokyo this Heading towards Sendai  attend  Third  Conference  Disaster Risk Text   Statement  Parliament  made  Statement based   report received from Congratulations  Indian cricket team  maintaining  winning streak    Cricket World  keep   good extend  good wishes   CISF officers  their families Suggested  CISF  carry  security audits every four months  upgrade  security  important installations CISF  also diversified itself  many other areas including security consultancy services while retaining  core Attended  CISF Raising  parade CISF   dynamic force providing security  strategic Saddened  learn  veteran journalist Shri Vinod    sensible journalistic voice well known   candid Greetings  Shri Shivraj Singh Chouhan   birthday  wish   healthy Bahut bahut shubhkamnayen spelling   slew  measures  curb  flow  black money  Budget  insured more transparency accountability Union Budget  mapped  target  providing Visa  Arrival  countries    well positioned  achieve this goal Both  Rail Budget   Union Budget have successfully captured  mood   Indian economy     take  giant leap Schemes like Universal Social Security System Atal Pension will   long   strengthening  social security   India Budget  only promises  increase  ease  doing business   also provides   social security   weaker sections Congratulations  Shri  presenting  forward looking This Budget highlights  contours Rail Budget underscores  plan  make  Railways more deserves credit increasing investments  improve infrastructure passenger amenities  Rail Budget  pushed  Railways back   right congratulate  Shri  presenting  balanced  growth oriented Rail Budget Israel  expressed  desire  share weapons technologies with Both  countries  willing  move During  visit  Israel  November last year   invited Israel  become  partner   initiative   defence sector with  Defence Minister  Moshe   Delhi greatest Olympian  wrestler   country Shri Sushil Kumar Development   country depends    round development     need  follow  principle have asked Delhi Police  work  close cooperation with   State Government  Delhi   development   national Delhi Police  done  excellent They have come  with online solutions like  which  easy   citizen friendly Attended  Raising  function  Delhi Police Delhi Police works  extremely challenging salute these brave   stay away from home  perform their national  love  security forces Visited Khantlang   North Tripura   guarding  border  extremely inhospitable Greetings    birthday  wish   healthy  long visit  Moreh  also   jawans  Assam They  doing  good border offers unique opportunity  open links  routes  trade commerce with East Asian Centre  looking forward  resolve border issues with Myanmar amicably through Visited  border town  Moreh  Manipur share  very cordial  warm expresses  condolences   families  people  died   Rail accident near Hosur pray   speedy recovery   injured instructed   Delhi  conduct  speedy inquiry into this incident  find   culprits responsible  this Strongly condemn  vandalisation  school building  Spoke   Delhi regarding this incident before leaving  Manipur Reached Imphal  Manipur this  will spend  days   Heading  Moreh near Myanmar meeting with  designate Shri Arvind Kejriwal Assured    possible help from Deendayalji highlighted  need  synergy between material  spiritual development   individual society  peace Tributes  Pandit Deendayal Upadhyay    philosophy     economic wellbeing Shall participate  Conference  Governors  Rashtrapati Bhawan Sharing  historical Congratulated Shri   electoral success over   assured  full cooperation  development believe  radio channels  play  important role  spreading message  patriotism  nationalism  border areas also played  decisive role  launching counter insurgency   Assam    broken  backbone  terrorist orgs like NDFB been successful  safeguarding  borders  also actively working  spread  message  patriotism  areas close Attended     officers  Srinagar    lead force guarding Bhutan Reached Dehradun  Heading  Srinagar  Garhwal  attend   ceremony assured them that  present dispensation would never tolerate  discrimination   name  language with  group  leaders from Christian community today  were concerned over  reports  attacks  churches Shall address three election meetings  Kirari  Mundka  Delhi Delhi voters want  stable government which gives credible governance Only     ability  realise this dream Addressed  election meetings  Delhi    good reputation among  voters   proven track record  good salute  courage  security personnel  risked their lives    pray  speedy recovery   injured jawans Spoke    inquire about  health  injured security personnel  bravely fought with  Naxals Campaigning  Delhi After addressing  election meeting  Matiyala  shall address more meetings Delhi needs  government which provides accountability  does  want  government which behaves like opposition Delhi voters were betrayed   party which promised many things during last assembly polls   failed  govern after While campaigning   candidates  Delhi today  appealed  voters  vote   stable govt which works  development governance Shall campaign  Delhi today  address three public meetings  Badarpur  Okhla Remembering Mahatma Gandhi     visionary leader  believed  uplifting  poor weaker sections  society Reached Kanpur  Uttar  ITBP  come  with  infrastructure  govt  committed  strengthen  infra facilities nation will never forget  sacrifice made  Netaji Subhash Chandra  offer  heartfelt tributes Remembering Subhash Chandra Bose   birth anniversary  fought   motherland till  last breath NDRF personnel have done commendable work during different natural disasters  rescued thousands  people Participated   NDRF Raising  celebrations   Delhi   lead force   natural calamity  disaster  India looking forward   next Zonal Council meeting  Lucknow  January which will  attended   states Zonal Council Meetings also help  promoting  idea  cooperative federalism Zonal Council meetings provide  states  platform where they  raise Attended  very productive  fruitful meeting   Eastern Zonal Council  Patna today which  attended Bhutan shares  strong cultural bond with Bhutan  always been  friendly neighbour willing  cooperate   issues meeting with  Lyonchhen Tshering Tobgay   Delhi today   discussed  range extend  good wishes   Army soldiers  their families  this Army   pray  their wellbeing greetings     auspicious occasion  Makar Magh Pongal Bhogi After participating   National Youth Festival  Guwahati  have just reached Ahmedabad  participate   Vibrant Gujarat birth anniversary today    humble respects  Swami Vivekananda    first youth should take inspiration from Swami Vivekananda  left  indelible mark   Indian society through  spiritual messages appealed   youth  shun violence drugs during  address   Youth  drugs lead  degradation   society Participated  National Youth Festival  Guwahati  youth   country  transform this country into  global Lanka will definitely help  strengthening  bilateral ties improving  security environment   region Extending  heartfelt congratulations    Maithripala Sirisena   remarkable salute  indomitable spirit   Indian diaspora that  earned global respect   hard discipline  success confident that Centre   states will work together   direction  fulfil  dreams  aspirations There     active cooperation  connection among   states  also between  Centre Chief Ministers   participating states highlighted  achievements  their also showcased available investment opportunities Chaired  fruitful session  Opportunities    Bharatiya function  Gandhinagar today IUCAW will help  investigative machinery   States  cases like Dowry Acid Attack  Human come  with  proposal    Investigative Units  Crimes against Women    districts There   urgent need  strengthen prosecution  trials  courts  deal with  issue  crimes against women Keeping  issue  crimes against women  mind  have written   state  advising them  strengthen  criminal justice system Greetings  Murli Manohar Joshi    birthday  pray   good health  long greetings    your family   occasion   Year  this year brings prosperity  success Extremely pleased  know that   national president Shri Amit Shah  been given  clean chit   special State Governments have been asked  submit their proposals  SMART  with specific location  components  January Taking  idea  SMART policing forward    decided  establish  model SMART Police Station  each Shri  introduced  concept  SMART Police during  Annual Conference  Guwahati last month Birthday greetings   colleague Shri   wish   good health  long dense   Lucknow  shall   able  reach Ranchi  attend  swearing  ceremony Spoke   designate Jharkhand Shri Raghubar  over  phone  conveyed  best wishes believe  daughters have  indomitable spirit  them  they have  potential  participate  building  future  this country neighbouring Pakistan Malala Yousufzai showed exemplary courage  fighting   right Women astronauts like Sunita Williams  Kalpana Chawla have inspired many girls Women today  playing  important role   walks  Even   field  space exploration women  playing  active Education  women  important because when  educate  women   only educate  individual  also  family Addressed  students   Lucknow   occasion   platinum jubilee function Centre  recently announced  additional  lakh compensation     people killed family members  riots victims They have been going through deep pain Shall meet  families  Sikh riots tomorrow  Widow Colony  Tilak Vihar area  West govt will hold  dialogues with these terrorist Only action will There will    result oriented Returned  Delhi after visiting  violence  areas  govt  resolved  launch  coordinated action against  terrorists Greetings     occasion  Christmas  wish  brings good health  prosperity  your Merry Greetings  Shri Atalji   birthday  pray   health  long Leaving  Delhi  Guwahati  take stock   situation  violence affected areas Shri Atalji  always been  source  inspiration    Indian politics Atalji  indeed Madan Mohan Malviya   great educationist  freedom Bharat Ratna     recognition   tremendous Spoke  Assam  Shri Tarun Gogoi  apprised    situation  Kokrajhar Centre will provide  assistance   state Centre  monitoring  situation  Assam   paramilitary forces have been rushed strongly condemn  killing  tribals  Assam  NDFB Killing innocent people   cause  never also congratulate  people   Jharkhand  participating   democratic process  electing their credit  good performance goes   Shri   president Shri Amit Shah millions   party impressive performance  Jharkhand  Jammu Kashmir assembly elections   positive vote   agenda  good Going  Lucknow Shall address  Convocation  King George Medical University Congress member   discussed  range  issues including terrorism cyber Congratulations  scientists   successful space mission  taken  higher trajectory with this Shall campaign  Jammu  Kashmir tomorrow  address three election meetings   Bani heart goes    families  those children   killed   terrorists   express  condolences  those families strongly condemn  terrorist attack   school  This dastardly inhuman attack exposes  real face  terrorism heartfelt tributes  those brave security personnel  laid down their lives   Their sacrifice will never Remembering  supreme sacrifice  those martyrs  gave  their lives while defending Parliament House from  terrorist attack Shall campaign  Jharkhand today  address four election meetings  Bokaro  Dumri assembly Birthday greetings   President  India Shri Pranab Mukherjee  pray   long  healthy Going  Lucknow today  participate   programme organised  Benti Benti  been adopted   under Adarsh Gram today  extend  appreciation    personnel   Indian Navy their  salute their indomitable spirit have asked     responsibility  this case  punish those involved  insulting  uniform   deceased CRPF Spoke   regarding  insult  CRPF uniform  asked   institute  inquiry into this CRPF jawans  Raipur hospital  sustained injuries during Naxal  bullet could  their high morale salute  bravery  CRPF   were killed  Naxal Paid homage  them  Raipur Spoke   Chhattisgarh  Raman Singh      state  asked them  monitor  situation strongly condemn this dastardly Deeply saddened  disturbed  know  CRPF  being killed   Naxals during  ongoing encounter have full confidence   police officers  have  ability courage  deal with every threat  challenges posed Participated  conference  Guwahati  Assam today where  range  issues pertaining  internal security were Shall campaign  Jammu Kashmir tomorrow  address three election meetings  Kupwara  Anantnag providing Tourist Visa  Arrival with  facility   people  countries  government  made Tourism  India  create millions  jobs   countrymen   have tremendous potential  this Launched Visa  enabled   facility  countries today   function also  homage   brave jawans from police security forces  sacrificed their lives while fighting against  Mumbai attackers trial  those responsible  Mumbai attack  progressing very slowly   process should  expedited   priority basis Heartfelt tributes  people  lost their lives  Mumbai terror attack   perpetrators  Mumbai attack     punished Defying threats from militants Naxals  people   Jharkhand have rejected  ideology  terror People want change Happy  learn   huge voter turnout   first round  voting   Jharkhand    positive sign Reached Ranchi this morning  campaign  Jharkhand assembly Shall address meetings  Khunti  Kanke Heartfelt tributes  eminent danseuse Sitara Devi  passed away   graceful performer  popularised Kathak   dance form express  condolences  Shri     give   family  strength  bear this tragic Saddened  know  news  Shri Muril    popular Congress leader  played  active role  national Shall participate  Leadership today   afternoon  address  session  issues pertaining  internal Ladakh could emerge   attractive Tourist   area  developed keeping this vision China  illegally occupied Aksai Chin incursions  Chinese troops   augur well  maintaining cordial relations with  neighbour India wants  maintain good relations with  neighbours   gesture should  reciprocated Congress lost Tibet  China which acted   between both  countries Pakistan handed over Aksai Chin area India lost precious territory  China  Pakistan   wrong policies other hand parties like  Congress believed that Ladakh  nothing more than Article   national issue    there should   extensive debate over state government   implement  Constitutional Amendment despite being  power There  many schemes  projects which could  implemented  Jammu  Kashmir  Article works emerged   frontrunner   ongoing assembly elections  Jammu Addressed  election meeting   Deprived  development  governance people  Ladakh want Going    Ladakh region  Jammu  Shall address  election meeting  Polo Ground this Spoke  Haryana Chief Minister Shri Manohar  Khattar over  phone  apprised    prevailing situation Article    only link  with  rest    shares  deep historical  even spiritual links with Article   national issue there could   extensive debate  this  assembly polls development   issues years   Congress misrule   adverse impact   people  Jammu Addressed  election meeting  Paddar  Jammu Kashmir today  highlighted certain  issues pertaining  people Shall address election meetings  Kishtwar  Bhadrawah districts  Jammu  Kashmir Campaigning   affected areas  Jharkhand since Shall address four public meetings today  Chatra  Palamu high time that  scholars research orgs should  extensive reaserch  work  Nehru Papers should  made available Certain forces wish  create  sense  fear  sections   society  they should work  instil  sense  confidence Nehruji trusted  political wisdom     instrumental  granting Adult have differences over policies    contribution   love   country Therefore when India gained  independence  adopted  path   address  problems facing  country those days Although Pandit Nehru highly appreciated ideas  Socialism  other ideologies   also understood Pandit Nehru will always remembered     builders   introduced  concept  planned economy Inaugurated  commemorative ceremony   birth anniversary  Jawaharlal Nehru  Nehru Memorial today Congratulations  Rohit Sharma  scoring  record breaking double      created history today made  country Congratulations  Indian Hockey team   stunning victory  After winning  Gold Medal  Asiad  team  done  again Going  Shri residence  wish Shri Advaniji  been  source  inspiration       contribution  building  party  never Greetings  Shri Advaniji   birthday  pray   good health  long reviewed  existing cooperation  future possibilities  this discussed  length  regional situation   evolving threats   global community from Growth  bilateral ties   range  including defence  agriculture  been India  Israel share very warm cordial bilateral  look forward  strengthen people  Reached  Aviv last Shall meet  Prime Minister Benjamin Netanyahu today Interpol  shown  nations police forces   knit together  cooperate   furtherance  national security Interpol  contributed   cause  international cooperation  capacity building   enforcement agencies across Addressed  Interpol General Assembly meeting  Monaco  raised many important issues pertaining  security  police suggested  Hean that India could benefit from experience   opened  world class Skill Development Centre discussed  range  issues including active security  police cooperation between both good meeting with Singapore Deputy   Chee Hean   sidelines  General Assembly today Shall address  General Assembly meeting  Monaco later   evening youth   country have great potential   education system needs change   this huge meritorious students  Jaipuria Institute  Management   convocation function congratulate Shri Devendra Phadnavis   election   leader    legislature party  extend  best wishes Shri Devendra Phadnavis  been unanimously elected   Leader    Legislature Party  Maharashtra Going  Maharashtra today where    ready  form  next   legislature party will elect  leader this evening Wishing  Happy  Prosperous Diwali Attended  Police Commemoration  parade   Delhi today  offered tributes  martyrs from police Police Commemoration  today  salute  brave policemen  laid down their lives There should   discrimination against anyone   country   basis  religion creed Karnataka  informed  that  police responded quickly  arrested  those  were involved  attacking   students telephonic conversation with Karnataka  Shri Siddaramaiah regarding assault  three North Eastern students Congratulations  Indian scientists   successful launch  IRNSS  will help  creating indigenous navigation Shri Omar Abdullah Discussed  range  issues including  ongoing relief rehabilitation work States seem   prepared   eventuality arising from  impact  that  expected  bring heavy Spoke    West Bengal  take stock   situation  these states post telephonic conversations with    Odisha  Andhra Pradesh this They briefed  about  situation Malala spirited fight  education  girls  Pakistan  inspired many  South Congratulations also congratulate  Pakistani teenager  Malala Yousufzai  sharing  Nobel Peace Honours with Shri Kailash Shri Kailash Satyarthi   champion  child rights whose work   recognised Congratulations   once Congratulations  Shri Kailash Satyarthi  winning  Nobel Peace  launched  movement against child labour child Shall address three election meetings  region  Maharashtra Maharashtra  ready  this Assured    help from   Centre  monitoring  progression  expected    coast   next Spoke   Chief Ministers  Andhra Pradesh regarding their preparedness  face  fast approaching cyclone Reached Sholapur  Shall address four election meetings Deeply saddened  know  journalist  demise    leading nationalist voice known   alternative Heading towards Haryana  address four election meetings Tigaon only known   combat capabilities  also   active role  humanitarian   times  crisis National Airforce  today  salute  brave airforce personnel  always lead        finest Shall address four election meetings Badshahnagar   Haryana Greetings  people   occasion    brings  society more prosperity Shall campaign  Maharashtra today  address three election meetings  Umarkhed Chimur  Varora Assured Bihar    help from  Centre including  medical help  asked   provide better medial treatment  those telephonic conversation with Bihar  Shri Jitan  Manghi again this morning  apprised    latest Going  Haryana  election campaign Shall address four election meetings Deeply saddened  know that many precious lives have been lost  Patna  condolences   bereaved Hope Indian athletes participating  Incheon will take inspiration  tomorrow    more Gold medals   nation Congratulations  Indian Hockey team  Indian relay team  winning Gold Medals  Asian Games Bharat      event   work   should work together  make India  much cleaner country Participated  Bharat  Lucknow  birth anniversary Remembering Gandhiji  Shashtriji  their birth   take  pledge today  make  country Shall participate  Bharat tomorrow  Charbagh Railway Station   appeal   people  join this assured  Chief Ministers  Assam  Meghalaya that  Centre would give more financial assistance  required Also appealed  political parties  rise above partisan politics  join hands  provide relief  flood affected families   region Surveyed  flood affected areas   North East Centre  giving maximum possible assistance  flood affected Assam also wish  speedy recovery  those injured  train Deeply saddened  know   train collision near Gorakhpur  Uttar  heartfelt condolences   bereaved Going     visit  Lucknow Congratulations  Indian wrestler Shri Yogeshwar Dutt  winning gold medal  Asian   made  country proud with hope that other Indian athletes will take   from  Archery team  give their best performance  Incheon Congratulations  Indian Archery team which defeated  world champions South Koera   another Gold Medal   country Kerala govt  already recommended   probe into  killing  Centre will soon issue notification handing over  probe have  take action  check  political  political parties must come  board  oppose  killing  innocent Violence   place  Freedom  freedom  religious practice  freedom  political activities must family  late Manoj  paid  tributes  others   killed  series  political killings Reached Calicut this afternoon     visit  Heading  Kannur  meet  families  people killed  political Centre  monitoring  flood situation   areas ready  help  flood affected states  facing Spoke  Assam  Shri Tarun Gogoi regarding flood situation   Assured   possible assistance from salute scientists  helped  nation  realise  dream  sending scientists have  capability  develop  cost indegineous technologies which could   model   world  space Congratulations  ISRO scientists  successfully launched into Mars They have scripted history Going  Ranchi  Jharkhand today   security review meeting scheduled later Border Security Force  always played  vital role  safeguarding borders   performance  been outstanding believe that security   first  foremost requirement  Therefore  borders should always  safe Government will leave  stone unturned  safeguard  borders address  important issues related  border with senior officers   during  review meeting They apprised    major issues pertaining  border Shall visit   Headquarters   Delhi Happy  inform  that India today signed  agreement  build biggest hydropower plant  megawatt capacity  River Karnali confident that Nepal will soon return   path  political peace Appreciate  political leaders  Nepal  broadly agree  work  drafting  Constitution  taking  stakeholders into confidence achieve political stability  Nepal  leaders   country should work together  build  consensus  framing meetings with Nepali leaders  stressed upon  need   inclusive  federal Constitution   Himalayan series  meetings with  prominent leaders   major political parties  Nepal   Head   State  Baran would reiterate  need   SAARC nations  implement relevant SAARC agreements  conventions  security related proposed  establish  Centre  Good where officers from member countries  share their experiences India   signatory   Convention   intend  make   laws    conformity with this Convention Another important issue     have promised  people  policy  Tolerance SAARC nations need  strengthen domestic legislation implement Convention  Narcotic Drugs  Psychotropic facing serious problems arising from drug smuggling  States located   like would like  stress that  Government  committed  securing justice   families   victims  deadly terrorist Groups with radical  extremist ideologies  pose threats across national  this volatile security need  carefully assess  impact   entire South Asian Region   withdrawal  foreign forces from Terrorism   major concern  which  driven  regional  international within  across national would like  reiterate that  commitment   giving primacy  improving  relations with   SAARC very first bilateral visits   Shri Modi were    Himalayan with whom  have open borders  enjoy close address  stressed upon commitment   peaceful  prosperous Participated   Sixth Meeting  Ministers  SAARC nations  Kathmandu meeting with  leaders  Nepali Congress  highlighted very  cultural historical ties with Nepal Also  Deputy   Home Minister Shri Bamdev  discussed  issues related  regional security Looking forward   Nepal visit SAARC meeting where important issues pertaining  regional security  prosperity will shows  level  importance   dispensation   Delhi attaches   immediate neighbours  SAARC Shri demonstrated  thinking  inviting leaders   SAARC nations   swearing government   Centre  committed  revive SAARC   major regional forum  promote active collaboration SAARC   important forum where  members seek  promote  welfare   people  South Asia strengthen collective Leaving  Delhi  Kathmandu today  attend  Sixth Meeting  Interior Ministers  SAARC Extended greetings   Prime Minister Shri Narendra Modi over  phone   birthday today  wished   long  healthy lead force  India gives  countrymen  sense  security   salute  sacrifices made commandos gave demonstration  their skills  watching them  action  strengthened  belief  their Visited   Training Centre  Manesar    Shri  Choudhury briefed  about  functioning Shall visit   Training Centre  Manesar  Haryana   lead force with  proven track Reached Gorakhpur   homage  Late Mahant  great contribution  cultural political spheres will always  remembered Shall  visiting  flood affected areas  Jammu  Kashmir along with  DOPT Jitendra Singh Shri Oomen Chandy also assured  that  would convene  meet  discuss  issue  political killings Kerela  informed  that  team  high level officials  rushed   spot  probe into Expressed concern over  murder  social activist Manoj  asked  Kerala   take strict action  stop such political telephonic conversation with Kerala  Shri Oommen Chandy regarding killings  political  social activists following  Prime Minister  Japan Going  Haryana today  address  valedictory function  Sankalp  Hathin  District Shall launch  Dhan   function  Lucknow today offer  condolences   bereaved families  wish  speedy recovery  those   injured Deeply saddened  know   pilgrims death   stampede   temple  Chitrakoot area  Madhya Centre will provide  necessary help  relief  rehabilitation   people living   flood affected areas Spoke  Odisha  Shri Naveen Patanaik over  phone regarding  flood situation   NDRF teams have been despatched Assured  Bihar   every possible help  central assistance  evacuation  relief work carried    state NDRF teams have already been despatched   areas where  Kosi river  pushing  cross  danger telephonic conversation with Bihar  Shri Jitan  Manjhi  apprised    emerging situation   overflow Greetings     occasion   wish  peace  prosperity   country Saluting  supreme sacrifice   soldiers  anniversary  Vijay Heartfelt tributes  Heroes  Kargil Tilak inspired millions  Indian with  call  during freedom  will remain  inspiration  coming heartfelt tributes  Lokmanya  Gangadhar Tilak   birth anniversary    reformer   true Acharya Giriraj Kishore  associated with Janmabhoomi   remained active till  last  offer  tributes Deeply saddened  hear  news  Acharya Giriraj  dedicated  entire life  service congratulate  Finance Minister Shri  presenting  which deserves Budget  also proposed  hike  income  exemption limit from existing  Lakhs    relief  salaried allocating  crores  police modernisation  Budget will help  strengthening existing police infrastructure Budget  allocated  crores  displaced Kashmiri migrants which will help  expediting  process Schemes like will boost  confidence  youth  create massive  opportunities clear move  achieve fiscal consolidation  economic recovery  Union Budget  made many concrete Exhibiting  appetite  change  Union Budget provides  enabling framework  realise  true potential  Indian Union Budget  successfully captured  imagination   people  addressing their hopes Statement  Union Budget Union Budget presented today   Finance Minister Shri good wishes  Shri Amit Shah    confident that   will continue moving forward Congratulations  Shri Amit Shah   elevation      known   organisational  management confident that this Rail Budget will   Indian Railways back   fast track  development Rail Budget sets hygiene  speed  priority areas   Indian Railways which  definitely  positive Rail Budget  remarkable  many ways    full  innovative ideas   Railway Minister Shri Gowda deserves credit Launched  online membership drive    along with Shri Adavaniji    headquarters today Extremely proud  happy over  successful launch  PSLV Congratulations  ISRO scientists  made this launch possible Reached Surajkund  Haryana  address  inaugural session      Orientation  newly elected CRPF  played   role  successfully organising  General Elections   country  should  called Visited  CRPF headquarters  Delhi today  interacted with  officers  jawans  largest paramilitary Heartfelt condolences   families  those  died  Express   give them  strength  bear Heartfelt tributes   founder  Jana  Syama Prasad Mookerjee   today requested  visit  follow  Home Minister account  twitter Governor  Assam Shri Janaki Ballabh Patnaik  with  today  North Block Instructed    update  database  asked  proposal  issuance  National Identity Cards  Indian citizens   earliest meeting with  Governor  Karnataka Shri Hansraj Bhardwaj  North meeting with Governor  Bihar Shri  Patil  North Block progress  CCTNS project will  taken  with   states   currently lagging behind  implementing progress  Crime  Criminal Network Tracking Systems project  also reviewed today   meeting  North assures full cooperation  assistance   agencies involved   process  reconstruction Asked  agencies concerned with disaster management  take effective precautionary measures  prevent such disasters Reviewed  rehabilitation  reconstruction efforts being carried   help  Uttarakhand disaster Last year  Uttarakhand     unprecedented natural  offer  tributes  those  died  that concerned over  prevailing  situation  Uttar   closely monitoring  situation tributes   deceased Delhi Traffic police constable Shri Mana   died while discharging   salute Morale   police force should  strengthened   should  made more accountable  better meeting with Delhi Police officers  Emphasised over  need  Responsive  policing women Going  Delhi Police Headquarters   meeting with Police Police modernisation  crucial  make  police forces more efficient    will take positive steps  this Also instructed  officials  take Kashmiri migrants into confidence  work  steps   taken  their safe return   valley meeting with Affairs Dept  Asked them  further strengthen  measures taken  curb infiltration from across  border Spoke  Lieutenant Governor  Delhi Shri Najeeb Jung regarding  early resolution   current power meeting today with  Chief Minister Shri have instructed  authorities  despatch  rescue team  immediate action  save precious lives trapped deeply pained over  tragic incident  engineering students getting drowned   flash flood  Himachal Today  lost  brave policemen during police action against KPLT  Karbi Anglong region   salute them  their Meeting with Army Chief General Bikram Rana Safvi   have already spoken   minister  water resources  regarding Gomti rejuvenation Chief Minister  Himachal Pradesh Shri   today    office Meeting with Chief  Naval Admiral meeting today with  Chief Marshal Arup Raha  North Block There   clear  present danger  facing  world  need improved management   forests World Environment  today  need  remind ourselves that  must have  firm resolve  protect  fragile Going  Parli  Beed  attend  funeral  Late Gopinath Munde     last respects   departed meeting with Governor  Uttar Pradesh Shri Deeply shocked  know  Shri Gopinath    grassroots leader  known   concern  poor people Congratulations  Shri Chandrashekhar   taking oath   first Chief Minister   Telangana  good wishes meeting today with  Leader Shri Chandrababu Naidu Meeting with Jammu  Kashmir Shri Paid tributes  Sardar  first Home Minister  India before officially assuming charge   North Many tributes  Veer Savarkar   birth      most courageous freedom fighters   Shat Shat Home Secretary today briefed   certain important issues pertaining    have asked   prepare  detailed grateful      your support  good   work together  realise  dream  Shreshtha will bear true faith  allegiance   Constitution  India    established  uphold  sovereignty  integrity heartfelt condolences   members   bereaved  wish  speedy recovery  those   injured   train Deeply saddened  know   Gorakhdham Express tragedy  which many precious lives have been lost  several others have been meeting with MDMK leader Thiru Vaiko   residence this Happy  know that  staff members  others working   consulate  again kudos   security Hats    brave ITBP jawans  officers  have successfully defended consulate  Herat Shall attend  ceremony  Anandiben Patel   Chief Minister Gujarat will today   first woman Chief Minister Anandiben Patel will   fourth woman Shri Pawan Kumar Chamling  sworn   Sikkim Chief Minister today   fifth Congratulations  good wishes Congratulations  Shri Naveen Patnaik  becoming  Odisha Chief Minister   fourth  extend  good wishes  Nabeen Congratulations    Chief Minister  Bihar Shri Jitan   good wishes meeting with  leader Shri  Chandrababu Naidu   residence  short while have also invited   allies   Central Hall   partners played  crucial role  registering  decisive Parliamentary party will meet tomorrow   Central Hall  Parliament House  formally elect Shri telephonic conversation this morning with President Shri  Baran Yadav   Prime Minister Shri Sushil Kumar This  reflects  mood Landed  Going straight   UPBJP office  meet party Shri blessings after historic   General  leaving Delhi   constituency heading towards Shri residence victory  General Elections   interpreted  Mandate After addressing press conference   Central office   going  meet  colleague Shri Congratulated Shri over  phone  superb performance    Sabha Trends indicate Nagaland  Shri Neiphiu   conveyed this message through  letter    thankful     NERPF support Regional Political Front  decided  pledge  support     forming  stable government world today needs  take   from  life  Lord Buddha   teachings  bring stability   better Good wishes     occasion  Bhagwan message  still very relevant   modern unprecedented large turnout  voters   Sabha polls   positive  healthy sign   indicates upcoming change Voting   Sabha  come     thankful   voters  India  voted  large Congratulations   Election Commission  successfully conducting General Elections  ensuring increased voter Tarakantji served  people    Vidhan Parishad worked towards  death   irreparable loss  Bihar Deeply saddened  hear  news  senior Bihar  leader Shri Tarakant  played  crucial role  expanding  party used  walk  foot from  village   school which  nearly  from Glad  visit  school after  long Addressed  election meeting  Aditya Narain Inter College  Chakia   been  student  this Reached Azamgarh this Shall address election meetings  Ghazipur coming  power   Centre  priority would      National Mission  Himalayas  sustainable development Shall campaign  Himachal Pradesh today  address election meetings  Kinnaur  Nahan Reached Shall address five election meetings Saran   Bihar strongly condemn  blasts  Chennai Central railway Strict action should  taken against  perpetrators  such Shall address  election meetings Allahabad   Uttar Pradesh Went   polling station  Lucknow  exercised  right  Come   your homes Today   seventh phase   ongoing  Sabha  urge  voters     vote  large Grateful   people  Lucknow  overwhelming response  Janasampark Truly touched  your love Saddened  hear  news  Shri Mulyam Singh brother Shri Ratan  heartfelt condolences   bereaved Started Janasampark today from UPBJP office  Will reach   people   constituency through this Sharing  picture  beautiful Cathedral situated  Hazaratganj Visited  famous Cathedral Church situated  Lucknow this morning   with  Christian religious meeting with former  Chief Minister Shri  Tiwari  Lucknow  gave   blessings good Shall address election meetings  Mohanlal Ganj  Lucknow  Uttar Pradesh also stands  victory    confident about Shri Narendra Bhai landslide victory from both Modiji contesting elections from Varanasi  Vadodara  both  cities have  capital Heartiest congratulations   best wishes  Shri  filing  nomination papers from Campaigning  Bihar Shall address election meetings  Bhaglpur Shall address three election meetings Dina Nagar   Punjab announced Shri Narendra Modi   prime ministerial   Congress remains like  ship without Lankan should create conditions conducive  resumption  dialogue    will work towards this goal after coming provision  devolution  power   political settlements  crucial   bilateral relations between  Lanka Until Tamil Nadu  freed from  clutches       people   state will continue  suffer There   room  good governance  development  Tamil Nadu because     AIADMK believe  political Reached Trichy  Tamil Shall address three election meetings  Tamil Nadu Shivganga Shall address election meetings  Balurghat  Raigunj  West Bengal Karyakartas  Chandauli     highway  requested   visit  local election technical snag    leave  chopper  Buxar   heading towards Varanasi   home district concerned over  plight  refugees   coming  power  will formulate  National Refugee  Rehabilitation Policy Addressed  election meeting  People  want development  feel betrayed   governments   centre   state diluting  authority   post  Congress leadership enjoyed power without responsibility   long revelations made   recently published books clearly indicate that  Congress diluted  authority   Prime Babasaheb worked   life   welfare     also committed  empower  poor  marginal sections Greetings  people  teachings  Bhagwan Mahavir show  path  peace Wishing    happy Baisakhi  celebrated   people specially  farmers   festival   beginning democracy solution  problems lies   power  ballot    power   heartfelt condolences   bereaved families Deeply saddened   news  Naxalites killing people  Chhattisgarh including poll party officials  security Birthday greetings  senior  leader Shri Lalji Prayed   long life  good Reached Lucknow   three  visit this During  stay  shall meet many delegations from Shall address election meeting  Ajmer  Bikaner  Rajasthan Later    shall address  meeting  Moradabad Heading  Jharkhand  election campaign   candidates contesting from Dhanbad  Sabha coming  power   will    National Price Stabilization Fund bring changes  procurement policy  contain Congress  been  power    years  Every time they come  there  been unprecedented price Raised  issue  price rise  apathy towards  poor while campaigning today  Bellary  Bangalore Going  Karnataka today  election Shall address public meetings  Bellary  Bangalore later Greetings    this auspicious Heading towards Madhya Pradesh  address election meetings today  Satna Election Manifesto   polls  successfully outlined  roadmap  comprehensive integrated committed  implement  programmes mentioned   manifesto     merely  also Congratulations  Murli Manohar Joshi   team  coming  with  remarkable  Election Manifesto   Sabha polls today  congratulate    Karyakartas  have dedicated themselves  serving  nation Filed  nomination papers from Lucknow Urged  cadre  seek vote support  people from  communities Shall leave  Lucknow this Before leaving  Lucknow  will take  blessings  Shri Atalji   residence Shall address election meetings  parliamentary constituencies  Ambala  Karnal  Haryana Heading towards Bihar  campaign    other  Shall address election meetings  Aurangabad Shall address election meetings  Latehar  Hazaribagh  Jharkhand Greetings    this auspicious first   Vasant Shall address election meetings  Karbi Anglong  Tinsukia  Assam tomorrow shall file  nomination papers from Lucknow constituency  April Addressed  gathering  Karyakartas  Lucknow appealed  them  work towards  mission  accomplish plus meetings with several delegations from different walks  life today   residence  Lucknow Pollution  Gomti  reached  alarming  coming  power   government will work  reduce pollution Supreme Court today blamed   govt  negligence during Muzaffarnagar   state govt failed Reached Lucknow today   afternoon   heading towards  party office situated  Vidhan Sabha Shall reach Lucknow tomorrow   three  visit   parliamentary people  India will never forget  supreme sacrifice  national heroes like Bhagat Rajguru Shat Shat Heartfelt tributes  Bhagat Sukhdev  Rajguru  laid down their lives fighting  freedom  March General Secretary  World Brahmin Federation Shri  Goswami joined   welcome  into  party Noted journalist Shri  Akbar joined    welcome  into Senior Congress leader from Uttarakhand Shri Satpal Maharaj joined    welcome  into  party with Puducherry Chief Minister Shri  Rangaswamy  Chennai today  decided  join   welcome  into Kongunadu parties joined   today   presence   express  happiness  this historic deeply saddened  hear  news  noted author  columnist Shri Khushwant thankful   party  giving  opportunity  contest elections from  city  rich heritage Senior  leader Shri  Kripal Yadav former minister Shri Hemlal Murmu joined    welcome them into  party want    Congress what happened   Thakkar commission which  constituted  probe into Indira Congress party should   facts right because  Kapoor Commission  already cleared     such Congress party  repeatedly levelled baseless charges against   blaming    Mahatma Sharing Gorkha Janamukti president Shri Bimal status message with   thankful Gorkha Janamukthi Morcha president Shri Bimal Gurung  decided  support    coming  Sabha  welcome Former  president Shri Chandra Mohan Potwary  Shri Hiten Goswami joined   this  welcome them first political party   country  give reservation  women world celebrates today   reiterates  commitment  women Former Union Minister Purandeswari joined    welcome  into  party Paid tributes  Bangaruji    Delhi  highlighted  role  strengthening Being  responsible political party   does  believe  anarchy strongly condemn  violent protest   gates   office today   shows undemocratic  anarchist Shall address Sabha tomorrow  Kanker  Durg withdrawn their support  people  India would have been free from  corrupt Congress   regime Samajwadi Party    oppose  Congress  Uttar Pradesh  they supported   government Addressed Shankhnaad  Lucknow  Uttar Pradesh today  raised  issue  worsening   order situation Bangaruji dedicated  life serving  weaker sections    heartfelt condolences   bereaved believe that  grand  should  constructed   Delhi  memory   soldiers  sacrificed their believes that Welfare should  constituted   welfare   armed Modernisation upgradation   armed forces should   compromised   need  develop  defence equipment defence  security system  been neglected   current dispensation  many Many holes  visible Former Army Chief General  Singh along with several other officers joined    welcome them into  party Addressed  gathering  today through video conferencing facility after launching  OFBJP Hong Kong always pursued  path  social harmony  positive  Congress should apologise   nation Congress party  government have destroyed  communal  social harmony opposed  ordinance route  this point  time  will register  protest with  President Issuing  ordinance  something which should  done  exceptional cases  between  sessions Congress party   woken  from  slumber  advocating  anti graft ordinance when  country  getting ready government  been responsible  rampant corruption  scams worth more than  lakh crores took place during always worked  maintain social  communal harmony    believe Addressed  party workers conclave  Chikballapur  Karanataka  galvanise  cadre before Released  book titled  Idea Behind    function   Impressive work   youngsters leader Shri Chandrashekhar  today   thankful  unflinching support Former  Chief Shri Sanjeev Kumar Tripathi joined    welcome    party Those  accepted division  religious lines should  called communal   believe  justice   appeasement There  misconception about     large section  Muslims   false propaganda unleashed  certain political Addressed  gathering  minorities   Delhi today    building  nation   mission dedicated   uplift  poor  other weaker sections     uplift   marginal Unlike other political parties     only party which believes  social    practice Founder  Indian Justice Party   leading voice from Dalit community Shri Udit  joined    welcome  into Prime Minister assured  that  would look into  issue  resolve their telephoned  Prime Minister  draw  attention   problems facing   volunteers  sought  immediate volunteers from apprised   their work conditions  their demands  better   secure representatives   National Youth Corps Association  were  hunger strike since   Jantar govt should give incentives  corporate sector  they invest  sports   part     Sports India  tremendous potential  become  India   young  energetic country  lacks basic infra Addressed organised    Sports Cell today  Ramlila Maidan meeting with  Chinese delegation   Vice Minister International Department  Ping today   Central government should come  with certain concrete measures  address  concerns  Seemandhra  other regions  Andhra manner  which  bill  pushed through   government   transparent  utterly Congress should  squarely blamed  this confusion  chaos  Andhra government brought this bill much  prevailing situation  chaos  outrage   could have been happy that  Bill  grant statehood  Telangana  finally been passed today coming  power  will address    issues facing  economy today   India   higher growth Interim Budget provides only  increased amount  agriculture lending   interest rates have been kept real announcements have been made   benefit  ailing agriculture Government spelled   National Manufacturing Policy   there  been little follow  action  subsequent When  govt realised that    committed  give   benefits  Rank   finally caved announcement  Rank      welcome government dragged  feet  years   issue government  been able  match  fiscal targets only  drastically cutting  planned Shri Chidambaram juggled  numbers  come  with  fiscal deficit  percent      year presented   finance minister Shri  Chidambaram today   failed attempt govt should reduce  dependency  imports  strengthen  national  coming  power   would work towards this goal India  send today   outer space then   develop indigenous defence equipments   armed Addressed   Sujanpur today  raised  issues pertaining  external  internal security Heading towards Ghaziabad   tributes  former Mayor   city Late Damyanti  Goyal   terahvin Birthday greetings  Leader  Opposition   Sabha    bless  with good health  long active Welcomed   Sabha  from Gurgaon  Indrajeet Singh  former  officer Shri  Singh into Shall address  function organized  Bachao  FICCI auditorium Join  live Addressed  massive Sankalp  Bhubaneshwar  state  Odisha  rich  minerals appeal    elected representatives thank Shall address Sankalp today  Bhubaneshwar   Join  live appeal    elected representatives     donate their  salary observes Deendayal Upadhyay punyatithi    donated   month salary Youtube  watch  videos   speeches Shall visit Jaipur tomorrow  inaugurate  training camp   MLAs meeting with  delegation    leader Shri  Chandrashekhar    residence meeting with  leader Shri Chandrababu Naidu today    discussed prevailing situation Welcomed Shri Bappi Lahiri  several others from  television  cinema industry into  party fold after they joined meeting with MDMK leader Shri Vaiko    fruitful discussion   General Heartfelt tributes  Mahatma Gandhi    idea    only   ensure inclusive growth Full text   speech  Idea  Good Click   link  read Shall address  students  Delhi University today   seminar  Idea  Good organised    Faculty Share your photo  video   volunteer platform  join movement  create  India Launched nationwide initiative Sapno  today from  party Wishing Republic     this auspicious   must resolve  uphold  dignity  sanctity Voters today  appeal  people  register themselves  Every single vote counts people want  know    Netaji died  under what  mystery behind  death should  unveiled Netaji     greatest heroes   history  freedom struggle   death  still shrouded Visited Netaji Subhash Chandra birthplace  Odia Bazar  Cuttack today    tributes mentioned this   previous Going  Patna today  participate   function organised  memory  former   Karpoori Nageshwar contribution  Indian cinema will always  Heartfelt tributes    condolences   bereaved Saddened  hear  news  legendary actor Shri Nageshwar karyakartas will take  message forward with  firm resolve  work tirelessly towards  goal  plus   Sabha National Council meeting concluded today with  inspiring speech from Shri  blessings from Shri Shall address  delegates   National Council  Ramleela Maidan   short while from Join  live Heartiest greetings   Army personnel   occasion  Army   Indian Army   embodiment  sacrifice selfless service yourself    Join   lead  change youth wing launched Ambassador through which   reach   universities  more than Heartfelt tributes  Swami Vivekanand     real  continues  inspire  with birth anniversary celebrations  Swami Vivekananda come   close  Sunday Birthday greetings  senior party leaders Murli Manohar Joshi  Shri Kalyan  pray  their good health  long anything about  national security which indicates lack  concern  seriousness   government over these tried  belittle  achievements    government without taking  ground reality into  exposed  govt failures unfortunate  condemnable that  spite  getting clean chit from  court   Modiji  been targeted unfortunate  highly condemnable that  spite  getting clean chit from  court Birthday greetings  senior  leader Shri Jaswant Singh  turned  pray   long  healthy Wishing  very happy  prosperous Addressed Sankalp  Ranchi People thronged  venue  large Nahi Raila Wishing  colleague  Leader  Opposition  Rajya Sabha Shri  happy   enjoy  long  healthy Congratulated Shri over  telephone after  court gave  clean chit welcome  Ahmedabad verdict today which  given clean chit  Shri Narendra This verdict decision  institute  fresh Commission  Inquiry into  alleged snooping case   attempt Wishing  beloved leader  former Prime Minister Shri Atal Bihari Vajpayee  very happy  pray   long  healthy Remembering Jesus message  serving  poor  oppressed  Merry Christmas Heartfelt tributes  freedom fighters  Prasad Roshan  Ashfaqulla Khan  were executed    British contribution  Leaders  Opposition Sushmaji  Jaitleyji deserves special mention  their role  getting Lokpal Bill also happy that Shri Anna Hazare  ended  fast after    historic   Parliamentary smooth passage   Lokpal Bill  both  houses   remarkable Congratulations   members smooth passage   Lokpal Bill  both  houses   remarkable Congratulations condemn  high handedness    authorities  misbehaved with  Indian  Govt should take strong exception with Chhattisgarh   Rajasthan  today   residence Mahesh  thanks   feedback Salute   brave soldiers  laid down their lives defending  country  fighting  peace  stability   South Asian December Indian army   historic  against  oppressive Pakistan regime  Bangladesh  liberated from Addressed Shankhnaad  Dehradun Massive crowd converged   historic parade Joined   race with party colleagues Join   Ashok Road   Delhi today where  shall flag Wishing  Chief Minister Shri Manohar Parrikar  very happy    blessed with  healthy  long Remembering  sacrifice   people  died while defending Parliament House from Salute  those martyrs their Shall  visiting Jaipur tomorrow  attend  swearing  ceremony Attended  swearing  ceremony   today   hope would continue  forward march under Came  know about  demise  Shri Dattatreya mother Amma earlier  condolences   bereaved Wishing  President  Shri Pranab Mukherjee   birthday  wish  long  healthy impressive performance  Madhya Pradesh  today gives  clear thumbs    commitment towards good results  assembly polls clearly indicate that  people have rejected  model Shall address  press conference   party headquarters   short while from Spoke  Shri   congratulated them  spectacular victory  Madhya Pradesh Communal Violence Bill will create  deep division    draft bill  highly divisive  against social Remembering  Ambedkar     were alive today  would have opposed  bill designed  communal greatest leaders   modern world  inspired people around  world with  Heartfelt tributes Mandela believed  Gandhian methods  philosophy  became  iconic figure  gave    freedom  ensure freedom   people Came  know about Nelson demise this    inspiring hero  fought against discrimination  injustice  people family  sugar cane farmer  Lakhimpur today   forced  commit suicide   heavy Shall visit Lakhimpur Khiri tomorrow  meet  family   sugar cane farmer  recently committed suicide   heavy already wrote  letter   prime minister giving   detailed account  facts pertaining  this have written  letter    drawing  immediate attention towards this boundary fencing  border  Manipur ongoing boundary fencing work seems   neglecting  national  strategic interest   surrender   land ongoing border fencing work  creating resentment  Manipur   leaves huge tract  land  Myanmar side which  been Certain facts pertaining   ongoing border fencing work along side Myanmar  Manipur were brought   notice   state Also drew  attention over dire consequences    which could  finalized  Bali next Wrote  letter   today  highlight  plight  cane farmers  Maharashtra  Demanded intervention from Sharing  picture from with Shri Shall address  Jammu   short while from Join  live Reached  venue   Jammu with Shri Impressed   this massive appeal   people  Rajasthan  give  third majority      ongoing assembly believes  social  economic empowerment   youth  this track record  employment   youth   want   right   gainful Addressing  press conference  Join  live Five years after  much  India continues    soft target  terrorists   bleeds through  thousand Prime Minister should explain   people  this country what concrete steps  government  taken  this direction since govt  failed miserably  putting  diplomatic pressure  Pakistan   decisively against  forces Heartfelt tributes  people  died  Mumbai terrorist attack five years  real perpetrators  still roaming free Heartfelt tributes  people  died   Mumbai terrorist attack five years  mastermind Remembering  supreme sacrifice  Navam Sikh Guru  Bahadur     sacrifice inspires  people  this candidate  Delhi Harshvardhan     clear firm conviction  clean According    study  mega cities around  Indian cities like Delhi  Mumbai  neither lovable Campaigned    candidates contesting  Mizoram assembly elections today  Vairengte Addressed Shankhnaad organized    state  unit today Joined today    State office  Jaipur  Rajasthan Manifesto release communal riot   Congress called    they forgot there were many riots  Gujarat when they were Congress follows    wants  instil  sense  confidence among  minorities   sense also congratulate     received    contribution  Scientists like  make Tendulkar will always  remembered  taking cricket  glorious Legends like  never retire  they live   hearts Congratulations  legendary cricketer Sachin Tendulkar  getting  award   contribution  Indian more baseless allegations  Congress party levels         will emerge stronger than anticipated that during  elections many baseless charges would  levelled against    people would give  befitting dirty tricks   Congress  become highly    attempt  tarnish contribution  enrich literature  policies will always   extend  heartfelt condolence   bereaved Maulana birth anniversary should  celebrated   peace loving people  believe   idea  united Maulana Azad   great  true nationalist   visionary  could foresee  consequences Kashmir issue  internal matter   should  resolved through  home grown allowing  Sartaj Aziz  hold talks with  separatists  Indian soil   govt  committed another diplomatic Aziz  given this opportunity when Pakistan  committing acts  aggression   state  Jammu Shocked   that   govt  allowed Pakistan advisor Sartaj Aziz  hold talks with Kashmiri separatist leaders Sharing  video   speech delivered today  Bahraich Before leaving  Bahraich   with Shri Advaniji   birthday  extended  good    guide  source Addressing Shankhnaad  Nanpara Road  Bahraich Join  live Reached Raipur today  launch  poll campaign  Shall address election meetings Reached Raipur today  launch  poll campaign Reached Raipur today  launch  poll campaign  Shall address election meetings best wishes   ISRO scientists  successful launch  scientists   nation make  proud meeting with Nagaland Chief Minister Shri Neiphiu  today   residence condemn  dastardly   terror  Patna   should  quick  action against should maintain express  condolences  those  lost their lives injured  Patna urge  provide immediate compensations Addressing  Gandhi Maidan  Join  live Addressing  rally   ground  Join  live Manna  gave  voice  some   best compositions  Hindi films  death  left   void  Indian Deeply saddened  hear  news  singer Manna  contribution   music  movie industry will always detailed discussion with French Ambassador Francois Richier  wide range Shall address  rally   Join  live Reached Murthal  Sonipat today  address organized   state Reached Chakeri airport  Shall address   rally along with Shri Join interactive session with  Entrepreneur  Clear policy decisive action  needed Demanded   inquiry into  Muzaffarnagar riots after meeting with people living   riot affected with people living  Malikpura village  riot affected areas  Muzaffarnagar meeting today with  delegation   Congress Party    president philosophy  holds    equitable  inclusive integrity  conduct should   guiding principles  address  crisis  credibility India   current account surplus nation during   regime  turned into  current account deficit There   urgent need  revamp  existing economic   will bring  vision document Shared  views  today with  leading voices  business community  Kolkata Shall reach Chennai tonight  hold meetings tomorrow with  members   core groups  Tamil Nadu  other neighbouring Attended  massive with Modi  other party leaders today  Trichy  Tamil Going  Trichirappalli today  address Kamal organised   state hurry  start dialogue with There should   talks with Pakistan unless there   conducive strongly condemn  terrorist attack   police  security forces   terrorists have attacked India almost Sharing  video   speech today    Bhopal Going  Bhopal today  address organised Deen Dayal philosophy   become more relevant   tributes Pandit Deen Dayal birth anniversary  believed  uplifting  poor  other weaker sections Reached Chandigarh     Shall hold meetings with  members  core groups operating  Punjab  other neighbouring states high time   peace loving people around  world  unite against  growing menace strongly condemn  terrorist attack  Nairobi    brutal  against Shall lead  delegation   leaders from Uttar Pradesh   Rashtrapati Bhawan tomorrow Centre should raise this issue with   authorities  find   real motive behind this Yoga guru Baba detention   London airport without giving  clear reason    authorities  very Going  Guwahati     visit  meet with  members     units   North Launched  Delhi election campaign today  upcoming assembly polls  Talkatora stadium Going  Ghaziabad  flag  Daud Desh  where hundreds  school children  likely  participate interactive session with young entrepreneurs  They were concerned over  present state  economy  wanted Reached Heading towards Bombay Bullion Association office  Chira Marine Leaving  Mumbai today  felicitate Hindi songwriter Prasoon Joshi with Gyaneshwar high time   Centre  intervene  Uttar Pradesh  dismiss  incumbent state Today  celebrate  memory  great educationist  former president   offer  tributes Shall inaugurate   Minority Morcha National Executive meeting today   party office Sharing  text  video   speech delivered today   Sabha   Land Acquisition Bill Going  Pilakhuwa today  inaugurate  sporting event organised   local educational Sharing  video   speech delivered today    Teachers Cell National Executive meeting   Delhi Addressed  National Executive Meeting  Teachers earlier today Celebrated today with school children  visited  residence Going  Sangrur today  attend  function organised  memory  Sant meeting with Leader    Ranil Wickramasinghe today Going  Jashpur today  attend  funeral  Late Dilip Singh Shri Judeo  very popular among  poor  tribal people   heartfelt condolences   bereaved deeply saddened   news  Shri Dilip Singh sudden  death  left   void  Chhattisgarh state snapshot  rally held yesterday   Lila Maidan Sharing  video   speech delivered yesterday   Lila Maidan delegation  Kishtwar   effort  take stock   situation  help  building peace  harmony Detaining Shri Arun Jaitley   Jammu airport  government  highly  seems   trying  hide Reached Ramlila Maidan where  Delhi  unit  organised Andolan Shall address  gathering around Addressed  large gathering   farmers today  Vijay Diwas held  Gautam assured  that  situation would  quickly brought under control   army  been called telephonic conversation with   Manmohan Singh regarding outbreak  violent clashes  Kishtwar district  Jammu Sharing  video   speech   inaugural function   first ever Medical college   North Zone extend  best wishes   people  India  This festival   symbol    solidarity among meeting with  Nepali Congress Party President Shri Sushil Koirala earlier today Centre should also constitute  Second States Reorganisation Commission  consider demands  separate states decision  create Telangana   welcome    always been favour  Telengana Shall deliver  keynote address   Afghanistan  Regional today   conference  Washington against learning  expressing  English Watch  speech before  draw Reached  York Came  know about  controversy over  speech  English  have been quoted Shall  visiting Washington Sharing  speech  ASSOCHAM Summit held today Addressed  business community today   ASSOCHAM Summit   Delhi Sharing  speech   English Watch  till   before  form Shall address  Indian business community tomorrow   ASSOCHAM Summit  Manifesto  Vigyan Bhawan grateful   those people  extended their good wishes After visiting Mahabodhi temple  shall  heading  Patna where former Deputy  Bihar  leader Shri Sushil Modi  staging Shall  visiting Mahabodhi temple  Gaya tomorrow along with  Leader  Opposition Rajya Shri Arun Mookerjee   first martyr  Independent India  sacrificed  life   cause  national offer  heartfelt tributes  Bharatiya Janasangh founder Syama Prasad Mookerjee   birth anniversary posted photos  Facebook   album from  Kisan Morcha   Meet chance  drive  tractor today Went   spin with some   party Shall inaugurate   Kisan Morcha National Executive meeting today  Gurgaon Addressed  public meeting  Guwahati   afternoon  enthusiastic audience Going  Assam tomorrow     Shall reach Guwahati picture from Bunkar held yesterday  Constitution Club Sharing  video   speech   opening session   Mahila Morcha   Meet Shall address Bunkar tomorrow leadership  India should  vested  strong   leading  country should Going  Shall address  opening session   Mahila Morcha National Executive meeting today appeals  party karyakartas   politicise Uttarakhand Even    instigated  others stay calm There   flagging    simply dispatched  trucks Contrary  certain media reports there   flagging    relief  simply dispatched   flood affected people also directed  state units   flag  relief material   hurts  human today dispatched truckload  relief material    cash  symbolic gesture from Lucknow Landed  Going straight   State Shall reach Lucknow tomorrow strongly condemn  terrorist attack  Srinagar  which security personnel died  many more While addressing  media  Patna today  said that  Congress   allies were suffering from these Paid tributes  Hindi poet Sant Kabir   today   function organized Contact  Central Office  Help Line  further assistance also donate   Janata Aapda Rahat  help  victims appeals   party workers  general  actively provide every possible help   people affected have decided today that    representatives will donate their month salary  flood relief Jaipur today  preside over  seminar  Facing Minorities Going  Uttarakhand today  take stock   situation  flood affected areas have made  appeal    cadre  provide immediate help  assistance  people affected   massive floods Uttarakhand Himachal Pradesh  currently facing  national  urge  Centre  State governments  provide immediate relief with Shri Uddhav Thackeray  conveyed  good wishes    Shiv foundation wonderful time  Thank  Shekhar   having   this Finally reached Shall address session inclement weather  flight  been diverted  Waiting   weather  improve Going  Mumbai today  conversation with appeal    workers  Uttarakhand  provide every possible help  relief  flood affected Keeping  mind  loss  life  property  Uttarakhand  have directed  State  unit  suspend  Bharo Uttarakhand facing   crisis   heavy rains  many areas   state  over people  feared dead  many more washed with  former  Secretary  Medeleine Albright today   residence Sharing  video   speech   Youth Convention  Delhi posted photos  Facebook   album Youth Convention Talkatora deep condolences   family  Late  Raman  passed away     leading expert believe  moderate  stable Iran   This change could bring peace   Gulf region   rest seems  Hassan Rohani   ability  unlock true potential with  strong belief  deliberation Congratulations  President elect Hassan Rohani   remarkable  hope moderate voices will Going  Gohana  Sonepat  address  public meeting organised   birth anniversary  late  leader Kishan will never want  break     alliance with    more than years Sharing  video   speech   BJYM National Exceutive Meet held today   Delhi with former Nepal Prime Minister Shri Sher Bahadur Deuba today   evening   residence good that   deferred  ordinance  food  want  detailed discussion over  Bill Inaugurated  BJYM National Executive Meeting   Delhi Guru Arjun  teachings  based   basic principles  humanity  religious Sharing  video   address  media today   statement issued condolences   bereaved family  veteran Congress leader Vidya Charan Shukla   succumbed  injuries sustained  Naxal have  accepted Shri Advani Shall attend   party meeting  Naxal problem   today   forward  views   party  growing menace  Naxalism Sharing  video   concluding remarks    National Executive Meet Addressed booth level karyakartas    short while have appointed Shri Narendra Modi   Chairman   Election Campaign Shri Advani     unwell  will attend  National Executive meeting Landed   Chief Minister Shri Manohar Parrikar    heading towards  venue Will reach  tomorrow   afternoon    National Executive meeting scheduled  June Will   Fatehpur Chitra village  Amroha tomorrow  unveil  statue   late leader Mahendra Singh Will begin  speech Join  live from Nizam College Ground  Hyderabad  Andhra committed  create  separate state  Telengana   will definitely   after coming  power ready  have  discussion over Food Security Bill  Land Acquisition  govt should advance  Monsoon Going  Hyderabad today  address  public meeting  Nizam College Mahendra death    Expressing solidarity  this crucial hour  more important than political parties should unite  fight against Issues  national importance should government should come  with  comprehensive action plan against growing Naxal menace family members  deceased Congress leader Shri Mahendra Karma  Dantewada meeting today with British delegation   Cabinet Minister  Oliver Naxalism    simple   order    problem pertaining  internal security probe into  Naxal attack  Chhattisgarh should  conducted   Special Investigation Team monitored   Supreme posted photos  Facebook   album  Gorakhpur Visit good wishes  former  President Shri Nitin Gadkari    wish  long life will   Chhattisgarh Keeping  mind  sensibilities   people post Naxal attack     called   nationwide Bharo Going  Medanta hospital  Gurgaon   senior Congress leader Shri Vidya Charan Shukla   critically injured have cancelled  Lucknow visit scheduled    mourn  unfortunate tragedy   condolences  bereaved families Called  Raman Singh    details   naxal  should rise above partisan politics  fight menace  Naxalism condemn  barbaric attack   Congress rally   democracy there   place   kind Deeply grieved   news  Shri Baleshwar death   great loss  public  condolence   bereaved family will meet  relatives  Late Satish Kumar   brutally murdered today along with  other family members Government  made  people  India suffer from  gross rampant corruption  dysfunctional Meeting with Gujarat Chief Minister Shri today after  fruitful meeting   Parliamentary board will preside over  meeting   Parliamentary Board scheduled  meet  Ashoka Road   Delhi   short while from addressed  press conference today   Central office   Delhi with Leader  Opposition  Rajya Bharatiya Janata Party rejects  charges against Shri Gulab Chand  Party fully stands Keeping  view  past experiences with  views  statements with cautious  hope   able  walk democratic transition  government  Pakistan   welcome  congratulates  Nawaj Sharif   electoral Addressing press conference earlier      Central Office   Delhi Video  Press Conference  Ashok Road   Delhi believes that Shri Ashwani Kumar  Shri Pawan Bansal have been made scapegoats  divert Congress party  hold  Railway ministry after  hiatus  nearly years   first thing night  Union facing charges  corruption  resigned from their meeting with   Deputy Secretary  State William Burns  Ashok  Delhi meeting with Foreign Minister Erkki Tuomioja short while     Central Minister have lost credibility  moral right  continue Visiting Uttar Pradesh  foundation   hospital  Khurja Address Memorandum submitted   President  India Going  Rashtrapati Bhawan with leaders    submit  memorandum  Chinese incursion  Ladakh Indian high commissioner  Pakistan should  called back  diplomatic relations should  scaled down   time Byte   issue  Sarabjit Singh death Going  Bareilly  address Swabhiman today   afternoon says that Congress will provide  corruption free govt  Ktka whereas  himself presides over  most corrupt govt Speech  Mahila Morcha function organised today  Ashok Unveiling  statue  Vijaya Raje Scindia today  party headquarters   Delhi Addressing  election meeting  April  Chikodi  North Karnataka Interview with Rajya Sabha Central  Delhi governments have failed  curb cases  rapes   national capital interactive session with journalists yesterday </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>