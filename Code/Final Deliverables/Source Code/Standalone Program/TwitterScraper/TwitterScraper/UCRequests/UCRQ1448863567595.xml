<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">biggies releasing  January Which have  liked stays strong  Witnesses   India Happy birthday Wishing  happiness  Have  super year previews till      India Directed   film director  stars Sonam Kapoor   role  Neerja  Shabana Azmi biopic   life  Neerja  release   Produced   Star Studios  Bling slated  release  will also release  Tamil  Telugu another  poster Check   poster  Stars Chris Robert Downey Scarlett Check    trailer  Releasing March Dinesh Vijan  start multiple Will also start films with directors Homi Sriram Saket Chaudhary Kunal titled begins filming early next Release  Anaita Shroff Check   first look pics  Sushant Singh Rajput  Kriti Sanon  Dinesh Dinesh  produced  turns Film will star Sushant Singh Rajput  Kriti Many happy returns    Have  great year Exciting journey Ranbir Kapoor fulfils wish  travel previews    India POLL results   foresee stiff competition  voted official motion poster  Check POLL ends  Which trailer impressed  Cast your vote   pinned records  BIGGEST opening   Bond     expected  grow Hearty congratulations  achievement release  March Stars John Shruti Producers John Sunir Nishikant Kamat directs December  biggies  clash  Which trailer  impressed SUPERB trailer  Watch certified   British censors  November Approved Many happy returns    Have  super    awesome Eros announces Malayalam film Stars Mammootty  Huma Directed  Uday Filming begins crosses    will remain lower than After Rajkumar Hirani   collaborate again  Stars Film releases trailer   Hollywood biggie Check posters  Featuring Amitabh Bachchan  Farhan trailer  Film releases  Check trailer  theatres  Film   released   Pictures teaser  Stars Akshay Nimrat teaser link  Marathi film Directed  Sanjay Film releases Kajol will launch  first song  romantic track from   event  Mumbai tomorrow cross   India Hindi Check   character posters Saeed Jaffrey  left  indelible impression  stage Will always miss India India million Worldwide While  response  been mixed commonality with   families  patronising  film  that Weekdays will determine where  With  major Hindi film releasing next should enjoy another good packed  SOLID maintaining consistent  from  onwards  crucial Teaser posters  Introducing Krishna Chaturvedi  Ruhi Directed  Sameer release   Stars Girish Kumar  Navneet Produced  Vijay Directed  Vaibhav screenshot POLL votes feel will cross    opening wait After creating magic with   from Salman Khan   HIGHEST SCORE when  comes    film  enter crosses     should again witness  upward trend today  total Salman Khan  beaten   record   boxoffice with Taran Adarsh  India Today will cross   benchmark  Taran Adarsh  NDTV wake  Paris team calls  song launch which  scheduled collects  IMPRESSIVE   weeks India SUPER Many happy returns    Have  awesome   wishing loads  luck Hindi India Should cross  today BIGGER than being patronised      families  that reflects     crosses affected till with families busy with Bhai Dooj Post    ZOOMED After   holiday   registered normal drop  most circuits remained collects    Hindi version Tamil  Telugu  being OUTSTANDING Wish   very Happy Sunny Deol will launch  trailer  poster  today Film releases Presenting  official posters first poster  Mastani from Eros International Bhansali trailer  trailer premiere  will  held     event Teaser poster  Film releases Just received  copy  Modern  Seems like  interesting Sonali Anand blockbuster Diwali party  unveiling  logo  Anand Pandit Motion Pictures  Amitabh Bachchan Anand Pandit hosts grand Diwali Cream   film fraternity turns   partake Ranveer Singh launches  series Also unveils Bajirao figurine   housed Ajay Devgn will LIVE broadcast  mahurat shot  tomorrow  from certified  British censors  November Approved Eros International  release Marathi film this another official movie  Film releases Many happy returns    Have      super Tamil film certified  British censors  November Approved Looks  trailer  Check Rucha Pathak appointed Chief Creative Officer   Star   helmed films like character posters  Releases    Tamil Eros announces Marathi film with Ravi Jadhav titled Prakash Produced  Krishika Film releases December first look   important   decide   film based Check   first look poster  Universal Trailer launch Bhai  coming  Prem this Rajshri open advance bookings from  across India   huge opening heading towards India SMASH Directed  Ajay stars Ajay   title role with Dilip Sayesha Film releases Diwali Ajay will commence filming from   followed  shooting  Hyderabad Dearest Please continue  shine  Happy Stay Absolutely   teaser  Stars Shah Rukh Khan   Check Diwali festivities Exploring  beautiful  brightly  Lokhandwala Complex with family countdown begins   BIGGEST movie   season What Good Have  lovely Sharing  wonderful Deepika Padukone  host  special event  celebrate  music   forthcoming film directed  Bejoy produced  Vidhu Vinod Chopra  stars Amitabh Bachchan  Farhan Akhtar  pivotal After Reliance  will  releasing Vinod Chopra  India  Film releases positivity  change your  strongly believe  this Attended  bash hosted   extremely elegant Pratap  memorable evening winning team  celebrated  super success   film with  grand here   results star without    without  Here comes  sabse bada himself GAURAV Check   first look posters  Directed  Remo Produced  Shobha  Ekta crosses million  Hong Total till Sunday continued  with    offering   film  been campaign    superstar  numerous    like  introduced Telugu film  witnesses GOOD growth heading towards  Unaffected    India Subhash Ghai  celebrate anniversary  Mukta Arts tomorrow Will announce fresh projects   Subhash Watched  trailer  Pritish Nandy  Milap Expect loads  masti official logo  Yash Stars Film releases April official logo  Yash Stars Shah Rukh Film releases April Punjabi film certified  British censors  October Approved Many happy returns    Have  awesome    rocking Many happy returns       continue  scale dizzy heights Wishing everyone Happy Dussehra release  Romania   screens with Check Tamil film certified  British censors  October Approved certified  British censors  October Approved welcoming director Anees Bazmee  Please give   warm friends Watch Rohit Shetty Team celebrate years Vivek Krishnani appointed Managing Director  Sony Pictures India Films  appointment will  effective gallops  Film passes  essential with STRONG thus making   clear Tamil film certified  British censors  October Approved documentary   Check Yash  organises screening  documentary tonight Unseen footage  making  this epic story  Looking Official motion poster  Sunny much awaited releasing First poster  Film releases Stress free movies  being embraced  Hope doing link    song from Check Lovely Check   first song from Breaking trailer will  attached with Salman first look poster  Film releases certified  British censors  October Approved First look poster  Releasing  January collects IMPRESSIVE numbers  international Overseas million Amitabh Bachchan lends voice   prologue  Disney musical teaser  Bengali film Directed  Arindam Introducing  LEAD ACTRESS  Aditya maintained  STRONG hold     India Love   concept  Expecting lots     ayega   life witnesses SOLID growth  Good word  mouth  translated into strong Happy birthday   legend  icon  continues  inspire millions  people across India  gathered momentum towards Expect  upward trend Many happy returns     Wishing  happiness  Stay Many happy returns       with  Midas touch   continue  conquer  peaks Good Have  super Sharing  wonderful Check   first look poster  Punjabi film Stars Diljit Releases embarks   STRONG start    Collects VERY GOOD trending   remained consistent from    thanks  strong word certified  British censors  October Approved million      large Twitter Thank   your love Lovely Check   first song from also boasts   stellar Irrfan  Shabana Azmi  major strengths  this Aishwarya makes  stunning conveying  gamut  emotions with Finest work Sanjay deft direction uplifts even  ordinary Aiding   dialogue  superb Watched  captivating thriller with  powerful stylish  high point  taut first look poster  Marathi film  directed  Ashish Releasing Ranveer Singh  star  Aditya Introducing  LEAD ACTOR  Aditya Check gathers momentum with each passing  previews    India crosses  mark   opening witnessed  upward trend  after national holiday   previews India  should escalate countdown James Bond  Check   final trailer SPECTACULAR Emerges Akshay BIGGEST  India brand  poster This  crosses million  Hong Week previews  India performed very well  weekdays     India lives    hype    paisa vasool Should strike  chord with those  relish masala Akshay tops   role that fits  like  Flawless comic     stunts  simply Loved  poster  Check Abhay Deol Diana Penty teamed  Eros International  Colour Yellow directed  Mudassar starring  produced   Check certified  British censors  September Approved Many happy returns     Wishing  happiness passes  crucial Maintains Collects   taking total Prem  Teaser poster teaser Phir trailer  Guess Countdown packs  SOLID raking    opng wknd   film held consistently well Salman will  trained  wrestling  mixed martial arts   next months Salman Khan starts daily training  with action director Larnell Stovall   have been flown from starring Gippy produced  Kumar Taurani  directed  Mandeep releases March grossed   Should have   opening weekend  which Those  mocked  deviating from thrillers opting     having  last maintains  STRONG HOLD  Riding  excellent word   film     with moviegoers Aditya Chopra announces  next directorial film  Titled views  boxoffice updates  please like  follow  official Check  Soha  first look Good Have  awesome Wonderful thought  begin Overseas million  contributed Heartening gets  audience  Opens very  expected  multiply over Check   posters  Stars Randeep Directed  Prawaal Eros ties  with Jhoom Jhoom Productions  Soham Rockstar Entertainment  Radhika  Vinay Laughter   best they   offers laughter  generous with  emotional Thumbs marks   screen debut  Kapil Sharma  must supremely carrying  film quirky plot   proceedings  equally laced with funny situations  enjoyable about ENTERTAINMENT these days  Venus  ENTERTAINS wait   trailer  based   hugely popular games   same trailer  Check continues  wins  Festivals Wins Best Film  Best Director titles  Indian Film Festival stars Sunny Leone   double Tusshar    Ritesh Deshmukh produced    directed  Milap Milan  release  December Check    poster  Film releases Rohit Shetty  team  watch Kapil  screen debut  Hyderabad tonight official trailer  Imtiaz Overseas million North America  Pakistan Check    posters  Film releases Check   first look poster  Trailer launch Film releases Ayushmann Sonu Nigam  Shaan will host  grand which will  attended  celebrities from  film TSeries along with Colors  host  musical concert  Rang Colors  Sang Salaam Shri Gulshan today trailer  Imtiaz will  launched   event  Mumbai today evening certified   British censors  September Approved remained  similar levels  Jump    clearly hardly witnesses much growth    India crosses million  Hong Going SUPER Week first look poster  Trailer launch Film releases crosses mark  international markets    should multiply Check   first look poster  Trailer releases  September poster  Kannada film Stars Directed  Manju Slated  release Lord Ganesha bless Happy Ganesh Ganpati Bappa releasing   Stars Girish Kumar Navneet Kaur Directed  Vaibhav Produced  Vijay Shahid Kapur dances exceptionally well    song from proves Reliance   release  Overseas  Film will also  released  various Director   seen  colored clothes   sets  Comedy Nights With Tamil film certified  British censors  September Approved Check    posters  Releases poster  Steven  film Stars  Releases Marathi film     Grand total heading towards   India     India Lovely Wonderful Check    song from certified  British censors  September Approved crosses million  week Sunday  Hong Kong telecast   today witness growth   should witness  escalation Telugu film crosses million  week  film continues  GLORIOUS India Very good   film starring  will need  grow       strong wknd Telugu film collects  IMPRESSIVE   Week  Should cross million  Wknd Check   three  looks Check   song from Happy birthday   year  filled with happiness  successes  more Stay Tamil film certified  British censors  September Approved Many happy returns     Have  awesome    rocking Stay Telugu film should cross million  Wknd Should close Week based  Shooting starts Slated  release  August Friday Filmworks Pandey Shital team  with Akshay Kumar  third time poster  Stars Sandra Releases worldwide certified  British censors  September Approved Telugu film  speeding towards   Collects Telugu film  UNSTOPPABLE  Goes from strength  strength with each passing EXCELLENT  international markets Collects million   opening Music maestro Ilaiyaraaja with  Philharmonia Symphony Orchestra  composing  music Check    posters  Film releases witnesses  UPWARD TREND      India Overseas total after million  TIME EXCELLENT   India  should MULTIPLY further over Saddened  hear about  demise Overseas million Some territories   contributed more than James Bond  scheduled  release  India   shifted   week after takes  good start   domestic India screen collects lacs  Week India  TIME Check   first look poster  Film releases Brand  look    today  Power Star Pawan Take certified  British censors  September Approved After Eros Hansal selected  screening   London Film Film stars Manoj Bajpayee Rajkummar Just  word   trailer  director  link   Watch Reliance Entertainment Abhishek Pictures  release  Hindi version   October Check   song from Melodious Wonderful stars Katrina Kaif  Siddharth Directed  Nitya Shooting  begin  September Eros International  acquired worldwide rights  Excel Entertainment  Dharma Eros International joins hands with Excel Entertainment  worldwide rights  Directed  debutant Shujaat continues  grow  Overseas Collects approx   More than  from Sharing  thought that  completely believe witnesses SOLID growth      India Woke   this beautiful view   rainy Sunday Wishing     very happy  Good Check   teaser  debut film spectacular held  will  telecast   Network  Check Telugu film collects   Week collects   Week India  TIME impressive start    approx   across Some screens returns with  twist    logo Abhishek Pictures Reliance  release dubbed Hindi version  Directed Teaser  Akhil debut film will  launched   prominent personality  Film releases Check   first look posters  Akhil debut film Teaser launch Film releases Both  will  directed  Vikram  release  April while  release  June After joins hands  again with Vishesh Films  jointly produce  films Many happy returns    Wishing  peace  Have  wonderful Sanjay Gupta packs  solid  trailer  Watch certified  British censors  August Approved certified   British censors  August Approved Follow    Facebook personal Kannada film takes  EXCELLENT start  Collects   opening weekend previews till Telugu film   STRONG Weekend  Collects witnesses EXCELLENT growth    Should have  STRONG Sunday Heading   Awards been able  watch since     film festival  your Directed  stars Pawan Film  being shot across Malshej parts Eros International  Pawan with Pawan Kalyan Creative Works  Northstar organises screening  Glimpses from organises discussion  women Disney India  bring  timeless classic     Indian stage   first time Telugu film collects   Week Google   absolute thrill  tour  Google Thank  Team Headquarters  Silicon Thanks   warm Tung from Check offered  platform   pitch their  film certified  British censors  August Approved Sunday   eventful    from across With  charismatic  Romesh  Founder  Convenor Arrived   Francisco   very warm welcome  team Thank  very   absolute pleasure meeting your brother Goodbye  heading   Attending  very prestigious Festival  Globe Meticulously Brilliantly Kudos  Brinda   entire team  putting   superb wonderful chat with     stars  Kannada films Yash beautiful morning  Breakfast   long chat with  extremely elegant Creates  Exactly years  creates crosses crosses   film  achieve  ENVIABLE after HIGHEST grosser Hindi Riding high   success  Pleasure meeting Salman Khan   next production Check   teaser  Hoon Hero Just arrived  Dubai   celebrated South Indian International Movie Awards Looking forward   illustrious event Heading  Attending  prestigious South Indian International Movie Awards Many happy returns      very sweet  graceful Have  great year pics  Salman Stars Sooraj Pancholi  Athiya Directed  Nikhil Check   teaser poster  Yash Stars Shah Rukh crosses Emerges HIGHEST grosser Heading towards Hindi India TERRIFIC word  mouth translates into SUPER growth Hindi  eyeing  which  Sets   Data follows  dubbed Hindi Trailer  Hollywood superhero film Releasing  India  August  English Overseas crosses  magical number refuses  slow Director Nishikant Kamat maintains  grip right till  last   absolute Keeps  miss POWERFUL plot embellished with BRAVURA Rajat every actor This   best  which  just watched  feel simply Brilliant announced plans  install Dolby Atmos    cinema screens across  country over  next July  been  fabulous  have emerged money   eyes Essel Vision Prod  releases first look  Stars  Releases  India Check    song from continues   hearts internationally Overseas total Weekend  Crosses Madhur produced  Sangeeta Ahir  Mangal Murti will  release  September Many happy returns    dear Wishing  happiness  Stay HIGHEST grosser    revised   galloping towards continues  DREAM Week     TIME HIGHEST grosser  Salman overtaking  previous highest  eyeing India views  boxoffice updates  please like  follow  official official trailer  Check Exactly  year  this  opened  HISTORIC enters continues  Will cross  nett today  Week poster  Trailer launch tomorrow   event  Film releases August unprecedented demand  historic collections    shifted only  Salman starrer  gone past  nett will  film  attain  India First look posters  Stars Saif  Khan  Katrina Directed  Kabir Trailer launch certified  British censors  July Approved Hindi continues  Crosses  mark   Sets  benchmarks  dubbed Data Happy birthday   supremely talented Wishing  happiness  Have  Blockbuster speeding towards  Crosses     SALMANIA trailer  Check trailer  James Bond film  Check From  makers  Stars Imran Abbas  Pernia Check records HIGHER    than Monday figure official trailer  Punjabi film Stars Gippy Check Salman film  cross  mark  HIGHEST  score   Hindi Week continues  DREAM Week continues  STUPENDOUS should     Boxoffice Amrita Pandey  Head Marketing Distribution Disney wins INFOCOM Woman   Year Award FANTASTIC   clearly indicates star   will Today onwards  should only zoom Many happy returns    Have  awesome    rocking creating HISTORY  international Fiji  Australia   Zealand start  been FANTASTIC across India Coupled with TERRIFIC word  should have  MASSIVE takes  Collects    Surpasses Will    boost from ROARS from morning shows Packed Full boards greet   Salman Trade What  wonderful start  July Last This raining SMASH HITS Director Kabir Khan merges emotions  patriotism  creates Nawazuddin   like  single  Harshali  performs Salman BEST movie   without  Wins  over Watched    wish    film    takes   HEARTS  emerge Official teaser  Check Watching Interval Just Reliance Entertainment  release  Stars Jake trailer  Check Hindi  simply Continues  HEROIC   HIGHER than Data First poster  Releases Sept Teaser poster  Releases certified  British censors  July Approved Check   first look trailer  Stars Will Jared  cinemas August Sooraj Pancholi  Athiya Shetty  Directed  Nikhil produced  Salman Khan  Subhash Clash   release   clashing with Tamil film certified  British censors  July Approved trailer will     digital platform  Wednesday  theatres  Friday Eros International  release  record screens trailer  attached  releasing   Clashing with Priyanka look completely  sync with their working hard  their looks  body Watched  trailer  Sanjay Leela magnum opus Leaves Salman opens this What  expectations from this starring Kunal  release   Directed  Shantanu CANADA opening Incl opening Incl  Incl spree  international Puts  MASSIVE Australia data Hindi   SOLID stats clearly indicate that  film  found tremendous First look poster  Stars Nawazuddin Radhika Directed  Ketan Check    poster  Stars Hugh Releases  India  October trailer  Check Hindi witnesses growth     India Eminent journalist Nishant  Bhuse turns director with Marathi film Will release creates Records HIGHEST EVER    India million      large Twitter Thank   your love certified  British censors  July Approved Nadiadwala Grandson  announce release  Tiger Kapoor starrer  April Directed  Sabbir SENSATIONAL   previews cross HEROIC Some screens collects lacs  Week Grand Completes days  theatres crosses  mark  Total    Still call    will  remembered casting just Every actor shines  their respective Prabhas  special mention grandiose most  watertight screenplay   beyond Every every sequence     easily  compared   best    stamp April Teaser lilting melody from  Features Abhishek Bachchan First song from Naam Features Kareena Kapoor Khan  Sidharth poster   Cruise starrer Releases  India  August certified  British censors  July Approved link   official promo  Check official trailer  Sanjay Marathi film Watch trailer launched  grand Master Storyteller magnum opus opens this What  expectations from SECOND HIGHEST grosser    after which  crossed crosses       highest grosser With Varun Dhawan  well  director Remo will march into  Shraddha film  cross Baba Iftaar dinner  dignitaries have been part  this occasion regularly Check   character posters release   Stars Harshvardhan Kapoor  Saiyami Rakeysh Omprakash Mehra Last schedule Salman Khan announces release date  September highly complicated  employed   will release only  Exact date will  decided Yash teaser promo  Madhur  movie produced  Sangeeta Check This promises    From  director   trailer First look poster  Trailer will  launched   event  Mumbai releases   clear weekend   Salman Khan certified   British censors  June Approved India Good growth over heading towards   India    India Punjabi film  FANTASTIC     domestic with  witnessing growth After   Disney India  having    with their superb marketing Mahesh   Reliance  quit after  Partnering with Resul Pookutty  starting  film production Bhushan Kumar signs  deal with Remo crosses  mark  India  India  expected  grow collected   Week Grand records HIGHEST   overtaking   India Hindi crosses  less than week India gross  Overseas gross song  will  launched today   event  Karan Johar  Rajamouli will raining  track  will  launched today   event  Kabir Khan  Adnan Sami will aiming  cross   Week gonna   BIGGEST     Excel  Yash Will  clash remake  Malayalam  starring Kamal will  released  Reliance   North India  July Produced  Aditya Chopra  directed   Abbas shooting will start    Salman  title Salman Khan    Yash   release film   Check first look Stars Pulkit Yami Urvashi Directed  Divya Khosla continues  GLORIOUS Does heroic   crucial    challenge total Worldwide Gross Overseas opening million acquired  music rights  Firoz next releases collected   Weekend Grand Tamil film  steady business  Weekend Collected Many happy returns    Have  super    rocking Stay HIGHEST OPENING WEEKEND TOPS  Read continues  upward trend      India records  HIGHEST OPENING WEEKEND  First  cross  mark  India With  advance booking   looking very  looking   opening which continues  DREAM Holds SUPREMELY WELL     India Despite being released   holy month  when  major chunk  audience stays away from  grows From director Robert Teaser poster North America collects with screens      close  HIGHEST opening  Varun Dhawan takes  Collects   despite rains playing havoc  HIGHEST OPENER Punjabi film certified   British censors  June Approved Varun Dhawan cements  status   consistently bankable start     start  Collects heading towards million  Total after Week million promises  dance into your heart  also dance    success   Another    Watch every   their best foot used smartly  enhance finale   that deserves  Merging patriotic fervour with drama   master hinges   thin   drama choreography  visuals more than make those  love promises entertainment Remo gets  right Trailer  wins  over Expect  hurricane   this Another BLOCKBUSTER Salman  wait   trailer  Watch racing towards   This film   BIGGEST success story  recent Sony Music acquires music rights pics From  Studio that brought  Releasing Check Check   brand  poster What  expectations from Remo Prabhu Kapoor starrer which opens this Tell official confirmation from Shah Rukh team about release release   Film that  currently being shot  Directed  Rohit certified   British censors  June Approved Overseas weekend  Pakistan contribute more than Grand India Refreshingly  trailer  Khan starrer Watch continues   hearts  also witnesses good growth    India THANK   each member   Twitter  your warm birthday Many happy returns      Almighty bless     continue with  your good Stay blessed trailer   launched  June   event  Salman Confirms Amar   Salman Khan Teaser poster  Stars Kangna Ranaut  Imran Directed  Nikhil Produced theatrical trailer Check   brand  poster trailer   Stars Kangna  Imran Directed  Nikhil Produced link   official Facebook  Page SENSATIONAL trailer   sure  storm  Watch celebration time   team celebrates tonite with  success team celebrates holds well      India certified  British censors  June Approved another catchy track from Varun Dhawan exhibits  range  Check Looking    looking      even cross that  TIME continues  victory march    Grand India Tamil film continues   from strength  strength  Tamil     SUPER Awards grand celebrations Pics  Yogen Shah Fashion extravaganza Pics  Yogen Shah premiere   Pics  Yogen Shah witnesses GOOD growth   Major    India Ramgopal Varma returns   Hindi screen after  hiatus with   thriller creates HISTORY  Crosses    million  TIME Tamil film takes  FANTASTIC Collects lacs  Tamil refuses  slow down  Grand India picked   plexes towards evening  India     needs  grow  post  good pics from  musical Girish Kumar Navneet Kaur Dhillon starrer titled Vaibhav Misra London schedule Second   Yogen Shah collected Grand India SUPER first look poster release  Sept Stars Kunal  Directed  Shivam IIFA journey Looking forward  IIFA  Kuala Malaysia this Damn  trailer  Watch track Check  Meri from should close Week   Week should take UNSTOPPABLE  Total till  Should cross   Weekend partnership will boast   stellar line   helmed  finest including Karan Johar partnership will  Dharma   Star Studios  distribute films Star India  Dharma Productions form Announce  deal over years   Star Studios  Dharma certified  British censors Gippy Grewal makes  Bollywood debut with Costars Tina Film releases first song from First look posters  Features Amitabh Bachchan  Farhan teaser  Watch speeding towards   Total till   TIME While most films find  tough  cross     game changer Overseas total crosses   Emerges  HIGHEST GROSSER  BIGGEST   Hindi creates HISTORY  total  read  From China Will cross certified  CBFC spectacular theatrical trailer cross  mark  India today   film  Next mirrors  lives   upper   same thoroughly Just miss this Must Every actor  splendid    ones  shine  brightest  Anil Ranveer  Shefali Zoya juxtaposes drama  emotions with   highs lows  relationships  finely captured Watched Loved  Very  directors  tackle relationships with such sensitivity  Zoya Watched  first song   song  sure  prove  rage when Salman Khan Watched  trailer   magnum opus Just  Trailer launch Shooting    Nadiadwala Grandson  Directed  Sabbir Film stars Tiger Shroff  Shraddha China crosses North America    Overseas   TIME speeding towards   India   Grand Trailer   will  launched  Stars Akshay Karan Malhotra This   film   looking forward  teaser   keenly anticipated Check Kangana Ranaut Sunny Deol starrer  release  July Produced   directed  Radhika   Vinay unthinkable  crosses   Week Should cross   Week release  June First look   Film releases July film with Umesh Shukla will start after  release film with Tigmanshu Dhulia titled Irrfan Khan   Abhishek Sharma film titled Goldie Behl signs directors Umesh Shukla Abhishek Sharma  Tigmanshu Zafar will feature   special role  Tere  Laden Dead  Check   pics Directed  Abhishek Tere  Laden Dead  Alive stars Pradhuman Singh Manish Sikandar instalment  Walkwater titled Tere  Laden Dead  Alive  release Overseas million  TIME Ajay Devgn  dominate Diwali  directorial preponed  Diwali  release  Diwali finally  first look poster certified  British censors release  India  July  brand Looking   dream   India  emerges  first BLOCKBUSTER  Eyeing Tamil film certified  British censors Happy    tweet  teaser poster  Genuinely hope   amongst their fans would official first  teaser poster   Salman Khan starrer China Overseas million HIGHEST GROSSING HINDI FILM Congrats   completion   year   Prime Minister heading  BLOCKBUSTER    higher than   rarity first look poster  with  release Salman Khan release confirmed  Sept Director Nikhil Eros sets   Check   first look poster  Marathi film Releasing Unlike most Hindi films that  continues  winning streak Overseas total Worldwide total collected   Weekend Grand India Overseas million Worldwide total crossed continues  victory    Grand India SUPER shatter previous Chalo  ready    bonanza this festive Guess first look  Irrfan from China Higher than collection    Middle East  overseas witnesses PHENOMENAL  multiplies     India Grand India Should cross   SUPER India Expect   multiply today Word  mouth HIGHEST grossing Indian film ever  million  TIME director Aanand        hits witnessed super growth  occupancies   zoomed Plexes start   with hearty   succeed  bringing audiences back Check   official trailer poster  Directed  Rajamouli  presented  Karan takes  flying start  Collects total  slightly more than   EPIC especially  times when films sink faster than opens  good especially  cities  North India screen Shah Rukh Khan underwent arthroscopic surgery  left knee  doctor  advised  complete rest Eros  release  screens    Pakistan Australia   Balance certified  British censors directed  Tony Scripted  Rajat Release  first look Balaji Motion Pictures   Motion Pictures join hands    life  times  Stars Emraan first  yourself  Watch this Watched   director Aanand First look poster  Aishwarya  Bachchan starrer Simply release  July Directed  Subhash Actor  Zafar announces  first  action drama Imran Babar  Will release loved performance   also  Look forward  Looks Tamil film certified  British censors Grand India Highest  SMASH Grand India Will cross  mark today collected      collected  that film Eros announces collaborations with Chinese film entities  Shanghai   presence  Prime Minister Narendra Modi Writer Tushar Hiranandani  joined Balaji Motion Pictures  Head Eros Intl launches film  TANG XUAN ZANG Xuan  collaboration with Chinese Film Corporation Poster  Hollywood film Features Nargis Fakhri   special Releasing  India Eros International  Ajay Devgn first look launched months wait   Motion Poster  Ajay first look poster Ajay Devgn  reveal  first look  Release release  China   across Grand premiere  China today  Shanghai stars Arshad Amit Aditi  Hydari  Ronit Produced  Mangal Murthi Film releases July trailer will     tomorrow  Star Subhash Kapoor team  after  successful Truly Look forward  this Motion Pictures Panorama Studios announce release   Sept Directed certified  British censors witnesses PHENOMENAL growth     India Take  Team Just look   REMARKABLE growth     Proves  again CONTENT Grand India Thrilled     like sprinting faster across  word  mouth  translating into super numbers witnesses MASSIVE growth     India Winning Winning While witnessed EXCELLENT growth    India data   updated   more than doubled   intl markets witnessed ample growth from evening shows  India Expect further jump   today Loved  song from Phir Commands repeat Watch Amitabh Bachchan  that       masterclass    simply Irrfan   there  character  cannot Give   character   takes   like  fish takes Watched  tale deftly executed  brought  life  Shoojit  film that demands Disney India announces release    weekend post June Directed  Anurag Stars Ranbir Nadiadwala Grandson announce release    Directed  Imtiaz Stars Ranbir Kapoor Deepika crosses  mark        India Salman Khan  wait  trailer will  attached official trailer  Watch TERRIFIC  Word  mouth     India Grand India First look poster  Directed  Mohit Film releases June Sonam Kapoor  Neerja  first look   film produced   Star Studios  Bling gives  glimpse  powerful performances  Emraan Vidya Balan  Rajkumar Looking forward  this Watched  trailer  Mohit Seems like  emotional roller Expect  hurricane This   Have  super certified   British censors Akshay Kumar strikes back with  another towering performance   absorbing fare Clapworthy moviegoers  back with Outstanding start  single Plexes very Eros Intl  Anushka Motion Pictures  come together  Kedhar Marathi film major forces join   happy   present extravaganza  Great Love  vigour  zest  this  track from Tamil film certified  British censors Heading towards Many happy returns    dear Wishing  happiness  Have  awesome certified  British censors Tamil film certified  British censors holds very well      India Chhitra Subramaniam  been appointed  Vice President  Rose Audio Visuals    worked with Percept Pictures opening weekend    times higher than which released Hardy Charlize Theron first look Dwayne Johnson first look link   official Facebook  Page What  expectations from  Will   spell   Bollywood  Please share your Gallops   India While Hindi film   plummeted Hollywood  cementing  time  wake   smell India   times higher than should   landmark year  Hollywood films  weeks   conquers Happy happy happy birthday Have  Blockbuster collects  nett  Week  film  recorded around    opening cleared  censors with release  July  Umesh  Sept releases today  screens  Tamil    IMAX Ajay directorial venture  release   Produced  Ajay Devgn Ffilms  Eros title track  peppy Simply  official trailer  Waiting with bated breath  this scale dizzy heights  success  your creates Crosses  mark  Total after Wknd   TIME BLOCKBUSTER Mani latest film  winning hearts across  INTERNATIONAL data After winning hearts  emerging      release Opens release  next  family  August Directed  Umesh Shukla   Varun While most films take   steam after heartening   complete Enters Manoj Bajpayee turns producer with  thriller starring Tabu Directed  Mukul  titled official teaser   Film releases  Check Tamil film certified   British censors releases  Germany  April Also  Austria   poster  those Tamil film certified  British censors certified  British censors Awesome trailer  Zoya Akhtar promises  winner Colors announces partnership with Wizcraft Intl acquiring complete broadcast rights  IIFA Awards   held  Kuala brand  poster   family Ranveer Anil also  admirable performances  Sayani Gupta  Revathy mother   Just miss this nails  with  spirited Handled with utmost sensitivity  director Shonali Take official poster  Film releases  June Loved  trailer  Seems like  Watch Trailer  will  attached  which releases Overseas total after Wknd approx contribute over million alone After Nishikant Kamat join hands  their next Marathi film produced first trailer Trailer launch    held tomorrow   event  Film stars  Madhavan  Kangna Krian Media signs Randeep Hooda    directed  Syed Ahmad   earlier directed Wear  Think Introducing  seventh poster  Zoya Thank  very    pleasure meeting making  poster good    Bachchan  Irrfan having First look poster  Film releases Introducing  first  characters  Zoya poster   mysterious character Enacted  Paul Film releases April very warm welcome   stylish  charismatic  Great  have   happy Stay Krian directed  Saurabh will release large Twitter Thank   your love Malayalam film certified  British censors passes  with distinction game Shatters previous records    BLOCKBUSTER Star Studios announces  line   films with  innovative will have  release  will   Expect HUMONGOUS Sooraj    screens this  Stars Salman Sonam Simply Shadowgraphy Stars Sushmita Anjan Watch wave across    should   HIGHEST   Setting Logo  Stars Ajay Nishikant Kamat Panorama Studios Motion Pictures production Tamil film certified  British censors India screen count International screen count Worldwide screen count Cricketer Bret  turns  glimpse   first lead role   film titled relives some wonderful moments from  film while browsing through this classy Thank Team Received  limited edition copy    book that captures  best moments from  making Wish   very best   release  your book Thank Tamil film certified  British censors Telugu film  previews    Source certified  British censors novel marketing teams  with popular comic book character Chacha Chaudhary  solve  case Fasten your seat  next Exciting phase eyes  Summer Flow  movies commences next Starting with Exciting fans  here  images from   Bond movie teaser trailer  Releasing  Telugu Vidhu Vinod certified  British censors Karan  directed  Shakun titled  Stars Sidharth Fawad Alia Bhatt Rishi release   Stars Aishwarya  Irrfan  Shabana Sanjay Gupta directs this Here   first look posters Tamil film certified  British censors official trailer first look agree Gupta should take  flying start   ticket trailer teaser  Stars Amitabh Deepika Irrfan witnesses excellent growth     India Loved this song from your words   Have  super Those  written   have been associated with Rohit while music  scored CONFIRMED  release Christmas shooting Here    shooting Chillies Entertainments    Rohit Shetty shooting began from March  Directed  Rohit part   will release this Diwali Film  directed  Sunny trailer releasing tomorrow Grand India teaser poster  Releasing   Telugu poster  Trailer launch  Film releases April trailer   attached  Directed  Shoojit stars Amitabh Deepika Irrfan crosses  mark    Grand India escalates further      India witnesses  upward trend     India Motion Pictures  Panorama  produced  Kumar Mangat Ajit Andhare  Abhishek starring Ajay Shriya Rajat Kapoor   release   July Directed  Nishikant teaser poster Disney India  Aamir Khan come together  directed  Nitesh  movie    release during Christmas weekend goes from strength  Weekdays  Week   better than  better than Produced   Motion Pictures along with Saraswati Creations  Rising  will  distributed worldwide lacs than Grand release  February Directed  Abhishek film stars Aditya  Katrina Kaif release  Romania  March  more than Check   poster will  available  Home Video from March  dubbed  German Second Best Exotic Marigold  release  India very warm welcome     finest actors  Great  have Glorious march Week    Grand accomplishes  rare feat  collecting more  Weekend than Weekend trailer will  released Distributed   Star Studios   film will   theatres  April Amitabh Aamir Khan  launch  trailer  Vidhu Vinod Hollywood film Grand India Excellent Unaffected   films Holi produced  Releasing  February cleared   censors with  Releasing from Here   official trailer  Stars Emraan Directed  Vikram trailer    Releasing April Block your  GENIUS  creation  confirmed  release  Countdown cast  crew  celebrate four years  their first film Raha  music video will  choreographed  Ahmed Khan  feature Tiger Shroff  Atif than India Logo   Star Studios  Vishesh starring Emraan Trailer launches tomorrow directed  Shoojit Sircar    family comedy stars Amitabh Deepika Padukone  Irrfan Motion Pictures  Yash  come together  Yash   distribute  film Secret collects    opng wknd  growth   from   growth   from records more footfalls    when compared    most Eros Intl  release     March  Check Despite  slow clocks   opng Goes  prove  power  solid Hooked  this haunting melody from   Amazing Deeply shocked  saddened  hear about  demise  Prakash  Amit   soul rest India Saturday morning shows better than Word  mouth film  carry home  also  your  ideal film  watch with someone     miss this rests  Ayushmann Khurrana  Bhumi shoulders    pitch  terrific fascinating watertight screenplay  execution   written material  Sharat Katariya deserve brownie points springs    simple film that wins  over Makes  moist will wait  word  mouth before  venture into single screens  intl Yash   release India screen  releasing  date  international Vipul Amrutlal Shah  John Abraham come together   sequel  called Directed  Abhinay Starts Sept World springs  pleasant surprise   international Grosses approx million   opng Very First look  Kangna  Directed  Nikhil Costars Imran Film releases Sept Music success bash  held last Akshay Kumar starts shooting  with Nimrat Alia Bhatt launches Rohit book Hate  Delhi Eros Intl appoints Ajit Thakur    spearhead  motion pictures production Trinity rock solid despite India  South Africa match      India witnesses  escalation     India OFFICIAL STATEMENT FROM YASH RAJ  Read continue  Maratha Theatre management  Yash  mutually decide  continue  show India Excellent growth from evening show Expect   grow further over Despite targeted primarily  multiplexes  screen goes from strength  strength Shanta mother  Madhur passes Rest  Condolence meeting Milan Luthria  producer Bhushan Kumar shift release date   March Stars Ajay Scripted  Rajat from release  India  April  week before  releases  Also Telugu film races towards million mark  Total till Some screens carrying terrific hope  super audience feedback translates into wonderful numbers approx  Good release  Directed  Vikram Stars Emraan After playing  uninterrupted  unprecedented performance  comes     Maratha Mumbai Legendary Rama Naidu    Contributed enormously  Indian      soul rest revenge saga  embellished with popular songs vigorous striking Varun Dhawan portrays  troubled  with shedding    donning  robe   accomplished rests  bravura Nawazuddin   Embraces  part with Backbone  this thriller certified  British censors After Bhushan Kumar joins hands with Akshay Kumar again   edge   seat thriller Film releases Telugu film takes  flying start  Collects  opng wknd Reported screens affected   cricket India Sajid Nadiadwala back after with Tiger second film titled Directed  Sabbir Release April Ravi   brother  Anand Film  have breathtaking visuals  action Story deals with Himesh  play  gangster  Ravi action thriller  Shoot begins  Greece First look  Mohit Film releases  June certified  British censors first song from remix from Check Indian Film  Television Association  office  inaugurated yesterday Karan look from  plays  villain Grand India Many happy returns    Have  super    splendid Stay Salman Khan will have  film releases    with Subhash   Kabir Eros Intl  Salman Khan Films  association with Mukta Arts have announced  release   July Nikhil Advani Star Studios  Oscar nominated movies   Indian theatres next Staying healthy    realized  late Marathi film highest television viewership   film  Maharashtra Hindi  Telecast Marathi film telecast   breaks  records  Maharashtra with caters largely   urban  crisper version only enhanced  overall Akshara  supremely confident   debut despite sharing  frame with  accomplished Dhanush stands    icon   humungous  range   terrific actor Amitabh Bachchan  UNPARALLELED  essaying  demanding character  powerhouse Balki  opted  diverse themes    travels  path rarely Several poignant moments stay with Akshay Kumar begins shooting  from April  Cape Film releases Breaking will release    screens across Many happy returns    Wish  happiness  peace official trailer  Tamil film Check first look poster Presenting  first look poster  Stars Anushka Neil Bhoopalam  Darshan Kumar certified  British censors Tamil film certified  British censors song from Watch remade  Starring Ajay Directed  Nishikant Starts Looking forward  this Jurassic World Official Super Bowl Spot excellent growth     Grand India witnesses good growth  second   Grand India deal  release  China gets Breaking    release  China across  record also stars Nimrat Directed  Raja Krishna Shoot begins  Bhuj Cape  Good Crouching Tigers  Emmay Entertainment  jointly produce Stars Akshay certified   British censors premiered  Poland  Will  followed   theatrical release from Grand India Ashutosh Gowariker Prod  Disney started shoot today  Bhuj with Hrithik  other cast crosses  mark over Collects   India Word  mouth National Anthem   voice  Amitabh Bachchan continues  forward Collects   Today should deliver  numbers again  word  mouth witnesses robust growth across Collects      should pack  solid link   official Facebook should escalate picked  during Superb word    multiply book release  journalist Rohit book Hate launched  Amitabh Attended  Food Hospitality show Presented   Entertainment    AZURE Entertainment Produced  John Abraham  Sunir release  October  action film directed  Nishikant  unites with John Abraham after Abhishek Dogra impresses  great deal   directorial debut Deserves kudos  opting   unconventional climax also works because  wonderful performances  Sonam Rajkummar Pulkit Samrat  Varun entertainer that promises   laughter  those Tight Competent Watched Neeraj Pandey proves  prowess  Brilliant enchanting evening  about Star Studios  Inspired  Untold Story releases  October ABCD directed  Remo  starring Varun Dhawan  Shraddha will release  June Eros International  release Aanand   June Stars Kangna Ranaut Bhushan Kumar teams  with director Milan Luthria  Ajay Devgn  Shooting starts  second half Twitter Thank   your love Look test  Directed  Nikhil Stars Kangna Ranaut Imran Film releases Sept Disney AGPPL announce release   August Directed  Ashutosh Stars Hrithik Roshan  Pooja Yash   release  Directed  Dibakar Stars Sushant Singh release   Directed  Milap Stars Sunny  Riteish Deshmukh certified  British slated  release  Directed  Nikhil  film stars Kangna Ranaut  Imran Sajid Nadiadwala  release  August Directed  Kabir  film stars Saif  Khan  Katrina wins  over    ingredients  strike  chord with should start with Watched last  wholesome entertainer with action  heartfelt Highest Grand  India  TIME creates Crosses  Grand  India  TIME sets   Crosses HIGHEST GROSSER EVER First film  attain this remarkable certified  British first film  cross first film  cross first film  cross cross  today  Becomes first film  attain  feat  Breakup  next Health  much better than  shoot going Telugu version India  Chillies Collects  Telugu Breakup  next Thank  very Glad    Twitter    missed Great  have  back Thank Glad    Great    back  action More power Happy    missed  Taran good  have  back  timeline Thank  Priya  good    back  healthy Love Tamil film  EXCEPTIONAL  Holds  spot  overtaking including Rentrak Tamil film  Film  released Rentrak collects   opening Hindi Telugu   Tamil opens   PHENOMENAL Records HIGHEST EVER Breakup  next Thanks  good wishes watched  film  almost Very keen  watch Will watch both Stepped  after  month  attend Mata  hosted  Feeling Hello thank   your   Will resume work first official poster  Tamil film Motion Poster Teaser image  first song Features Hrithik Monday Racing towards  lifetime    India EXCLUSIVE OVERSEAS fares Rentrak Corporation Eros will also  release Kajol directed   Film will release Eros  Ajay Devgn   directorial venture Eros will release  film SECOND BIGGEST OPENER  After India Tamil film   Some screens   Rentrak witnesses EXCELLENT trending   Crosses    just Ajay Devgn presents Marathi film  official theatrical Check packs  SOLID Collects  nett  BIGGEST OPENER  India continues  victory march Tamil film  Highest screen average  Rentrak Tamil film  screens   Rentrak Tamil film starring fetches  PHENOMENAL start   international Numbers Rentrak time  start   with SUPER starts with   Collects official theatrical trailer  Bengali film Starring Latest could emerge highest also highest Salman Khan  Bigg Boss Teaser with HIGHEST OPENER  Ajay Devgn  Collects approx Ajay Rohit Shetty lethal Audience clapped whistled when Ajay walks towards camera HISTORIC start   morning Trade Expecting   total Allu short film Watch Tamil film certified  British Censors  August official trailer poster with  release date Motion Poster  Tamil film song Your Collar Before  first trailer    here comes  Motion Poster   film Grand   TIME BLOCKBUSTER shooting will begin  October with  first schedule  South Disney India  Ashutosh Gowariker  collaborate  after Stars Hrithik  Pooja Countdown begins  Release chart   Check censored   British censor Certified  British Censors  August certified   British Censors  August certified  British Censors  August first look poster official trailer XCLUSIV OVERSEAS gets mixed highest Corporation team launching  first Guess which film  giving  tough fight    which continues Vishal which  originally scheduled  release    shifted Sept gets more crowded With Yash  shifting   clash between Priyanka  Parineeti Yash   release  Sept   adopt  unique marketing idea which needs more time emerges Salman HIGHEST GROSSER  international Total till  million Happy birthday   scale greater heights  years  Stay censored Certificate August Teaser    movie Loved  visuals  background first look poster movie   ride that lives opened   Thursday   collected approx    opening theatrical trailer  Vishal  movie First song   Fanny  will      event  being planned   Star  Maddock trailer  Stars Vidyut Manoj Watch Hrithik  danced  heart   Features Katrina  song  slated  release Final schedule  Emraan Hashmi starrer Presented   Star directed  Vikram produced  Vishesh Films Overseas total till million Many screens track from  Rahein Eros  release   Produced   Balki Directed   Stars Amitabh Akshara Overseas crosses million Many screens   Highest grosser   Overseas mail from Sanjay Dutt Prod  release  Films with Rajkumar Hirani  Prabhu Dheva Reliance  release    Irrfan Nimrat Nawazuddin Siddiqui  director Ritesh Batra will Akshay Kumar starrer opens this What  Tell will release this Diwali  Tamil  Telugu trailer will  unveiled     event   entire cast  team will eyes  Release chart   Check adapted  Bollywood   Star song that   rage hugely popular even today Tera Devar Overseas total till million Many screens Monday  better than crosses  domestic More records  shatter  days years  this date Sooraj   Gave  term Blockbuster    game Many happy returns        nicest persons  know Wishing  infinite happiness  good Stay Telugu film went from strength  strength  Collects Many screens   Rentrak fared very well   Excellent  Rentrak till Wknd     Pakistan  Many screens    total will Overseas million Many screens Grand Holding exceptionally well  Week read Salman Khan marches into  crosses  mark today HIGHEST GROSSER TSeries acquires music rights  Excel forthcoming movies State Govt  Maharashtra  confer upon Madhur Bhandarkar   Kapoor Special Contribution Award   field  Cinema Telugu film witnesses massive growth More Overseas data pouring Overseas million Overseas touches million Many screens Grand  India Racing towards Melodious song from Stars Happy Friendship   each Amazing news from expanded  screens from Shows   collections censored   British censor Certified  British Censors  August Japanese boxoffice ringing  collecting  Still running Eros   release   Stars Saif  Directed   Nidimoru  Krishna simply Collects    taking  Week total Majhi from   Honey Singh with Ajay Overseas total till continues  victorious collecting   taking  total first song from release   Starring Arjun Sonakshi Sinha  Manoj Directed  Amit Salman Khan  unveil  first look  Kamal directorial debut   event  Mumbai tomorrow total stands    India first song August  December packed with Release schedule Check festivities began  zooms   international Overseas total till million Grand  better than witnesses MASSIVE growth first  Cinestaan Film   foray into film production with  agreement with Rakeysh Omprakash Cinestaan Entertainment Private Limited unveiled  plans  produce films  shall soon foray into television  internet song from Mahima excellent    performed well  business will   further boost once   festivities EXCLUSIVE OVERSEAS fares very collects over  Rentrak Corporation Many happy returns     Wishing  loads  Stay With racing towards  Salman Khan   first actor  have   grossers first look poster Vivek Oberoi returns  Yash  after years with Plays   Riteish Deshmukh heads HUMONGOUS  Collects  nett  thus crossing  nett mark   opening premiere   held days before  Film releases  September Many happy returns    Have  super Stay expected  grow further  Abhi   rahi hain   apni Eidi lene zaroor heading   BIGGEST Salman Khan opener    approx Many screens crosses  nett mark  Continues  glorious    Collects  India Honey Singh  feature with Ajay  Kareena   song   will also  seen mouthing Majhi HIGHEST Salman Khan opener  Collects AWESOME start  Collects from screens  Several screens review gets lacs page views  less than  THANK  VERY page views   review    hours  making  trend  second  today ready   Tsunami called   ticket Sure  rewrite records TSeries acquires music rights  first Hindi film Stars Sonam Kapoor  Fawad remake  will  directed  Niels Arden Oplev Girl with  Dragon Will  filmed first song from After overtaking  North  goes past first song  Tere   Rahenge   release premiere   opening night  Toronto International Film Festival Working birthday  Himesh   records songs  Sooraj Salman Khan starrer team  participate   TOUR  Sept Shah Rukh will  performing   after years trailer  Watch Countdown begins     packed with Check   updated teaser arrives with   Teaser  simply Truly international Kudos Siddharth censored last week   British censor Certified  British Censors  July Interesting clashes Himesh  start recording  first song  sequel Diwali  Christmas both with Karan Diwali  Christmas film with After  teaser poster  Zoya  film goes past  becomes Varun highest grossing film  North Hrithik Kaif starrer teaser will    July Tamil film  fetched  solid start  Australia  Rentrak faring exceptionally well  Total after Wknd Rentrak remained steady  Weekend  international  total Weekend  approx million countdown  begun    release  film  expected  fetch  massive start   international Rhea seen  signed opposite Riteish Deshmukh  Yash Trailer   first superhero film  Marathi starring Shreyas Talpade playing  will  attached Salman arrives this What  Tell theatrical trailer Marathi film releasing will  released  Europe   East  screens where  other Indian film  ever Bhushan Kumar signs director Vishal Pandya   exclusive    pipeline  more Disney India  Salman Khan launched  official mobile game Disney Anil Kapoor  Rhea Kapoor will unveil  trailer    event  Stars Sonam Kapoor  Fawad read your tweet yesterday about    love  Request   focus  suburbs Salman Khan with  Poster Salman check   brand  posters  Poster teaser trailer  Watch Overseas Week million VERY  contributed more than opens   pose tough competition Many happy returns     Have  awesome Stay first look poster theatrical trailer  Stars Bipasha Basu  Imran premiere  Indian Film Stuttgart from July starrer  wrapped  last schedule   entire shooting   Releases Talk that will  postponed    days  Film CONFIRMED  Already censored  time eyes  Release chart updated   Check Emraan Hashmi  ready  watch  trailer    film first look poster  Trailer launches ADITYA CHOPRA YASH  CLARIFIES  Read attained BLOCKBUSTER status  crossed  mark  Ekta Kapoor  team  celebrate  grand success Telugu film  fared very well  Collected   opening Reported Rentrak raced ahead   Australia     lower   business Rentrak EXCLUSIVE OVERSEAS picks Rentrak Corporation First look poster  Directed  Karan stars Riteish Pulkit Samrat  Jacqueline previews    India witnessed ample growth   markets such  Australia    better than ahead   Collects till VERY Thanks  Love these star tweeters back  back Happy birthday   winning streak opng wknd week should touch   opng wknd India Expecting  nett song from  Catchy from Bengali film with English Stars  Melodious ready   wait    track from After winning hearts    many  opened  good response Telugu film takes  GOOD start    previews  Many screens fetched  much bigger start than   More than records STUPENDOUS figures across Collects previews   India India Despite heavy Despite affecting   VERY wave across  shows  packed  capacity   start  HUMONGOUS  every clash between Chopra sisters  Priyanka versus Parineeti release  Stars Priyanka Chopra   title embarks   BIGGER start than  Collects approx will   called teaser poster releasing Reliance  release  approx screens worldwide across Shah Rukh Khan   release planned  Releasing  August Presenting  teaser poster Ajay Rohit Shetty  Reliance will launch  trailer    event  Mumbai tomorrow Thank takes Marathi cinema  great  sure  will  audience love   records While Riteish  also like  heap praises  Tanvi Azmi  Sharad  plays  Super Riteish Deshmukh    super Thoroughly enjoyed  first Marathi film poster  Yash Stars Rani Presenting  first look poster  Ridley Poster Breaking Riteish Deshmukh    produced  Yash Grand  India Racing fast  furiously towards movie Beautifully textured love story that wins From  director  Blockbuster Presenting teaser trailer eyes  Release chart Check From  director   Presenting  trailer Shah Rukh trailer   attached  which releases ready  Bajirao Presenting  Motion Poster Presenting  brand  poster  Poster Presenting  first look poster Presenting  brand  posters  Poster that  have seen  posters   ready  watch  trailer   today Presenting  first look poster  Poster Gaye Munde   stars Jimmy Neeru Gurpreet  Sunny Releases Yash Director Manmohan Singh  Presenting  first look poster  Punjabi film Gaye Munde watch  cast will tell Truly innovative Punjabi film  second remained  first choice  moviegoers  Australia   SMASH washout   international EXCLUSIVE OVERSEAS Rentrak Corporation Grand  India Galloping towards Fault   Stars opening  India Presenting  first look poster Waiting with bated breath  this Making   Glimpse Into   Year Journey starrer opens this What  Tell Many happy returns     Have  awesome Loved  teaser  Tamil film Stars Vidyut Jammwal  Manoj Watch first look poster Trailer launch  Parineeti Shraddha Yash  will launch trailer    event  Directed  Habib Stars Aditya Grand  India start expected trailer   launched  First look  Directed  Rohit Stars Ajay Vishal Bhardwaj will launch  trailer  Shahid Kapoor starrer   event  Mumbai Given     held  many  screens with almost shows    second week starting certified  British Censors  July movie   interesting   writing plays releasing  almost screens worldwide  incl Breaking  Kapil Sharma have decided  part ways  will    floor without Arbaaz confirmed   Directed  Abhishek First look  Deepika Padukone  Homi quirky comedy  plays Angie Presenting  trailer   China release with subtitles Punjabi film  going from strength  strength   intl   better   than   several Listen  Alia soulful rendition  from Diverse genres this Friday  Release chart Check certified  British Censors  July Kudos  director Anurag Singh  handling  subject with Deserves every   acclaim Watched Truly brilliant Captivating Actors Diljit Kirron Kher  Pawan Malhotra Hrithik  glimpse   star from passes with flying Wknd   India MONSTROUS Overseas  approx million emerged Akshay highest grosser  Collects  Overtakes Punjabi film witnessed ample growth with each passing    intl  word  mouth  Rentrak crossed million  Hong Kong  Weekend Rentrak fared very well   international arena  Rentrak EXCLUSIVE OVERSEAS Rentrak Corporation Reliance  launch first look poster  July  trailer  These Twitter Thank   your love This  crosses      days Despite half screen Overseas approx  VERY achieves  HIGHEST opening  figure      India Punjab  Rest  India Riteish Deshmukh consistent with double digit Kudos Tanuj    What  year this  been     Midas nett India Second highest opener   terms  screen Malayalam film continues   from strength  strength  Week Australia surprises with Considering  VERY Despite rating  takes  BIGGER start than most biggies  Collects data  still being  indicate  should   Await final ready   your eyes  lesser  challenge   BIGGEST opener storms Collects   Still Riteish   game    master     excelled   contrasting role Believe   will release  China  hold your breath screens across Dhoom macha liya People scoffed   when  announced  film with rank talking  Karan  STARS opening  figures will come   shocker  This film takes Mohit Suri   altogether different release  China  Will   widest release ever   Indian film Friday trends  East West North   THUNDEROUS start total after  India DOFP total after  India Train Your        Grand this Villain gets  Heroic welcome from Morning certified  British Censors  June brand  track from creates dhoom  Opens   position  open  Japan  Korea director Ramesh Sippy  direct Hema Malini  Rajkummar   Shooting starts Thank  Pinstorm  ranking  most influential Indian  Honoured   part  this elite Punjabi film certified  British Censors  June Anurag Kashyap used more than vintage cars  Since film  been shot    cars were sourced from Siddarth Anand will  flying    Angeles  work   visual effects   action scenes certified  British Censors  June trailer  Yash Stars Rani Grand  India   better than Sajid Khan  make   toying with  Nothing finalized Sajid Khan informs Yash  will unveil  trailer  today Rani Mukerji heads faring exceptionally well  Hong Total after Wknd Rentrak Overseas total  approx million from EXCLUSIVE OVERSEAS best  Rentrak Corporation TSeries teams Yami Gautam  Pulkit Samrat  tentatively titled Directed  Vivek first schedule begins  August Film  slated  release  April will  made   Motion Pictures  association with Saraswati Entertainment Creations Limited  Rising total after  India Train Your    Grand  India Presenting  first song  Riteish Marathi film Wonderful Watch Many happy returns     Have  awesome opens this What  expectations from Loved  first look motion poster    film Watch Himesh Reshammiya making different mixes   from   house  desi    dandiya read crosses  nett  India today Train Your Wknd      India First song  Salman Khan starrer   unveiled tomorrow   cinema hall Another catchy track from  Lucky this    will release   same release  September Directed  Anurag trailer  Watch will have  European premiere   Giffoni Film Festival  will  attended  Amole Gupte Trailer   release  July Directed  Homi presented   Star Studios  Illuminati starring Sunny  directed  Milap TSeries will jointly make entire album with Pritish Nandy After TSeries flooded with offers  only   music  also  part eyes   Release chart Heavy flow  films  coming release  Turkey this Friday release  February Stars Ranbir Arjun Jacqueline Directed  Vikramjit Presenting  first look poster Himesh Reshammiya  premiere sequel  Will  clubbed with release   intl album  which  songs release  September Stars Bipasha Basu  Imran Directed  Vikram Grand  India Marching towards release confirmed  November Produced  Karan Johar  directed  Rensil continues   from strength  strength  Hong  Weekend  better than Weekend which says  Rentrak XCLUSIV OVERSEAS best  superb  Hong Rentrak Corporation revised    Grand  India Grand  India Excellent growth first look poster  Shreyas Marathi film theatrical trailer  Shreyas Marathi film collected lacs  Weekend Grand  India DOFP    Grand  India Train Your      India Phenomenal response   trailer  Salman Will DEFINITELY   records Grand  India Marching towards countdown begins   trailer   Salman Khan starrer Official launch   cinema First look poster  Marathi film certified  British Censors  June cleared with  hours Check   Stars Releases heartfelt Thank   friends   film industry   Twitter  Facebook family  making  birthday better than other   expected Overseas total Week million  performed best DOFP Wknd     Grand  India Wknd     Grand  India will  produced  Bhushan Kumar  Ahmed  Shaira Khan   Bobby Film will have Sunny Leone  play  royal princess   next tentatively titled  first Birthday wishes  Have  wonderful Happy  share  birthday with Rahman concert  launch  grandson Armaan Jain track from Sonakshi Sinha  learn hardcore arts   Star Will undergo workshop before Makers   Star  Phantom exploring  release  teaser   Plan  have   promotional gearing    Cast  crew  travel  Prague  final shooting Stars Hrithik Mukta Arts  appointed  Executive Director Rahul Puri    Subhash Ghai shall work   power  Chairman Telugu film Shares till June Nizam  Ceded  Vizag  Guntur India Better than Abis film directed  Kamal  release  September June gets Release chart Check track from Watch first song from grand music launch event   Rahman  mesmerise guests with  live music Thank  Akkineni family  Reliance team  hosting  screening   made  Truly Each  every performance   authentic   core  enhances  Film  some terrific moments that stay with complex plot  been handled Made  made  several loved every moment Finally watched  hugely appreciated  immensely successful Telugu film With Super India     impressive  Week passes crucial Strong word  mouth translates into super  data  next better   than      India restaurant  Japan  start name  Special coinciding with release there After  Tamil  Star   Murugadoss join hands  Hindi Stars Sonakshi Starts packs  solid punch  Pakistani Collects     opening jumped manifold with each passing   Hong which fared exceptionally well       repeat history  Hong Rentrak which embarked   slow start   intl markets witnessed substantial growth  business from  Rentrak EXCLUSIVE OVERSEAS exceptional   other markets Rentrak Corporation Presenting  brand  poster Overseas rights acquired  Broadband Riteish Deshmukh marks  entry  Marathi films with  bang Watch Nikhil Advani  direct Saif  Film will  will  produced  Bhushan Nikhil  Saif team  after Days  Future Past    Grand  India India FANTASTIC growth India word  mouth working Many happy returns     Have  awesome Stay witnessed fantastic growth   weekend Going through intl data   film  witnessed significant growth   major markets Happy birthday   year ahead  filled with wonderful Stay Telugu film Shares till  Nizam  Ceded  Vizag  Guntur theatrical trailer  Telugu remake Stars Sachiin your dancing  party track  Enjoy  chartbuster from Autobiography  legend Dilip Kumar Substance   will  launched amidst great fanfare   grand event Many happy returns     Stay Have  Blockbuster continues  glorious march   Highest ever single  gross  Akshay starrer that marks  coming together  Ashutosh Gowariker  Hrithik Roshan during  Indus Valley     slated  start filming   last quarter After creating magic  Ashutosh Gowariker Hrithik Roshan  back again with  another love story lacs India  expected  grow over  since  word  mouth  very first song from Phir Tumpe Pyaar Aaya Soldier  Never  Duty overtakes  Thursday numbers  Collects Soldier  Never  Duty storms  HIGHEST ever   Akshay Kumar Eros  release across screens  Japan Sridevi  Tokyo with  Japanese first lady Akie  during  premiere actor will appear     reprise role  Rajesh Khanna  supp actors  director   finalized shooting  sequel begins from    Music April sequel will have Himesh carrying  role  Ravi Kumar  solves After Himesh Reshammiya  start       romantic superstar Rajesh Khanna Many happy returns   Stay Have  awesome India  film that made  mark   good word choreography   styling     simply Varun  Alia dance party anthem This track from  bound Presenting  first look poster  Releasing August Presenting  brand  poster Star Studios  Vishesh Films Stars Gurmeet  release starring Gurmeet starts shooting today also Mukesh Slated  release Countdown Sajid Nadiadwala informs first look poster promo  Salman Khan starrer will  launched next first song from cast music team  will perform LIVE   music   fans today evening   event India Holding well movie  slick that keeps  enthralled  captivated Heavy flow  film releases  forthcoming weeks Release chart Check faring very well  Total after Wknd approx  million Soldier  Never  Duty will   widest Akshay Kumar release  Will open Akshay Kumar returns    screen after   with director  Your Soldier  Never  Duty  other countries Soldier  Never  Duty  release  countries Soldier  Never  Duty certified  British Censors  June EXCLUSIVE OVERSEAS  eyes  Rentrak Corporation Heading towards  India SMASH maintains heroic Collects first look poster  Mahesh Babu starrer first look trailer  Mahesh Babu starrer Looks Watch Telugu film closes Week   with  FANTASTIC  locations   Details  next Telugu film Week Shares NIzam  Ceded  Vizag  Guntur lacs closes Week with  impressive  Emerges  SMASH breakup  next track from Watch movie Charming  entertaining  most movie Expertly with written  directed    Sreeram   Ilaiyaraaja scores  Releasing directed  Prabhu Dheva  starring Ajay  postponed  Confirmed   Eros Many screens Presenting  brand  poster Presenting  first look  Yash Overseas million Highest grosser Many screens highest grossing film  Overseas Soni Razdan  direct Film will  jointly produced  Pooja Bhatt  Bhushan Kumar August packed with Release chart Check Telugu film Shares Nizam  Ceded  Vizag lacs Guntur Presenting  first look poster theatrical trailer   Vidya Balan starrer Watch Eros  release  Japan  June Sridevi  attend premiere  Tokyo this After crossing   crossed Tremendous response  from  been composed  Mithoon  sung  Mustafa Zahid from trailer  Watch latest track from Days  Future Past does well  Collects  nett first look poster  Truly Reliance  Born Free   launch trailer   Vidya Balan along with cast  crew   film will eclipsed    wave   Overseas   managed impressive numbers Rajinikanth  fared exceptionally well  Malaysia   good   Australia Telugu biggie that brings  three generations   Akkineni family  embarked   stupendous start EXCLUSIVE OVERSEAS overpower Rentrak Corporation Telugu film opening weekend Shares Nizam  Ceded  Vizag lacs Guntur lacs India Huge growth Days  Future Past  previews     Steady jump over revenue shoots  over beginning  achche first look poster Telugu film     Many screens Days  Future Past witnesses good growth   previews shower  blessings Happy birthday   year  filled with wonderful moments  surprises that give  everlasting Stay Sharib Hashmi performed  special aarti   upcoming film  Cinemax First Then    Sajid Nadiadwala Telugu film  previews  Many screens Days  Future Past takes  rocking  previews   nett theatrical trailer Rajinikanth fans across  globe opens  HUMUNGOUS response across Tamil Expect  records movie   legion  Rajinikanth this film  definitely worth Telugu film releases across screens movie  entertainer that hits  right Hindi certified  British Censors acquires music rights  Directed  Rajkumar Starring Aamir Anushka Sushant Singh Disney India announces  appointments   Studios Prakhar Joshi will head  India Theatrical Grand premiere  Telugu film  Hyderabad tonite premiere shows   screen release  North comes  with novel promotions  their  horror Just received this latest track from Shah Rukh richer than  Clint Eastwood  global rich list Really really looking forward  Huge  multiplied trailer gives  gist  towering performances  Sidharth Shraddha  Riteish This could trailer   simply Seems like  great story  being readied   Mohit Suri latest track from   Honey Watch Cast also includes Neil Nitin Swara Deepak Anupam Diwali Sonam Kapoor cast opposite Salman Himesh Reshammiya  score Film will    floors next Breaking  Star Studios  Rajshri partnering  Salman Khan starrer Directed  Sooraj Micromax spending close    Days  Future  highest   Indian brand  spend   Hollywood countdown begins   Telugu film which opens this What  expectations from Tiger debut film opens this What  expectations from Interesting clash this week  Release chart Check Many happy returns     Wish  loads  Have  super theatrical trailer EXCLUSIVE OVERSEAS Absence  Hindi biggies hits Rentrak Corporation Good Have  great Sajid Nadiadwala confirms July  release date  Salman Khan starrer First promo  first week another chartbuster from Check Tamil certified  British Censors Entertainment  Stone  opening film  Festival  Cannes Releases June Shah Rukh Khan launches  special Middle East edition  Forbes featuring    cover release  June first song from Release chart Interesting films Check   release schedule  Hindi first look poster  Yash   Dibakar directed  Kanu Punjabi film certified  British Censors Many happy returns     Wish  loads  luck  Stay hits  Crosses  Week    Grand  SUPER Happy happy birthday Have  Blockbuster Many happy returns     Stay Have  super Overseas total million   Australia Grand  Will cross  mark today SUPER from  Germany  Just from these grossed higher than   Already crossed Still certified  British Censors Week Week Week Grand  India Should touch  this first song from Watch will   called winning streak will continue with Wish  loads Mohit Suri     visuals     music   first track from proves Another Presenting  trailer  Watch EROS STATEMENT  Eros International Media  will release  eagerly awaited Will release track from Sidharth  Shraddha remained underwater  nearly seven hours  song from Multiple films   audience attention this Release schedule Check Check  Sidharth look  directed  Mohit will  directed  Remo Will  filmed   Have over Disney India announces Will   floors  July Stars Varun Shraddha Kapoor  Prabhu EXCLUSIVE OVERSEAS continues  Rentrak Corporation first track from  will    weeks before Spidey casts  gallops towards Grand  India Heading towards  SUPER Firoz Nadiadwala denies reports that will move  another    change inches closer   Week  Grand  India SUPER release  July Directed  Navneet Stars Richa Chadha  Nikhil Amazing  expected  dominate  domestic  this heading towards  nett Domestic Super Enjoying  chill    missing Lots  love    friends  family back meet Asif   heading   Times Then watching Aladdin Director Kunal Deshmukh ropes  Yuvan Shankar Raja  score music  Stars Emraan Disney produced  association with Anil Kapoor Film will release  Stars Sonam Rising  Films announce  Shaadi Directed  Arshad Stars Barun Sobti Sapna Shooting  Neeraj Pandey directed Akshay starrer  already commenced   film     theatres enters into alliance with Crouching Tiger Motion Pictures Friday Filmworks  jointly produce Neeraj film staring Akshay Times Where release date changed from August  July Stars Vidya Balan first look poster  Poster Highlight  Kevin Spacey doing with Shahid would love  work with Loved   John John Travolta  watched  couple  Bollywood Includes Loved  opening track Shekhar Kapur offers John Travolta   role   film John Travolta informs more pics updates  check  Like  Facebook Hrithik Pics  Yogen Shah first look poster  Yash Star Studios  Dinesh Vijan  Saif  Khan  release Homi quirky comedy  September with Florida Governor Rick Tampa Mayor  Buckhorn  Commissioner  Higginbotham Hollywood stars John Kevin Spacey  many more expected Anil Saif  Sonakshi Ranveer Parineeti Siddharth Malhotra  participate Punjabi film certified  British Censors  April certified  British Censors  April RANI would like  share  happiest    life with   fans  over directed  Kabir Khan  starring Saif  slated  April release Siddharth Anand recreates Shimla  Mumbai studio  Hrithik  Katrina wrap Mumbai  headed Telugu film  extraordinary  Total after Wknd Rentrak done incredible business  intl Crossed    Rentrak EXCLUSIVE OVERSEAS packs  solid does exceptionally Rentrak Corporation Eros  joined hands with highly acclaimed Marathi Ravi Jadhav  make  Hindi Details   film will  announced announces release date    Directed  Vishal stars Shahid Shraddha Kapoor After acquires  music rights  Mohit produced cross million mark   opng wknd BIGGEST OPENER  Overtakes Telugu film continues  victory march  Week Many happy returns     Hope  have  super    year ahead  filled with many wonderful Telugu film closes Week    Reported Should cross million today preview shows    intl markets  strong  Australia  Zealand takes  super start  morning shows across Eros  release  July Stars Armaan Jain Eros  release  November release  over screens India over screens  close  screens crosses  nett Wknd    Grand  India Grand  India song from Features Himesh   Honey official theatrical trailer announce  release   November release  November Many happy returns     Have  super    rocking trailer  Days  Future Releasing    Tamil keenly Heavy flow  films every single Release chart Check First look  Stars Emraan Director Kunal Slated  release Vinod Chopra Films  Rajkumar Hirani  association with Disney confirm that shall release  December certified   British Censors  April official theatrical trailer  Tamil film Check which   witness  theatrical release  will  open there continues  uninterrupted   Hong Kong    opened  decent numbers Telugu film  opng Reported XCLUSIV OVERSEAS Rentrak Corporation ANNOUNCES  RENEWED MOVIE SLATE MARDAANI Starring Rani Directed  Pradeep IIFA countdown Bollywood flashmob hits Times Eros  release Penty starrer  Romania  April across Many happy returns     wishing infinite great health   Have  rocking witnesses terrific cements India Excellent growth over Grand approx  India Telugu film  UNSTOPPABLE  Features   position   Boxoffice chart this alongside Hollywood opens  What  expectations from fantastic growth   Collects    India Sunday  should Telugu film  fetched  EXTRAORDINARY start Grand approx  India first song from celebrate Milap  Sanjay Gupta  host grand bash  April share your feedback Lots  people discussing    Your feedback Wishing  very happy   winning streak continue with Have  Blockbuster Watch   some wonderful moments  superior performances   Boman  child Punjabi film certified  British Censors  April Chillies Entertainments    appointed Manish Hariprasad  Chief Creative latest song from Apna Featuring   Honey release Great meeting Wish  loads Punjabi film  Bachke  release  Produced  Aman Pawan Gill  Arun  bromance Taran Adarsh launches  Facebook Thank Shatrughan Sinha  receive special accolade Outstanding Contribution  Indian Rahman scores music  upcoming Hollywood film Double celebration Ekta Kapoor  celebrate  success   with  grand Melodious stunning Check   song teaser from Tamil film song from Watch eyes  Release chart Heavy flow  films every Star  Vishesh Films will release Vikram thriller    Film stars Emraan Hashmi Amyra Spotboy  Shringar  release  June Trailer with passes  Monday Nets  staggering  nett  India  holiday will boost Star India  announced  appointment  Shikha Kapur  Chief Marketing Shikha will additionally head Loved  trailer  Watch crossed million    million  Hong Kong continues  triumphant march  Canada  Germany Tamil film  fared very well  Australia Telugu film  opening  Reported screens EXCLUSIVE OVERSEAS continues  Rentrak Corporation first look poster official trailer India Despite cricket performed very well Eyeing  second quarter   Will   witness  upward India Excellent growth starring Rajkummar  Pulkit will    addition   cast Saif   plays IIFA  premiere Anupam short film Went Shopping  Robert certified   British Censors  April official trailer  Introducing Tiger Check Gaurav Verma appointed Chief Revenue Officer   Chillies Entertainments  Gaurav  earlier with Mohit Suri impresses   official teaser  Watch Apologies   making    screening  Watching  film over wishing   very best  their  film   film  hearts  reap  harvest Aamir Khan  launch  theatrical trailer  Tiger launch    event  Mumbai today Honey Singh  Himesh together   Check   first song from Reliance Entertainment  release   Stars Vidya Balan  Directed  Samar theatrical trailer official trailer  Stars Himesh   Honey Irrfan first song from official teaser  Check Films announce  release dates  much anticipated films Yash  Films postpones release   release date will  announced Star India  Vishesh Films  release Hansal  Stars Rajkummar  with April gets crowded with films  more Release chart Check Balaji Bejoy comedy KUKU MATHUR  JHAND  GAYI  release  Director Aman certified  British Censors  April Tamil film certified  British Censors  April Wknd better than Wknd rewriting  rules   game   international markets Canada  Figures official theatrical trailer  Check glimpse   first look  Tiger acting debut first look Karan  Sanjay Leela will clash  Christmas week Telugu film  grossed superb figures     opening Reported Rentrak EXCLUSIVE OVERSEAS continues  glorious Rentrak Corporation Neeraj novel  been acquired  Abundantia  will  adapted Telugu film  faring exceptionally well special curtain raiser event  Rajinikanth will  held this evening  Amitabh Bachchan   chief track from pose tough competition official trailer  Tamil film Check Spotboy announces next film  Stars Karan Wahi   Directed  Amritpal Singh Bindra movie Interesting theme with mature movie Crumbles thanks   shoddy Interesting posted wins over Cinemas increase shows Emirates Interesting Multiple films again this Friday Release chart Eros International  release  international Film releasing Phantom  celebrate     grand event  Mumbai tomorrow Facebook  verifying  official page with  credible blue Eros  joined hands with Phantom Films  actor Anushka Clean Slate Production  Navdeep Produced  Aditya Chopra  written  Habib releases worldwide  August Renowned special effects makeup maestro Greg Cannom  develop look  directed  Maneesh passes  Monday Records  spectacular   India please click   Overseas  link   will find  total international trailer  DAYS  FUTURE Releases   English Tamil  Telugu faring very well  Hong Germany  Rentrak holding exceptionally well    Overseas total  Rentrak crashed completely   international Rentrak have  with lukewarm response   international Rentrak EXCLUSIVE OVERSEAS Rentrak Corporation teaser poster   Star Studios Amole Starring Saqib Saleem  Partho Gupte will share figures  when  international data comes   time Overseas data  started pouring Will  figures   Will Film  rocking Mahabharata will  into post  completion  Abhishek which goes   floors Disney India  bring  Mahabharata    Directed  Abhishek Kapoor  written  Ashok Eyedentity Motion Pictures  Lionsgate  finalizing  cast   which  scheduled   into production  December Lionsgate  Endemol operating under  banner Eyedentity Motion will sports drama  Hindi will  released  Tamil  Telugu languages this distributed worldwide  Yash Releases fetches  flying   India Honey Singh groove  With  from Week More than contribution  from good    thank    nice review release Horror   soundtrack   lethal takes   start   morning movie Disheartening  watch  wonderful concept movie Scares Skin show winning Soundtrack sensuous Sunny Leone movie  tale that ought Tamil film certified   British Censors  March Honey  teaser  With Himesh   Honey Singh Irrfan starrer shifted   earlier slated  release Sajid Khan  unveil  first look poster  during India  Pakistan match tomorrow Film releases Vivek Oberoi   Hindi voice  Electro   AMAZING which releases Pictures  release  India official trailer </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>