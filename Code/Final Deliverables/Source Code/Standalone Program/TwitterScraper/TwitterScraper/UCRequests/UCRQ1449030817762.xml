<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">After taken  crib about  struggles      your need  achieve before    what  really want    call   right  pursue your rules  success   necessarily beyond Learn  navigate through   live Always  high  always underperform      dream  will achieve Dream Love this quote   generalist  very Your major competitor  Wikipedia inimitable  Admire  seminal research   done   people implications  business Successful people have aspirations aligned  they  good   what others want them   good Successful people  They  disheartened  this competitive world which  make others feel short inadequate Successful people make quick stay  invest  safety  this  make choices  keep moving some people succeed  others been asked this question  million   view things make  difference Making money   foremost goal     always  primary mission Startups need diligent oversight   excessive These questions  enough  help them stay assessed using conventional business asphyxiate them with Could this   reason incubation  slowing reason someone smiles this Security officer greeted    boarded  flight from  energy made Over  course  next   answering questions   asked with what  experiences taught uncanny   many students were hassled   same questions that   face  adults back  school Thoroughly enjoyed  open house with children Travelling  pant special about going back  your roots   future starts from mistake most make  that they fall  love with their serious Start them only   have  unique idea which  trying  solve  unique Tell  what  think  this approach    deeper into each question regarding   next advise  Explore answers   critical questions rather than fall into  trap  imaginary Even though changed many answers  certain questions navigated  through   problems sheet     great deal  good because  started with questions    proposition When   beginning  journey     down with  sheet  which    world heart aches   victims loved ones from this cowardly terrorist attack   Vive Past week   been  thoroughly  thank      Hope  have inspired hotel staff   those  turn  blind   faults when they  serious build leaders sure  Manager   hotel knew  were people   room  took  decision  support  boot strapped startup booked  room   star  show   could   lived      bathroom when someone came Comnet decided     first major unlike others  were  start high  aspirations    money Sure though  hope First Customer office   with their smiles contagious Diwali where children come first match stick  smiles  inspiring  touching lives   fellow There  reasons  celebrate holiday Family that stands    good   time thanks  dreamers want   great  just good have  tell this play team  buzz believe  should first take  stand what walk away  nothing changes  after should give   chance This incident defined  management     before      creates boss understood said Here  what  want from  what   want from bully      showed    office every hour   what   next friend taught  that   have something important       others will never forget   nothing things became  that  sing   second that  managed  grab still remember sitting   effective communications class years  when  friend  mine stood   started Gopal  inspirational friend    route  home from showed   significance  inspiring people  deeds love  reading  done   world    taught     also gotten   touch with many mother    role  play  making   Leader   inspired     inspires  Share your Over  next  share many more simple notes from  hoping some  them resonate with guess freelancers  startups  self inspired which   best form  inspiration Frugal  difference between  more with govt  play  critical role  creating    body  knowledge  community  practitioners around Frugal Engineering Frugal Engineering   from practices  MNCs entering emerging Frugal Engineering become  next   certainly  what    what Nonprofits   intermediaries between generosity  social change Laura Back   time when  spoke  TEDx  about Customers Interesting pointers  what  needs  succeed   Read Always make sure   your idea have been sorted before  decide  take  idea   next Having  attitude only hurts your   Always  open  learning personal connect with  problem your  addressing helps   that extra mile when thing every  guide    desired whatever  adversities Everyone hates  overly critical those bosses that listen     sincerely suggest that  change your those bosses that speak with respect  dignity with their those bosses that never shares what pleases good ideas  true  need human Margaret Heffernan have       tools   toolkit  bring about social Beth Simone Noveck your actions need      needs  divide them into world scarred  resource  innovation   solved many know what  favorite renewable fuel ecosystem  innovation Thomas Friedman Even  greatest warriors  wars Everyone needs  team that they  bank Good intentions  going    have  asked yourself agree with  core thought  need   back  basics  help everyone   part Frugality drives just like other constraints    ways      tight    invent your  Bezos aspiring make sure   yourself this title  stressed   very same issue  tackled Minimize  time between contemplation  because what   often have   precise  what   supposed    should  perfect  what most honorable  scientific endeavors will always remain those  your great meeting  guys Comnetians  truly extra Innovation  what   what patents list inventors outside  skewed   worst possible will   each       innovator   practice Develop your will  such  extent that stopping over should never appear  only winning There   readiness among companies  spend    readiness among NGOs  help corporates spend Anyone  throw million bucks create  awesome     creates  awesome million with  idea   disruptive innovator Great customer experience  created  happy employees thus  first priority should  employees need  focus   youth with powerful ideas  will growth story  becoming  trillion dollar economy Thanks Manu  sharing   hope many many read  think about Thanks Nishant   lead that This post  very close    hope many read  think about glad   leaders adopt this human centric approach Employees First Customers systematically kill  through  education there   good  everyone only  wish  focus more    encourage amazng rangoli kids  Pasalkhaira village school made using English  absolutely creative stay always have  next idea waiting productive  focused week main thing   keep  main  main Stephen Covey born only Rest   learnt thru  envmt hence surmountable half  Americans said they   close  said   further Employee First Customer Second  made successful  employees  walked into office  change things accept them   they great when  world endorses  idea that been passionate about  your Studies have shown that  work harder when     question  what qualifies from  Archives types  ineffective leaders    ways  dealing with each Saluting  lone crusaders   changing     river Thanks    best team  Redddy Great management     making problems  interesting  solutions  constructive that everybody wants  work Nothing great  ever accomplished until  pattern know even extra year  schooling increases  earnings Yuan being devalued    much   story this week    nervous reaction   world that seems  lose hope  every plans   carries  thread with  that ensures  focus   diluted   conundrum Unless  company becomes obsessed with constant change   gradual change   worse usually goes purpose  leadership   create many more like  gather  army team mate leaves  meeting feeling  have disengaged  beyond Humans   respect with progress cannot always  back  make     start right   carve   brand need  believe  yourself  matter what  situation  almost always  first step  your journey best with your  People  think  doing  impossible   only ones    chance  doing Thanks  hope other CEOs  taking note  will change before they Thanks they give   much   they  inspired Nice people   becoming Congratulations wait until everything  just  will never will  obstacles less than perfect started thing  admire greatly  young   their heightened sense  tells  they  alive matter which pedestal  reach  never forget  contribution  people down  line  pushed  through difficult idea   outrageous   merit lies   without which   just  scribbled Customer relationships     simply reacted best   analyze their trust quotient  always point them mountain  only  high     your mind will decide that     high   will   climb great leader possesses  ability   through  clutter   look beyond History  always written  grand phrases   present  always about ordinary mornings made extraordinary  individual will passion whole universe  friendly    conspires only  give  best  those  dream  Late  Kalam Singapore  talk   group  Asian startup CEOs      obsessed about   everything Most orgs today suffer from three they    inertial Trust    oxygen   also  fleece that insulates  pace from  volatility  outside When  brakes  change  instant   have  choice     think  options wishing     warm  joyous Enjoy  feast  festivities with your families  friends Mesmerized      mission   celebration   human curiosity  chutzpah deliver What motivates  every morning         chance  challenge  Cheeky replies  retweets your manager made  feel that working towards  larger Find  that   feel become  obsessed with what   offering   employees that  start believing that that  what they really Will check with they have posted Idea whose time  come  unstoppable crosses views Thanks    crossed million views experienced  power   when  million people joined  call Employees First crosses million views    giving wings  ideas that shape many   understand your relevance  your    would love  hear what shown that  continue   besotted with past laurels find yourself cornered    there once     worked like   make   great from  lucky  have worked with some   brightest democracy  good   then Want  make your employees believe  your vision  strongly have  find ways  forcing     that your take change  wish    your Inspire people   what they want  rather than what  want them Bcoz they laugh  agree  your mean Would  jump with your Manager   asked Thanks  know  believe   help  spread Life  meaningful   have  idea that inspires Speaking about this  France  indeed special Millions  employees walk through  Orgs  just   paid    inspired   vision  have HCLites taught    lesson   succeeded because  heard Spoke AIMA Business Responsibility Summit   need  businesses  evolve  social change that when   employees     they will invariably  children  rarely their leader   Make your employees dance with  dance  your Thanks  your kind words  Times Means   considering been     your work  human motivation want  transform your   traditional  creative need employees  bring creativity enough   company  have compttv advntg     time needs  evolutionary advantage over faculty  facing  grave skill  views  this burning Chhattisgarh   Chief Secy  fully behind  initiative  reach schools Chattisgarh  launched several programs  enhancing academic scenario   state  proud  participtng  this noblemission Raipur   tour  some primary education     youngest states   aspirations make  Every effort every gestures start these EnvironmentDay Sampark  unique pedagogy methods  helping more than primary school kids embrace education once India nearly children complete primary  scary thought   nation that aspires Sepp Blatter case  reminded  once again that  only    doing exactly  passion  takes  make likely   anywhere close  your aspirations  ambitions even years from Only       fulfill your dress with  many fascinating people  exciting adventures  embark upon biggest myth  corporate success  that   push yourself into  next That never  have   pulled child rearing   level just  series  interventions  ensure  child fits into  mould   society   born passion will always    same spot growing   with passion will never    spot     world grow tall time   stands     acts  improve look around  will find that waiting   discovered  every have something important        that people never forget about trapped   quick  world that seeks quick quick cures  quick results  unfortunately even quick romances Unlike  past where being  today  leader   equally contribute with ideas greatest danger  most     that     high   miss  that       reach Michelangelo Snapshots  myTedX Talk encouraging  generation  leaders traditional models  inspiring managing Thanks     great Spent  interesting  with  organizers   getting ready   Talk Hope   some   there Marseilles today  speak  TEDxAIX     inspiring environs What  some   your manager  done which mattered that  seem  have figured   battle against child   time  focus   security  education worldwide mortality rate  children under  come down  nearly   many  children  being saved daily Teaching  always  exciting know your Happy hope  worth  Amit willing  give   safety  status   live    your ideas  cannot expect others  follow breed  sales guys need Their conversations paint  masterpiece  front Gone   days  striking deals   Golf   breed  sales guys intellectually challenge believe that mgmt  concerned about them   whole person  just  employee  more more prayers      victims   Stay safe everyone  keep quick dash  London  help with digital transformation  read  interesting  suggestions just thing     venerate  today start work  instilling  duty  stewardship toward  envmt  them days  relying   workforce  challenges    deep    minority   workforce glad  liked reading Employees First Customer     much more than just Leaders often wonder  motivation   despite high Rsrch shows that  employee drivers have nothng Happy   campaign  support  digital literacy  women will happily    just   this Most incentives  meant  compensate people rather than  drive  certain type   should   other give your employees    cause higher then they will  only work   they will Employees demand higher ethical standards  their will  watch  hand   cookie Consumers  they   through  marketing slogans     what     what Feeling trapped  this quick  world that seeks quick quick quick Read this tour  Uttarakhand where Sampark pedagogy framework  been proud   enthusiasm   schools wonder  great people practices  still considered  secondary subjects  most Research says that orgs  great workplaces  more successful financially  outperform standard market indices   factor Making  leap requires  creative mindset that   challenge that industry innovation   become world Gary Hamel     chat with Forbes TEDTalk marathon mood   perennial favs  Simon take   leaders inspire Which  your  TEDTalk Young Turks program   flight provocative thought employee first customer world cricket team Saina  once again that unbeatable leadership   about passion simple truth that Managers need  always remember  that employees care  much  know until they know  much want  grow fast   behaving like  argues  friend Haresh  this very intrstng Time  always  constraint thus successful companies  leaders learn    maximizing  unit  their intrstng conversation  mgmt best practices with today Most ideas good ideas walk  great ideas they just  which  annexed  world could  share  link with cricket lovers sure enjoying    think will emerge     this year about    about  life influencing John Maxwell need  their management practices  that they become come across  great leader  attributes  success   leadership Carlos Gohn  recalling   transformation journeys  undertook   respective companies your team  happy with     happy with then   surely your collective little  celebration   life time  selfless love  give   many Thank      wonderful women  this  celebrate your awesomeness spend time beating   hoping  transform  into read your book some time meter Olympic athlete trains  years    race  less than seconds  enjoys every minute  that year People   passionate about what they  never have  worry about founded  started  There   right   become  entrepreneur What  been  most pivotal moment  your career that  either learned from that   where better sight  that   smiling Sampark  made even Maths  happy exprnce  schools Mgmt consists  getting   accomplish  Leadership   inspiring them  contribute their best Which side   mostly collaborate have  sense  community  reach  goal more quickly  easily because they  travelling  each throw complain about stumble  climb over  build with William Arthur Ward make innovation both instinctive future usually gets invented  newcomers rather than Heard about severe cyclones hitting  Australian coast Stay safe      near  affected    praying leading high performance teams please watch this interview with  Gary Inspire  must watch aspiring  what Addressed  gathering  global leaders quite    this company philosophy excited  India time  India    excited about India  must dream bigger even  most admired companies often suffer from three Catch Gary   interview with   being telecast right Repeat telecast   today must establish  cadre  companies that   most Mumbai session   India with Gary Hamel Congratulations Sahana  winning  India with Vineet Nayar Gary Hope  enjoy  special evening small decisions  better than decision Empower employees more decisions Raipur schools implementing Sampark group  very resourceful tribal women   strtng  disruptive   enterprise travels  Mumbai       attend this congratulations  your anniversary would like  attend this  Mumbai listen  your inspirational    about watch   tweet tomorrow    invite  this exclusive event After next step Mumbai    Inspiring India series with Gary watch  video recording  this exciting dialogue starting today Yesterday brought together renowned management guru Gary Hamel  myself   session  India World  management thinker Gary Hamel     workshop today  select CEOs  INDIA watch Gary Hamel   talking about building innovative organizations tomorrow  streaming World  management thinker Gary Hamel     workshop today  select CEOs  INDIA Joining    inaugural session tomorrow will   friend  fellow mgmt renegade Stay tuned  this space  more Inspiring India Series   dialogue forum focused  enabling aspiration  becoming  economy over  next decade SPAC aims  infuse disruptive global thinking into  country  collaboration best thinkers through Inspiring India Series needs     centre  this growth  economic blueprint  only  digitalized India  ensure  truly inclusive However   exhaust yourself thinking   punches that  hitting  will never notice  opportunity when  comes your like  boxing have  wait patiently  blows  your stride until    opportunity    knockout punch staying within what  safe  Once  find  what      something easy  fall into  trap  assuming that  only    take  right every employee   small share   company they work   have inclusive growth rather than wealth   cost rich have  demonstrate more compassion  including more people  sharing their success starting with their employees have  issues with people getting richer however    cost   bottom half   world Oxfam study shows richest  trillion  against trillion owned   bottom   world Children  many parts   world walk more than  attend  Davos match their steps HongKong today   role   Advisor    APAC impressed with their aspiration  annex  west with their innovations Digital India   great However  would need disruptive innovative thinking  make  really work  every Congratulations  completing years  enjoyed  debate    digital Hope more converts join   this NewYear  that   start chain  happy smiles   world fatigued days back   thrown  find many except best protection   Wholeheartedness    wish   Seabury something crazy  know what     that makes  careful   legal Evry  done somethng   worked  just share  experiences once  hear spectator  your  were born  perform   just  were born free    slave  others expectations create magicwhen   what others yourself something  start things will follow create magic when   what others yourself something  start things will follow Last week  Sampark Team presented    batch  schools  Uttarakhand Employee should understand that organisation will outlast thus build options  constantly adding  skills Transparency    building have  give reasons  employee exit  others  they  could  treated like this tommorow When organisations compete  motivate engage  just  matter  time   results  show steep Mercedes  perks   talent  India  Happy   focus back want   successful  need  take decisions make resolute choices rather than thinking feeling Life  like  painting which requires   take decisions  every like  choice  subject Action Stay Relevant    creating   already Action  running  solo Make  what  have  what  wish Action  more decisions   step    more successful  would Action  only person  needs  have  interest  helping   Self thank  everything  write   encouraging  thinking journey  definitely started Great read   timed  better read    inspiring guiding Action There   instant trick  jump    traps very proud moment    your Chennai function  always this feeling  being Share with  Actions that worked feel Trapped   wrong trapped  wrong company   wrong boss  feeling trapped reasons  just sending  from  read  including reason   smiles   faces  many  need that little  make their lives Glad    philosophy profiled Preparing  casestudy   part  Maximising Your Leadership Potential  best What hppnd inPeshawar  beyond world needs  Civilztn needs   failed   race either love  hate your boss always makes  breaks your Read    change most ineffective bosses  Insecure  Boss    deal with Refreshing  meet young minds with  desire  change thanks  pointing either love  hate your  boss always makes  breaks your  More kind  bosses think they know  assume they  only ones intrstd  glorify their past Second kind compete with employees instead  motivating them  inhibit great ideas because  their  insecurities First kind make decisions until they gather  data   paralyzed  uncertainty safety  status Three kinds  bosses really suck Take   with grace  downs with patience  life will Cherish your time  life before  just becomes    race  want    feel  wind  your face Addressed senior execs  Orange with  eagerness   team  learn  ways  engaging employees  delight customers There  very     world   building   becoming  place  such contemporary debates riveting beauty  history  College  Bernardines   enthralled Addressed  hall full  management innovation seekers  College  Bernardines  Paris jour  Paris today  speak  Societhics  College  Love this city   stimulating enough money  sustain yourself   what would   doing   answer  this ques lies your true just counting rather than   already world  operations  dying because technology does   better   operations  does  even    salary world   dying  people want   managed running  solo race     will   life depends  what  will  with what  have   what  wish What Truly Motivates    Something  what Thanksgiving   time   grateful   that  have  also  spare  thought  those   lucky write very well blog  Traps that block Corporate  reprinted   last   read Recognition   just   enriching work lives  giving them  chance This weekend challenge yourself with something  thing  could never Delighted  meet with  friend again today   leads with  great meeting Enjoyed speaking  Mashup   pyramid  experiment Folks     catch     Mashup   always this cold Back   take   class  more than teaching  always look   being taught   bright sparks   class with  pleasure seeing  again   best   book approached       French  German Really impressed  Great perspective   leaders drive Really impressed  Great perspective   leaders drive agree vision   enuf  energize    needed   vision that captivates each employee  want only      your insecurities   embrace your weaknesses  leverage  strengths  your team Insecure Managers harm themselves more than they harm others  they become    negativity which ultimately spills companies that lose their relevance find   tough break    Continuity  blog listening  your podcasts  video blogs should Planning   website  tell  what kind  content   like read there which most workplaces leaders take comfort   past rather than getting excited about  uncertainty views  preparedness  Indian  Industry  handle changing dynamics  tech kind  leader that people will follow  their  even     title This Diwali lets  that there  many   struggling   their     light Chicago this Missing  Diwali lights back  Fall beauty   Midwest  some consolation Thanks    mentoring Your mantras would definitely come  handy   course   best Catch   CNBC Young Turks Program Tune into CNBC tomorrow  hear  mantras   aspiring Stop playing safe   Take some  some  push that dusty Unless  shut  door   cannot make Everyone   Some units  spent  doubt  Success happens when  latter original thinking  getting rarer   witnessed  best   Thank spent with    MAGIC  life cause must     change  change will     Mark Victor Hansen honoured   mentioned with         your This Audi   small token  gratitude   staff  community  Campus School Audi  named after  mother Janak Nayar   herself  distinguished teacher  this splendid Happy  share that  wife   built gifted   foot Auditorium   alma this  fill your life with Joys like that   juicy Kabab with lots  Chatni life   reminder   supremacy   inspirational idea   true synonym  leadership Luking  speaking    Forum being organized  Blackberry always interesting  engage with  Industry enough       question what   busy Henry David Thoreau congrats   proud moment  Indian  know    role thanks  wishing    good times Thankyou   gain from your energy Congratulations Inspired  your nice  hear gret admirer  yours  have been keenly following your  rock Congratulations   well deserved  have remarkable congrats  just   list   represent India Asia have Congratulations   truly deserving thinker  leader       need  just find proud moment    congratulations  thank   being  inspiring thinker Great also  dream   more CEOs   thinkers list  build competitive advantage through when   Thanks Heartiest Congratulations Vineet Truly  because  rockstars like there   person  this country  deserved Congratulations  indeed  very influential thinker Humbled   ranked amongst   Most Influential International Thinkers Very happy  know that  there      huge Success   cheapst execution  reiteration   belief that magic happens outside  boundary Wonderful conversation with Hopefully  lucky  have   South America   near Recipe    about  about today  from Brilliant   thing  look     potential hire That  thing  look     potential hire Today  Twitter group crosses thinkers  believe  inspiring  being time speaking   Institute  Auckland heartening managers across  world embrace idea loved your humour  Thanks absolute pleasure  have  Delegates really enjoyed  session Thank   inviting   speak  wonderful session  what   future hauntingly beautiful rocky  shore refreshed   driving back  Posting some     enjoy this paradise Aftr flight  Delhi Auckland airport hired   north without  plan   breathtaking road time   favorite country  Zealand  speak   Leadership There  very  places  this world  beautiful   English reach     interview request Back    London   next  days  speak   McKinsey Leadership Every person   leader within   just waiting willing  give   safety   status   live    your ideas  cannot expect others been blessed some amazing teachers shaped  wonder   some  have such   impact easy  fall into  trap  assuming that  only    take  right just need   catalysts like   change People feel inspired only when   help them discover what they want     what  want them Reading  frnd Linda newbook  guide  building innovation into fabric  your worry about  definition  your  crazy ones never Every time  read  Apple  inspires   over Wish   inspired week ahead frnd RamCharan makes some   here   economc strngth Missing  mountains  beauty  encountered   Himalayan trek last year mind there  many  mind there  blog    tapping fresh feed  hundred then feed just Mother Teresa create magic  your life  things others consider AHRI Convention audience outside     where  magic happens Melbourne tonight  speak   Australian Human Resources Institute National Convention things  help  individual more than  place responsibility      know that  trust Washington helping thousands  children across  country learn Maths thru easy methods Create  culture where leaking pipes  transparently shown   employees  that they  feel    achievement  fixing hero    family   made  touched  will miss DigiTour brings YouTubers other Work Really  forget  have   your Your Goals  wait   Enjoy  weekend folks Lead your team though ideas   your   true Satisfied employees  there  engaged employees  there some fuel rest    play  your strengths  stay Have  inspired week Ensuring quality education   though scalable frugal Mubarak  love  happiness always  with Indecisiveness     worst managerial  poor decision  always   decision will always session Leaders have  thinkbeyond boundries Managers create circles  power while leaders create circles need    change  want   cover story interview  Observe managers motivate employees  compete with Focus your energies  putting  shine  your  outshining directly interacting  serving  customer then your business should   serve someone Chennai today  address  group  Always love coming  cities    that salty breeze  just something Life   short   chase your  step Step  Take more believe  else   consequence ofhow employeesfeel when just tell amazing answers   question were your favorite lessons from this What were your favorite lessons from this While great  have exceptional individuals  your  exceptional teamwork that Germany have  your someone will reach    next Revolutions happen when leaders  able find that innovative idea which they  leverage lead just hope that  good intentions   matched  great execution Union Budget  provided  fresh wave  hope   country  focus  inclusive growth  vision Leading  like rafting  turbulent Everyone does their  stuff  there  significant trust open that your mind sends   integrating into admire strive  improving education sector here   first  Fellows  geared   chase  million batch  Fellows completed their trng head    project sites from    start young Hope  watchng  Final match  some crystalball country   think will take away Research  Carnegie shows that only   success    technical Indeed    more important than Reducing  bribery   departments associated with  ministry  least woul proposr resolution  patliament    thought  retrospective What would  your focus areas   were  Finance Minister investment  manufacturing infra sectors innovation  healthcare sure  your team  them fall  love them believe that they have  power things  their hope Indian govt pursues innovative change  grassroots  fall  branded initiative that   from hear    talk  very  innovative ideas    give  children right   life through education Does challenge  lack  access   child  jobs REALLY have leaders children     school   skilled   what could   bigger happen only when institutions providing education    responsibility than nice    sharing Education today needs   most importantly Speaking today   innovation  teaching maths  children  Punjab advocating Speaking Global Partnership  Education conference  Brussels that brings global leaders  education only repeating what  already      learn something McEvoy Agree   have implemented  TriFinance assure  good  thanks hope  adds   dimension  your leadership Wonder  only achieve their because  rest give panel discussion with CNBC this week  shared  budget enjoyed  conversation  hope   positive action  Govt that redefines what India   will Great story  Putting employee empowerment   heart this interview with  Magazine  talk about  culture    competitive Megaphone mgrs have thrived   want their leaders  change they looking rolemodels  task Miss  terribly  such simple words  enormous wisdom  Hoping employee  people want  fair play   place Exciting  chapter begins  wish them well Vishal will lead them   very best Digital   future  Indian  bring   perspectives needed  Infosys  more relevant first word that appears  synonym search   word   real life  should leaders managers important  your  realize that your team judges  more   intent  your Leave  world better than  found Every action  preservation Start things   passionate about   They  your Life   bouquet  happy moments bunched together waiting    Union Square leaders launch into ideas   better tomm preparing grnd  need  change  that very first  most difficult step towards  transformation   company   accept that  need Mrng getting ready  session annual gathering  Groupo leading retail Mexico today early morning coffee   batteries revved   full Great   India   Modi took oath with  team   glorious   best  Modi   with cannot beat Sunday brunch   when  weather  Wish   great week ahead Dylan  become  father when  recorded Wishing   young weekend from There  very  cities   world which look  beautiful    summer Next Wave   Boss  Good What  need from   Indian government  Kitab  dukan education each time  treat your fellow colleague  subordinate   worthy  your   choosing  human side Honored    Switch List  Human Business enriching   many bright youngsters   role   Jury  Economic Times Young Leaders Program today These   just Election  united voice   nation saying  need need need  move hope team would define  drive collaborative action driven  Purpose Delighted  hear  your convocation address Honored  have delivered  Convocation Address Tata Institute  Social Sciences again   Graduating Class Thank   such  inspiring speech    inviting case interested  will share  views   immediate priorities    govt  BloombergTV This article     effort  reach young achievers excited  working   social creatd outside      neither logical  hope  create incidents that have shaped take your success   only thing worth believing   your ideas  Rest   mortal There   easy  tough questions still need Happy weekend Stop  spend minutes watching this   rest thinking about Your responses  post made  realize  simple  expectations  from good mgrs   many  them still Thanksfor your generous response   post Your comments were such  Keep them What  that  quality that  admire  most  your favorite Insightful lunch meeting   Peck Office  Govt  Singapore Waking    sounds  birds chirping  wonder  this Theme   Magic happens outside  boundaries  logic reason Keynote  session book signing    address   bureaucrats   eight sorry already     airport Thought provoking words   very thoughtful Singapore today Mumbai tommorow  delhi signed book from leaving today after  suite presentation   minutes truly motivational talk  employees customers Enjoyed   plan Relevance  your offering   customer    measure  predict future growth Happy  seek your views     measure  predict future growth india should cancel code share flights with      airline chief  this Singapore   meet chairman  another  travel your   would anyone What   thinking when  planned have  learn sure there would  other opportunities good leader takes  little more than  share    little less than  share   Arnold  Glasow Good luck Thnk    enlightened read employee first  employee   inTransformer enlightened read employee first    Transformer quadrant  best That  Justin    hosting this  making this webinar Listening  webinar  creating high value employee   just Join  webinar TODAY   create  high performance   putting Employees forgetting every once   while what your position      then spend  rest    earning  back some teams  organizations succeed  others Join  webinar  create  high performance   putting Inspired leadership  about getting    what THEY want   what  want them Relaxing Lunch  Paris with  frnd Richard  most accomplished Interview  Claridges interrupted  fire alarm   consummate enjoyed fire side Being Jury   been  article  worth  weight   maintng high stds Once  will   easy hire  French Chef  cook Butter wonder     taste good What   aspired  What   elbow room   leader will have  execute What  appetite Turn   down    most  issue that  want addressed  this Consider this vote  perhaps  most  vote  will ever cast  please think Excellent session viewing more than thing differently after listening    thank event hosted lively debates  future   humans center   build more Transformative leaders Spoke   International Conference  Annual Meeting   Association  Advance Collegiate Schools  Business today Thankyou everyone   inviting   keynote  creating high performance  through Employee Customer Thanks  valuable insights into transforming  organizations Purpose  most unacknowledged Ever wondered what makes collaboration seem  natural  home  unnatural latest blog  talks about that  thing needed  successful collaboration first problem  have    primary education  that  enthusiasm Hope  planning  vote this What   primary criterion  look  when choosing searching  that  person  will change your take  look Humbled    Experts  Twitter Thank    being equal partners  this journey time  come  expand  public education agenda from focusing merely   plus your Research says that children  unable  write   basic maths despite  them having already spent   school puts EmployeeFirst hope thingsup Bridges   beautifully   captured deep   Himalayan valley last summer Mgrs shud      inspiring    someth that they never  have thought themselves  capable Posts   Week includes first  episode  make would someone learn anything unless   First  then   interview Workforce Enuf  warriors time back unique attributes  women professionals that make them better suitors   century leadership Beach  beginning  lovely  begins blessed  rays  settingsun without love  Mother Teresa Adversity always brings itself    accelerate   African proverb seas   make skillful Miracles  happen when  come  sparks largest crowdsourcing Wishing   your loved ones  very colourful  joyful Have  today Back   road    Hope    shining   Enjoy your weekend your  best  need anyone  channelize your Just look there  enough broken Walk   them another artifact that will hopefully prove once again that Being Interviewed  Martin documentary titled  where  discussed EFCS  length secret  turning your company culture into your competitive what  world what makes  come  Because what  world needs  people that come Celebrate  support  celebrate them today  every Today take  oath  stop exploitation agnst women  neighborhoods This piece  wrote  sometime back celebrated   women   large impact cricketball broke   tied    that    next  broke  again Watched  frnd TEDTalk  again What  deeply insightful Which  your  TEDTalks very successful billion dollar entrepreneurs tell  where   opps  also reveal their secrets aspiring entrepreneurs  watch this session  next billion dollar rocket  hosted somewhere along    left behind this   discovering   sigh employers   employees first make  look stand here with till    back  your Getting ready    laptop    book hours will Have  ever wondered   prefer airline over  other when  aircraft  actually   sameBoeing answer lies Amazing insights  improving yourself There   sight more beautiful than that  little girls going  School Missed  Google Hangout session with   watch agree with What  some    books  have only read  books that everyone else    only think what everyone else  Haruki Murakami Read  learn    yourself into  service  others  bring  their Memories flashed    recited  excerpt from  book First Customer   today Enjoyed speaking   always  high     company  books  book book lovers catch    Delhi World Book Fair  Pragati Maidan Hall  TODAY give  organisation  right  motivate   should  responsible Today whoever   idea   will want    only because  have  idea which they align your value proposition aligned   most  problem   Think about solving  most  problem   customer matters most  staying Thinking aloud Looking   Hanging  with   hour from   Send your queries   tune into Great video with running   same direction Create High performance  first keeping things simple  uncomplicated inspired leaders should think   just incremental Indian  sector  needs have stopped thinking simplistically interview  Ethiraj  what   industry leaders need  think Good fortune makes   creates  story    tell another more companies   indigestion than  starvation billion dollar rocketship mantras wait   ecosystem   built build  yourself billion dollar rocketship mantras already late billion dollar rocketship mantras Enjoyed hosting  discussion with  billion dollar techpreneurs   block grandfathers inherited  inherited   dear frnds have inherited   Embrace trying  clever  will surely   honest employees will respond  your strategies even  they Congrats   great stint   very proud thing your team wants   stop doing today  important because   exchanging    your life  Hope  made  worthwhile chosen SatyaNadella will make       bold disarming mind wired  faith   power mentioned    book  have coming   Wiley   future  look Thankyou everyone  wishing    happiness   million Ravi   friend   friend  always right right    trick pony   need platform based services   next move Absolutely  believe  company  grow unless   works hard      that will  company have always believed  focus  giving   have  that  idea which  most important entire experience  being   presenceof some   brightestbrains   country however  best  Indian   look  emerging opps challenges ahead rather than  achievements Indian    pride   country   have created from  scratch  industry which employs over India  lots   lacks  leadership thus manufacturing smart devices   dream bigest myth  leadership  that   entitlement    right  earn every change  been brought about  employees    person  take  credit written    however  guess   serious note  should   national need  have  disrputive vision many actions  goals  reach reason  poor success   cost technology  India  bcoz  focos  cost   innovation wish    ques   However  first step  leadership that cares   issue nextgen leaders should think innovation before people before utilisation think product before service traditional  structures  obselete   attuned needs  innovation   fast changing world case  want  pursue trtansformation  need  passionate person  huge ambition  ideas beyond techOrgs  shown  trmndous value canb unlcoked thru collaboration ratherthan shud learn there     book that reveals  breakthrough idea becomes leadership     aspiration   least  dont leader  definition   person    idea  digital presence helps  sharing  further  that idea competition will  innovation   group  very smart  located country does most  leadership lesson   learn    when  know  dont have  ideas     entitlement Million Smiles  attempt  large scale social transformation  working with  through  system should   Vineet Nayar when   Each     born seeking greatness through  uniqueness leaders have  surround themselves with digital natives   instead  leading have  obsession countries  start obsessing should   core focus  orgs ctually  consider   country becoz  fast adoption  digital  increase competitivness there   there based  your objectives Look forward  with     minutes hosted Look forward   exciting dialogue with    right here  today   hosted great   amongst  guys wishing   very best   make world  better Aways   visit birthplace   favorite coffee Looking     engaging dialogues evolve  synch with  concerns    believe issues would deserve  entire Even though  program girth  over  last only topics have pretty much defined Meeting people engaged  social transformation through innovation  always exciting  energising Seattle  talk   leadership team   share  learn wish India  future where  strength  arms  matched  sensitivity  less privileged  pride with purpose very excited  have  visit next Looking forward world  getting better indeed  rather than giving    problems  should have faith  continue doing    solve agree more with  myths that block progress know where your value zone really discover their  accept responsibility Customer starts with  complete understanding     value zone  their best taking  first step even when    whole Ganesh  think  office  Sorry  will   able  attend because   commitment What would    could  whatever  wanted   Will  chase your dream Will  give  your starting point  organization transformation  building  environment  trust assume that employees  excited     company  excited Life expands  retracts  proportion  your dreams  make them make them make them What inspires   person        purpose  creating  million Visited  campus after  were great talking Three  differences between  Great Article Many     changed from being      Hear this girl  mins  will understand Asian Business Leaders  Follow  Twitter  incl Paul received award hclite attended felt  missing    inspirational Every    rare chance    person  always wanted more Thanks  practicing   then writing about   clearly  again including Customers book  your Reading List Thanks indeed  reinforcing  compass wrote this blog inspired   deluge  best wishes bold visionary experimentation    very best  your exciting thanks wish   best happy  year wish   HCLites exciting energized years ahead dedicate   journey  each     guys inspire pursue  dream  creating  thru Sampark carry  goodwill Merry Hope your holiday season  festive  full heralds  shot       forget theonus   country lies  each   shoulders people  make   other  around that realize that will  left Create  sense  More than  idea    must  driven essentials  remember when leading after showed  mirror society little  chngd because   waiting else  change  want love strength   woman that makes this world  tolerable doomed   respect protect this truth Awesome audience  standing  their chairs  part   exercise  show leadership beyond logic Leadership   right  earn from  employees  shareholders    ornament  halo  wear based  entitlement Excited contribute  bold Highly recommend  platform  genuine thought leadership content Have   yourself what   actually stand Unless  look outside  beyond  distraction   will  even stand  chance  getting  your Embrace your Focus  that  thing that  have which   else realize their Only  people  able  realize their original What  these When   corner speed   slow  past  challenges  then find open room Acknowledge your faults  build teams that  unafraid   truth important      that people will never different things rather than doing  same thing Someone  there  waiting  throw    train  believe  have  only  take Knock knock knocking       friend early this tried  that   Response  crisis   what talk response  crisis      panic   inspire team with  bolder dream Once   verge  bankruptcy Samsung  this  poster  their offices that they would  bigger than Sony Getting ready   like   platform share what works  leadership practice Your work your words inspired generations with their message  courage towering figure   leadership landscape   times  left   better place  world will never   same again Leadership  hard   means different things  diff   always meant only Words Martin Mandela Your mins could change  destiny  step   your houses   that   your fingernail Cast your votes today Delhites    change  want real measure  your wealth   much  worth   lost  your Earn respect  touch lives Magic  created outside  boundaries   this stunning dance create magic internet with your tension between those  would share knowledge  those  would misuse Enjoyed speaking     India Economic Enclave Pushed   need  increased accountability  transparency  governance express  must  forget that  highst appreciation   live folks your tweets really help find  righ tune amidst  Thank wish find   noise around your head down will find your song  beautiful recommend  read     full Report   downloaded feedback views  also welcome Being  Advisory Board member  this been deeply enlightened   focus  critical issues     talent INSEAD HCLI launched  Global Talent Competitiveness Index today which focuses  talent   determinant  country competitiveness were born unique   reason  that   unleash that uniqueness  create magic that  world  never seen There  billion other humans  this planet however there  only    what   plan   with that unique distracted  daily   look beyond  noise elect    vote What  amazing send    great soul  live   hearts  people  have inspired have    your terms looking idea    young  late Read  what  takes     that others WANT   have industry will have  transform itself  retain  global   interview with showing   passion   dreams  chased   crown  success  worn with humility continue  inspire  transform   better more power journey from     Social Innovator focused  inspiring large scale social chronicles Sampark aspiration  bringing about large scale social Magic always happens when  think       your thanks  million   magical  life altering speech Loved   rock Enjoyed spkng   Theme   always been close    happy     intensely debated Delhi   reminder   callousness  show towards  Every action  people   more Respect  women must become  high watch this short film  Anurag Kashyap mgmt     making prblms  intrstng solutions  constructive that wants  work divine light  Diwali spread into your Wishing happiness  good health    your need external stimuli  motivation  have  found your passion Find that first even  takes afraid  stand apart from    step    comfortzone   ideas  believe Interesting article leadership lessons from some very inspiring women There   much beauty  this  only    time  admire never knows what each   going   important thing    open  ready  Henry Moore Food  thought    search   challenge   Both exist  abundance around four most important words   organization always been partial  smell  freshly brewed experience  reading   magazine  difficult replace Looking forward  speaking   American Magazine Media Conference being    employee   proud  have worked under your leadership   worked with Hope been able  encourage them  think differently push  boundaries  logic where  real magic inspiring time hosting  Inspirational Leadership Workshop Such enriching discussions some  brightest minds Happy Dussera  Shubho Bijoya      your   good forces always prevail over seems like   having lots   amongst optimistic people   have   from their Leadership today  changed from providing   answers  asking  right questions nominate yourself  telling    think  deserve this seat  Workshop Leadership Workshop being organized raise funds Sampark keen  sponsor aspiring women leaders free  cost today  address  young Young always  inspiring    midst  such talent Want    share   what social impact   creating   shld attend sponsoring leaders driving social change  workshop  Inspirational Leadership Building leadership capacity  orgs focused  creating social impact    focus areas  Sampark Foundation about  twitter contests  free passes   Mumbai   open  ideas your book  truly  masterpiece Thoroughly enjoyed   keep referring Unless  company becomes obsessed with constant change   gradual change   worse usually goes intrstng chat Maeil  Heartening    interest  Employees First philosophy   many diverse cultures movie    romance through  hand written    remember falling inspire  team  perform Join   find  answers will tweet  before   your interest configure  team into  high performance Join   find  answers plug into  heartbeat   Join   find  answers learn    Join   find  answers there  just  thing  could change about your work what would Great leaders appeal   higher purpose  every individual becoz people will   extraordinary lengths   causes they believe just realised today  same easy  learn from   grasped  idea than  preacher first  customers gave   whole   insight   aspiring management realized that  that  much more enjoyable  learn from another learner rather than from   claims know have possibly learnt anyth from   very fact that  called herself  learner meant that  could teachers  school used  tell   much   learnt from  class believe that something wonderful  about  Happy weekend folks Read  insights into   lead   Vineet   passion  developing leaders  every best After years stint time       awesome young heart leader minutes   truth closest Hope this unfortunate event marks  turning point   sense  responsibility towards women what    when turbulent times begin  creep  through  back Intrstng report  Brookings   relationship between parenting quality likelihood Folks   spkng   Schultz Seminar   More Humane   Hope  catchup some   there Happy Ganesh Chaturthi  Lord Ganesh bless  with good sense  choose compassion over peace over hope over Weekend  honest straight   short  playing great influencer  inspiration  people like Always looking forward  your Quest  bold passion  people   heart  touch lives what keeps  alive  social Nice   this  best selling books written  CEOs  great list Turbulent times needs inspirational people  influence  Earn respect great   Mumbai talking  Citi Bank Leadership about Leading  turbulent times     time that achvd  life  bcoz   have taught     some like  mother have been teachers life about   about business Must read intvw   current challenges Good evening  have quoted     review  Julian  book view   future    world  what  call service about about business  interview  Hindu Business Line today Great article unfortunately   understand When Leaders Lack Compassion Could  leaders  reflect problem   trying before solving    election year  what this mess  have  consensus   Security this Oped   makes some great bright  slogan  fast losing      burning Tried very hard  look   positive news   India newspapers  could  find Even  optimist like   getting interview with    Sampark ambitious project  transform primary education Tough laws enforcement required safeguard  dignity   cradle    better half   billion need  ensure basic respect  human life  dignity first before  dream    resurgent There   many people  this world  focus  just their jobs  their With HCLT well      destined   time    focus  social when     butterfly  interview with Deccan Thought provoking that hold female leaders actions orgs  take  overcome Powerful ideas  simple   watch  share  Employees First idea  this minute Employee  idea that transformed HCLT   apply   your work place  view Ninety percent   time will   being  catalyst  bringing social Indian  sector  shown that   grow  billion sector from scratch   have thing   will  combination   interview with MINT wish  Independence  freedom  choose guts  stand  against  strong Indian will build  strong right your signing emails  with  beginning  make sense Wishing   satisfying journeyRT Need your good wishes   chapter Need your good wishes  this  chapter dream  better rural India starts with  smiles  farmers    farmers dream   educated tomorrow starts with  smiles   face  children Feel Lucky  Luck will Have  awesome innovation  flourish  need discontent with  present   appetite Attended  amazing   session with Leader Should   will remember Your mother     most popular teachers  Your gift  school stop caring  feeling yourself  emotions    only experience   life through Thanks   your warm comments   trip back  Pantnagar people  care  feelings behind everything truly  that     most amazing days  will cherish   rest    wish this   everyone Also visited  house where  spent most   soundings familiar walls made memoriesrush back also nice   Audi that building   school coming   sure  will look help students express more Visiting hometown after almost decades  made     warm welcome  rcvd from folks   school college wonder   Differences Between Managers Leaders  attracted  much Visiting  house  Pantnagar  where  spent most     this feeling drive into Uttrakhand today  review  school infrastructure project  foundation Three tests that will help  decide  made  shift from managing   leading them Vineet Nayar  focus  philanthropy Hindustan Times lives  face choices every some   some Think  this when  make that choice Moving crowd  never been  mark   true leader   idea  born when  turn their back awesome opening speech  enhancing  education blog post which helped inspire many  cross roads this  stupendously  very  wish     influencers very Well said  this inspire  Jonathan  what brilliantly great article makes  want   high    where  heart excellent  inspiring especially  times when each negativity makes  question your Great idea very inspiring Will share  with  colleagues There  only  that there     Good made   great inspiring article read    school going kids they also written what  experiencing  intend  stick what great that  liked rock Please help  reach this        when when     butterfly says Inspiring read Just  long   spend writing   daily  feel inspired Thanks  always writes  great column  breaking  herd mentality Awesome very     when never   butterfly till your desire     intense that nothing  stop  from being will remain   smart   still   butterfly life there  come  time when  flock turns their back   what when       blog   power  fearless dreams when     Posting this blog today evening Please  read  give thanks     tommorow  want every young leader  read Writing   blog  flight back  this   very straight from  tweet  link Thanks  many  inspiration     inspiration afraid   Columbus  turned back   would have blamed     would have remembered London  talk   Global Companies about organisation transformation through Employee  idea  many legs Vineet your  conf  very inspirational   have been following  very closely from Most  thing    shld  knowing that everyone  works with  excited show work each  doing what loves Gist   speech   CNBC Young Turks Conclave here your speech  Barclays conference  inspirational  well  Thank This  core    important  define vision from  employee perspective Always  unstable always  purpose over reading   missing insights from    best start walking   front safeguarding  interests  your  will  their trust   lifetime good  days armies used  create  formation where  leader used     front leading   behind Speaking   CNBC Young Turks Conclave Conference Looking   drawing energy from some passionate young entrepreneurs This purpose  that  will succeed irrespective  what   will succeed because purity  startup   sense  Most people  misguided that  startup organization  driven   idea thanks  showing    shorten   much  learn  thus  this   your That Excited  start this highly recommended books  management your innovative thoughts cannot  matched   believe reader  your trust based  ideas great  knowledge  challenge Ideas  just workplaces   popularity Technical merit should definition   follower  like  relationship  enjoy with  follow  idea  what  means      person Good great couple      define     make have  Number  Quality  sharing  should give  better most  knowledge industry begin with  open flat culture  many times fails  retain most think they   that  organisations   salary    shot term illusion then time orgs promote more social workplaces where people earn recognition   followers they   guys many people  getting    opportunity Addressed  Summit Pressed   need   leaders  play  important role  building  culture  trust Excellent thought provoking keynote hopefully Sampark will These smiles made  village visits worth   wish  could stay back  just teach Mapping  water supply  demand first step  make  village water aware Making  Govt departments visit  village  smart   increasing accountability  villagers Launch   village program   excitement   time    work Activity based learning  great step forward  village education step   When     both inspiring  Such  long sense  purpose  these they have  given  hope that     working   need   more Working with  villagers  rural India      loosing  inclusive   small     problem Today  villages  Kanchipuram   make villages food production hubs  household income every time   under  tree  know what  good leaders  like solid should  flexible with your opinion  views   core belief  that defines nation   nation    Freedom through  violence  integrity honesty value based talking only  core beliefs that define  will  follow    know what  stand reason  respect politics  because people compromise respected leaders emerge when they situations should  change your core   flexible about everything   what  stand make compromises really believe  that Lives  teach   stand firm   beliefs Give  mouse  will want your glass  compromise   truly believe world needs dreamers   world needs  above  world needs dreamers   Breathnach Worms  Amritsar school kids faint Still believe  apathy   innocent kids died   responsible want  simply hide behind conspiracy Shocked children died after midday kids deserve more than  noise   Idiot  introspection country like ours ranked  Human Development Index cannot afford  debate   other topic except inclusive disturbung   journalists  thought leaders   country  diverted  discuss such irrelevant issues Delighted  hear your views    agree with most   that culture    foundation learnt   from your book employees  very intrstng  diff  have diff perspective   call  incidental while others term  side Back from  whirlwind tour   some very interesting always  much hope  found  session  Take care some  this money   used  other Winter Olympics  will  most expensive  history Stuart Crainer interviews  leadership   employees come  here Edmund Hillary once    mountain  conquer Wish  could live with this conviction start walking towards  improve  abilities keep obsessed   considered  result  looking  opps rather than focusing Look   great promise  today   first   that discovery always Sometimes courage   quiet voice       will  again Mary Anne Take  show   week  thoughts   conversations being  HCLite open    many birds  flying  always cherish your Quite from    just   take that leap  faith before actually having faith   Rajat Kaura Quoting  post    When     someone   actually saying Some people  perennially confused because they   word  very  doors open only after  close yearold woman  saving lives  girls  Delhi life experiences that sculpted  management possible  teach entrepreneurial skills    need   born with cover page interview  Read Gorgeous London weather  late dinner   Athenaeum    time staff  London flight cause  enabled  improve customer  listening airplanes   thin Such  always going someplace   wonder  London Looking  Editorial  help  manage  friends  Apply here Thank    sharing such amazing insights    focus   positives  Keep them combination  positive  look  feed  each Good  about discarding  assumption that something  wrong   first Need ideas   people focus   positives  move ahead     inputs will help  write this blog mountain climber looks       fingers pull himself        this  practice Writing  article  hell said  world    focused  what  wrong miss  next steps write    will help  Have Nurture your mind with great  believe   heroic makes heroes Benjamin Disraeli loved  story  someone singing   interview   hire Alws good   hatke Will come   plan  many  your fans    plan Thankful    your kind words   recent  extend  conversation  physical about Yesterday  Helen   hero  inspires  even  always remembered  what    more great shared with  team   curious    they react  masterpiece twitter only  express  personal excellent story EFCS  greatexample  leadership  transforming responsibility  lowest excellent thought India   require unlearning  stay away from complex Thanks  response from     very encouraging glad    super read What does  ordinary employee  aspires  become  extraordinary leader mentor startups      pleasure   mentored  albeit motivational article from  sows seeds  countless motivated please keep them Thanks    excellent article motivating  opening that  These  inherent attributes  every successful Have  ever wondered    first tries  break   before playing with more important than curiosity more important than passion more important than What does  ordinary employee  aspires  become  extraordinary leader cheap have written  check Brilliant  sure  that  Thanks  sharing your Brilliant Glad  liked  article  what  takes    leader   teamplayer Good advice here Take away   that would     take away from here Just Inspiration   great word  difficult Read  article  which sounds good Good that   home with thank   encouraging article    many more Thanks    take away from here Just Glad  liked  Really  great article  each  every word   inspiring Nice  thought  does    need  have positive move inch  inch congrats  your costal cleanup initiative well done     what  need portray connecting written doubt that  small   citizens  change  Indeed  only thing that ever Mead readers thank   sharing your ideas    response  your insights   viewed here Thank    your overwhelming response   article  Uttarakhand Glad  know  many Indians like   believe  change fill  ocean  drop   time   tipping point will reach   ocean thanks  love your great article made   think   like Excellent Article  sharing with others     with your article  today minute solution  coping with thanks    quite important  wake  people  take tragic   minutes surely start Think about   minutes start There  always hope   look  this disaster   reminder   responsibility When  vote  next think hard  that extra This   best line  your When   shops that sell tobacco  every village   clinic  take that extra   think When  travel enjoy beauty  Himalayas stop distribute toffees  books  think  extra solution   article  mins  bgun great  hear When  throw plastic    tree  build dream home   think   extra These mins hold promise  changing mindsets where development will  inclusive need that extra mins more from each    billion every  think  Indians article  today minute solution  coping with live your life your    what others want from     your life    your right Nice   with  intent   complicate avoid efforts should  switch Please write  blog  this  share with Most importantly  question increases your commitment  what  decide   which then increases  probability  getting  done Unfortunately  brain always diverts  attention   Unless  know  will   happiness everything   should     with this could  ordinate with  admin WeekendThoughts were mails  sent  HCLites  share  experiences  Should  restart Follow  what  takes     with  sound vision   strong Inspirational wish  government takes more such decisions that reduce This will   long   improving rural healthcare Prayers   thousands  affected families  Hope    doing your   extend help Casualties  into several says Bahuguna  that  still have Dear missing your Weekend  internal good  know  found  useful want  hear  great stuff     delhi anytime Future  India will  secure only when Indians wake    just their rights  also Wake  inaction   lost their lives because    care enough about need   hour  those  power    INDIANS FIRST  they   real accountability  inaction  some reasons   lost  many Some   villages  crossed    lost many were  poor   happy   wish life  kinder prayers   those  lost their dear ones  landslides   trekking there  feel Landed  Lovely  hope  stays this     more Dashing across London     meetings  then  flight good part  that  collective anxiety   global economy  opening  even  most scared  subjects Enjoyed speaking  Intl Summit   Think Tanks  topic    intensely deliberated Paris airport  hotel never ending drive  this However  love Paris  wish  could live here lovely  meet   give  regards  your Mumbai talking  leaders   large  about Employee centric leadership Passionate about changing leadership Back   road again next  Paris  then  Speaking  some wonderful platforms  meeting many interesting Looking forward  speaking   Summit  Business Think Catch  there  June   Paris interview with Institut   Employees First  relevance  France Unless    there  always headroom   that growth will come from have   paranoid about otherwise  next  will come  snatch market share from leader would instead would like   take care  part while   deal with part  would thus create incremental value like  word    only  means    adding   only counting plumber   electrician  electrical    them focus  their alignment will happen people     drive  answer  simple  helping  person  what they want passionate group  employees   other hand will never  happy with status they will constantly seek newer mountains happy employees create incremental They    business  protecting  conserving want  make    need passionate    want  conserve that  need happy passionate person will climb Mount Everest without  someone   already happy will continue  stay   base camp often asked what   difference between happiness Want  share  piece  advice with your this  interview    employee want  know   Employees Please  watch  share this  interview When enabling functions become Social networking  made transparency more  than ever   relationship  employees Beware      there  just interview  trust  with   Business School dilemma faced  many every  employees   have agree    pity travel  world  phir    Hindustani true     Hindustan Welcome back   town  feeling good about thanks return   believe that   never  person   idea that motivates teams  work smart  transform Good morning  come   pull Indians before India  inclusive growth  focusing   capita income  families Nice  know  contri society  disheartening notice only entrepreneur from India  philanthro that perspective    kind  disruption medical tech  delivery sure Sampark link    pointing  check amazing trek Hope  found your     within Landed  forward   fresh    Indian home these small things which make life days   finally heading Every leader  once  Join  first  only open platform Your inputs  dialogues gave   idea  build this digital community  everyday Every employee     every question  answered except Sampark   working towards putting INDIANS FIRST  helping them take charge  their lives igniting  million Time  come    pull  Indians before India  that  have inclusive growth  focus   capita income  each individual this journey  focus   areas Livelihood Education Climate sustainability Social Entrepreneurship your words  encouragement  inclusion   Heroes  Philanthropy wrld ability  quickly collect make sense  info respond  oftn trumps live   nation  GenY rpresnts populace share home  look them  challnge Raised  social media   have  skills  pulling together     build engagement with always  pleasure talking  care  wish   million world   future will  dominated      exclusive preserve speculate  because  cannot  your energy  speculating  tomorrow After what   point  hiring  plumber   telling  where  leakage temporarily convinced  your  will  believe  long  unless there  rationality industry  growing    interview with Smart Manager Sure will keep trying  Enjoy      dont stop inspiring  with brilliant unique holiday  favourite Next year  Amazing amazing photos  from last week watch  blue     dance   Next year Before  world gets  better    title  your create  unique manifesto    think grandfathers inherited  generation inherited  dear have inherited This unlike  other generation    most eager  look  life just   form  office  Wall    full  many mysteries heady remember what lies ahead     world overflowing with beauty Researchers have estimated that  successful CEOs have  intuitive When people made choices based only  they made  right call process  integrating intuition into  work lives starts  asking three Every mountain   within reach     with Picture tells  thousand When your lungs scream   know  meaning  each step forward  know  answer matters little  high  mountain matters most  high  believe   want Humbled  calmed  kissed  winds  encouraged  rising looked inside  found Final  felt like giving   that option   wish   live  rest   life believing options Clear blue struggle  reach destination each    irrelevance Going   grid  phone signals  electricity  wild   search easy trek today  gets tougher tomorrow   start    reach  height  first Simplest definition   leader  someone  draws inspiration   right  lead from those leads Reinvigorated after reading   ideas  marketers    collab  create Have great  friend also knows   prolong hard   many    very Perhaps    Thoughts also   being leader always walks  displays  incongruity between  actions  words leader    whose team knows that  will stand   them whatever  truly feel empowered difficult     daily       wish loved  only   find  mountaintops     bring friend talked  risks  high altitude  right     about  life   want  live Friends   where    right answer      sure they will middle  nowhere  listen your heart  body  find  that time  connect with important   away from everything  rediscover yourself otherwise leader  higher   simply obsessed getting     also  what    after  gets there leader     afraid  display emotions  work leader inspires   pursuing  vision that gets them jump    everyday  work   idea which leader  irrationality   expectation from     even  world  large moments  leaders   distracted   excited because they     imperfection Training hard    days nervous    good shape  high find inspiration     shape  future from Thanks This   best thing read   quite  Thank standing   ledge   building  fire  decide  will  other people jump with mentor  emerging  inputs   right opportunity  demonstrate Leaders  like  more  invest  getting them  believe   more they When water   need perfection conventnal  moment  gets turbulent then  need trust Moment   this person taking  believing that constantly standing   gazing down  they will want have  make   other  interview  Business Standard they grow   they  yours  experiment   best Over  years many small ideas have grown into   beliefs that define  leader Leadership Ideas That Will Transform Your Life  article  Corporate Dossier regional community  need  find opps  challenges leverage  abundant human capital   main asset strongly believe that being  growth Asia   people   pivots  hope   world fundamental force that turns  company around   employees   committed   idea bigger than just then closed     book launch    book Smart some very bold  ingenious entrepreneurs  part  Awards jury hope  session went Spending   with CNBC jury   companies  educational What  create with virtually  resources give   much     employees      watched There  nothing headier than     midst  freshly sowed powerful Always  pleasure  meet Back  This time  meet some  smartest entrepreneurs  part   CNBC Emerging India Awards Most effective   those where leaders invert mgmt pyramid cease  thnk  themslves  only source  change mentor enable transformers they ignite      fire then  company runs dominated strategy  often about looking   opps rather than focusing High perf orgs  those that help  discover your passion then provide     excel your employees believe    truly they will  recession     pull High perf  just want   painter seeks  opportunity  singer  sing footballer  play Enjoyed  session with  leadership team today   perform   higher clock speed   Hope  inspired them should  trusted  take decisions  initiatives    just take This   main reason  success under your always motivated youngsters  take Real engagement comes   result  trust  place  GenY  take  right action using resources  their disposal wait   high engagement before letting   enter value Unleash their abilities then step build engagement    appeal  their sense  connectedness   enable them   agents Finished Must read   aspire  bcom  butterfly instead  fastest Thanks Have read tuesdays with Fiction appeal rather found EFCS more friends  finally over   prayers    families  lost  loved   this Boston Police  they have  custody true Spirit     should keep  spirit  everyone around  high Some   have asked     long    with cares Will share location after Different people bring different experiences   together  creates  experience  anticipate very exciting people   group  from similar professions thus conversations  deep about   jobs this  trek because  friend unfortunately failed  fitness test today  very Nothing better that  nice evening with friends planning  upcoming trekking trip  wait Addressing  Godrej leadership    company   amazing legacy    interacting those amazing minds your little   good where  those little bits  good  together that overwhelm  Desmond Tutu Bangalore  rocked  Hope     your families  Bangalore  Prayers Team  fantastic quarter  earning proud    Keep heart goes     victims     give   strength  bear these Stay safe Deeply saddened  hear about  Hope     your families  Boston  Stay safe  take Prof Groysberg rightly makes case  putting comms   center  turnaround Mentions EFCS place where magic happens  always many miles ahead  your comfort When  person   spiritually emotionally walks into  magic Sunday      Church feel good about  Monday   paid    office  feel Sure Hope  else  well with  Dominique interview with French daily  Circle  Echos   Employees First philosophy Heartiest Congratulations   indeed  great Both  concept book deserve much Another productive  full  insightful this time    need some  Back  clear skies  Delhi adding congrats from your friends Humbled   your lovely  Employees First idea  where   today thanks  your support This award leading  when  pursue  rewards automatically   agree congratulations  Well deserved recognition  your great   work Hope another book near Congrats from  proud  will miss proud     there  reasons  feel book conferred with prestigious Oliver Lecerf many will tell   anyway Would love  work with  sometime many congratulation    best Congrats This   great example  other business leaders  follow your sometime when     Hoping   well with Even more     another testimonial  thebelief that employees always this magnificent hall built  honored  such    idea orignting frmIndia Customers book conferred with prestigious Oliver Lecerf your  Thank   your great presentation today   want    leader great honour  excited Welcome    looking forward  seeing  tomorrow Enjoyed  conversation with  students  relevance    organisation Great questions  great Sure will whenever  have  plans interest  France   Employee First idea  very high   quite like  intense debate  this subject  local plans     planning  visit    would love  about Landed  Looking forward  exciting days here speaking  multiple forums  trust  leadership  challenging when  talk people Loved your points  profit    global mindset Children  feel inspired only when  help them discover their passion what they want     what parents want them People feel inspired only when   help them discover what they want     what  want them Life  short  precious  only stuff that  believe     only with people  believe river flows down   seek makes When   corner flow    paths will emerge find yourself     break    impossible    your spend your life  will  know       wondering  everytime   possible  walk stop prtndng  someone else realize that     always wanted      will discover  leader inside walk needs  first free oneself from servility  cowardice planning  give   them this will send  once they publish liberating experience  have freedom  thought    unable   that     your Thkx looking forward   ideas Vineet power    shape   world   underestimated More power  your Thanks  this   wrote   look forward will looking   reading  tweet   once  post  Thanks Always love what written  your Truly  inspiration  great global role pleased  that Really looking forward  reading Thank  very wrote  things  believe   matter  Will publish shortly   flow  back     voice days back   asked suggestions   over  writers   your suggestions wrote  first piece that  liked boldness  their ideas  strength  their conviction seems   inversely proportional  their More power then  hear   Nick   wobbled  tech world with  smart this    something Very impressed Group initiative which hands over  baton  change  ideas   Hope more companies follow  lead Thanks everyone  suggestions   writes  excited with what    great worth Facing  writes  excited with what     early   over facing  writers    excited with what      early morning today   over organizations need  push  pedal   Triple  Adaptability  Alignment cultural There   growth model available  global economy taking managing risks needs  become welldeveloped  form time  accept  certainty  stop wasting  time worrying about   find opportunity amidst Participated   panel discussion  with   rather three cents   topic were  follows movie loud  incredibly  flight   moving that   unable     parents Management mantras from degrees   there  always  cheery vibe    York  surely  city like courage conviction reminds   words   most powerful weapon which     change small  confident steps carry  hope  millions  girls across  world  dream   normal them words that create instant credibility Weekend    where  grew fields      without  distraction Weekend    agar where  grew fields      without  distraction lounge  Delhi airport   turning   hope    love  direct connections June first week  plans  Would love  talk about Midnight drive  airport  catch  flight  some very interesting people this excited about Thanks Happy been around since March Read  insights into   make your workplace more engaging  emerging leaders caught    diamond with  flaw  better than  common stone that very Thanks Prateek    chance  look   small comparative yourself   world which  doing   make  everybody else means  fight  hardest never stop caught   your negatives diamond with  flaw  better than  common stone that When   expect EFCS   planning  write more books  your experiences Should Silence   ignorance    considered saying inside Silence speaks  thousand your  your   rain that grows Want  make  View others  people   Agree also people    means Thanks  responses   forum  everyday  support forum  everyday  support  spread Need your help  further strengthening     your been thinking  this subject   have  created  prototype based  your sought your help    identify forums available everyday Your responses said there need your help   platform  everyday Watch    tweet need your help   platform  everyday Watch    tweet this Proud  Saina Nehwal reaches semi finals    England Badminton reports honored  most inspirational CONGRATS heard that marketing team   party Planning  gate crash into Great Post World wants  actually hear  voice  other grassroot women  made    thanks only answers  need  tune into this some advices from  women leaders received  much criticism from other working Indeed measure  progress   community   degree  progress which women have Ambedkar Like  game   role   help  players play   play  game himself chat with   empowering employees  make decisions  foster defense many seas must  white dove before  sleeps There    irrationality  your expectation from your your idea even  world moments  crisis successful leaders  because they   opportunity  imperfection uncertainty easy  fall into  trap  assuming that  only    take  right decision Leadership    entitlement      right  earn  your actions every Leadership   state  akin  that   explorer  whom  unknown    more exciting than  known Thanks  best  your synonymous   philosophy  which wisdom   freshness   winds   silence     within   feel  just Need   shower    some real food   Awesome time  will    treck again  days Back   connected  wonder     focused  connecting   outside when what  need   connect Fantastic  days   Physically exhausted  mentally What  amazing Into  wild   grid   three cell Final climb      last   photos   cell signal beyond this point Awesome colours that water body  where  need    before leader like urself taking time Hope    taking business calls Lovely Where would this Getting more exciting awesome India   competitive   Policy  decision makers Implementation what else   expect from  more with what  have  doing less  what well that would help    competitive    gonna  this question ques  should instead  asking  every item instead long  will  make  more  less competitive   country country  unfortunately become  kind  Kirana store price revision will cost that will cost less Union should   blueprint  increasing  competitiveness Would  interested  knowing  Intention Deficit  your team leaders  affected your work response   blog   Intention Deficit Disorder  more   prob today than Attntion Defi Disorder agree more Power  Conversational citizen  wish list  budget    govt action  that matter  rather simple   Indians Intention holds    many leadership challenges    facing wonderfully written Thanks thanks   piece  simple  immensely Insightful article   Power  Intent  Loved  african example Firm commitment informative well researched read Intention holds   thanks Heathrow from Central have taken Heathrow Express  stuck    make this mistake every very nicely written Your clarity  thoughts   great simplicity good such   have  very good last year   taught   case  Harvard keep sharing your Must Read  Intention holds    many leadership challenges    facing Intention holds    many leadership challenges    facing Thank  folks   many  tweets  responses   blog Hope     your families  Hyderabad  Praying  your safety Leaders forget that  intent  their plans aligned people will  believe critical  know your intent   leader   communicate Happy  hear   progress team Sampark  making  some  Many smiles many more Watched  movie over   inspiring tale     most influential leaders   Must watch folks Nayar  were outstanding  this time Build lasting relationships that  based  trust      that makes  proud   just need  reach    InfoSystems      part  that company however will  your request best part  Nasscom today  meeting some long lost friends  catching    sidelines   fantastic session with Investments  developing talent across  board   best thank    Your session today  very good relevant Must focus  human capital  protect reputation  this   social Business  about getting simple things right every thanks   autograph today  reached  just Have pasted    should thank your With raising  growth guidance     mood   ground hectic     many interesting discussions   future   Industry from    should  Indian Will  attending Hope  conversations gravitate more towards change evolution rather than Have  least  dream which  want badly  then  after  with  lock your eyes  knock your lungs dead haunted   simple wish expressed   victim before  want Indian FIRST  piece  wrote   MINT newspaper stating  wish list Humility   ability  appreciate that   better this Most impressed with  clarity  thought  some young leaders  loved  meet  bunch from sorry Welcome Back Chief    Feeling very  lunch  hardly feeling like Young winners session with sharp questions  amazing conversations after  faith excited  meet  listen   again tomorrow  thanks Employees First Customers Second Just landed back  Delhi    exciting  energizing which Mumbai always some  friends  topped Follow  insight into   develop next generation Well done team  ETYL program will   long   empowering young leaders that India  desperately needs today energy  intellect  these young sparks  always  Indeed there  always  much  learn from young leaders Young winners will  grilling    barred panel discussion  finale event today Thanks  sharing suggestions  transforming  Particularly liked tips  RTing them Would love  hear your  simple actions that could transform  work Allow yourself   emotional   really Invest  your people  relationships Step back before  step forward every Before  decide what  will  yourself what  will Break   routine with This young  sought  advice  simple things  could  make  work  happier  more  offered  rudimentary tips kills  chance   piece     from Leadership   right that   earned  first being  good common   only    know good   common With interest rates dropping near cash   abundance skills    time orgs measure success  Return  Human Capital World needs disruptive innovation which creates  markets rather than efficiency  incremental innovation which only reduce jobs smartphones will soon  interconnected  social media  across  globe redefining traditional notions   nation Davos again seemed like    Indian Wedding with  much  many things   many folks Writing article will start from your tweet suggestions   issues  call  ideas that seemed interesting leave Davos enthralled with    will write them down   return Watch   them   articles next week Great  have someone  calls spade  enamored  blah thanks Greetings from very cosy Shame    guys make what  your ideas  solutions  ideas being tried    will blog session  Global Nigerian representative says solution  Telepresence technology unbelievable walking session  Global Most members were name dropping Turn  Nigerian representative session  Global Focus  solution missing comments  know  challenge  focus  ideas Attending session  Global Education Imperative    educate over million session  digital marketplace  poll  facebook shows digital technologies make people LESS session  digital  digital technology  impacting creativity  artists Getting ready  speak  panel    push  global innovation frontier  meet  needs   population Hearing Nobel Laureate  physics Serge Haroche theory revisiting  engineering after Listening  Nobel Laureate Serge Haroche explain   ability  manipulate single particles  light  change session   disorders Eric kandel Nobel Such  rare opportunity  hear wish      great leader  inspire   inspired   work Would like  hear what  your view   fundamental factors that underpin resilience  organizations Will  speaking   session   today Attended  very intrstng sessions that    redefine capitalism   know  todayby Nobel Laureate Joseph Stiglitz women    heroes  have made most impact   world last Yousafzai Fabiola Gianotti    Dissapointed frozen good morning from Even  strongest coffee cannot prepare    fast days pleasure  hear  speak   dinner Sorry  join  session deliver opening remarks   Community Welcome Keen  collaborate ideate  fellow  Industry Also attended many interesting sessions just  listen  learn from  ideas pushing  envelope  convention today insightful interactions   panelist    Luncheon  Most CEOs sounded keen  find opportunities amidst risks elitist disconnected from Thanks  your  office will contact  shortly lonely    lonely   bottom when unfair elements  stacked against there  ALWAYS times  feels great   with  life  feeling  small amongst these beautiful Driving   DAVOS from filled covered peace like your should talk  what   done  change does  disagree with  friend    called being ungrateful  impolite  just Have written     print  Fortune Blog appearing tommorow  think  will  friends after that Finally     Zurich  then Davos after flight cancellations  like  long night Thinking  famous words     attend   does  seem  much  being anything opportunity    experience open house with HCLites   truly first  growth     then  course Wish Follow  what  means    when    Always after reading thought more philip   just flawed  original never want   retire     planet  change  sounds desi version  Steve  continue inspiring    with your Thanks will Sadly  culture    redundancy from    retweet that  wishing   best Congratulations   great career   building  strong business from Great success have been following  tweets every word  every tweet  been spiritual connectivity thanks Seeing  your wonder  Optimistic  inspiring person  have just  life  LIVE Thank  Congrats from Sydney   lucky   part  your Thank   guys rock Surprised   your exit     then  gotta empower other places  Good luck have inspired  whole always       your Thank  folks  your kind    humbled  inspired  your faith  Thanks made  feel like   Appreciation  picture Witnessing interact with  employees  twitter   like  corporate version  Thanks leaders  always Read your interaction  Twitter with  many  team makes  humble just read  recent article  Social influence   Congratulations  your success used  watch your speeches  webcast  back home full  motivation came from people like reason  made  aggressive  ambitious   best company  work guys  that nice email wish  could have    person   best  your future spent     ldrs   desgn cmptncy modl  Ldrshp  rmembrd  name      Thanks brief stint    always admired feel extremely proud  your   inspiring good task each   make sure that reach from   rewarded  Missed  happy   will tweets today made  Thankyou  much  have  fantastic year ahead  make heard  much about  meet       inspiration   ideas  people like proud that   going    part   successful company congrats     Thanks joined  recently  what seeing  Credits  Welcome   awesome always  that    guts  dance with employees  ours Attitude matters most  inspiring Thanks Good Luck were always  inspiration     Thanks guys like admire your contribution towards growth   industry  inspired many young Thanks have seen only  twit   many about  growth   profits motivates  apart         incredible leader gonna motivation  from within luck enjoyed working with   dinner   eagles nest lots  good stuff happened Thanks three years spent working with  will always    being   leader  inspiring  hear from Thank  Boss   your contribution     rock stars like fortunate work under  privileged  interactd  proud   part   Thanks always  Role  boost  with  directions weekend thoughts mails    role model still cant forget  energy   that   audience  when  came  bangalore Great congrats change    sure  will  great will miss   worry    guys  make  company great  that     always will fantastic   best  tell  more through mail employees love  guys proud  each      magic  create each stories heart makes   caring place where people just want  work   rather belong always   liking  teams  teams   chaotic  aggressive  ambitious  considerate What     success unless  have people  share  lasting relationships that  based  trust What     success unless  have people  share  lasting relationships that  based  trust  convenience Always  pleasure meeting young leaders like Please write   office Which issues would  want  global leaders    focus  this year  improve  current state days from   flying   attend   Davos which  perhaps  largest global convention  political   leaders passion  confidence  young leaders    their impatience with status    hopes Interviewed some incredibly talented candidates  Jury  Economic Times Young Leaders Program today times such    have  unlearn   principles  leadership write   office asked   suggest  resolution  enhance work life  what Thing your team wants   stop doing this This year   what  want your team   them    change  become  better Wishing     wonderful  Happiness   Million thus  raise your voice    find  voice  that  stop these monsters Appeal  ZERO tolerance  monsters within   roads  have  respect  women forgive  that  have  this happen   sparked  revolution that seeks more welcome    believe time  take   ideas forward where    from   there  three words that could hold some Wishing   your family Merry Christmas   joyous holiday what   need   differently   year Congrats   your team truly deserve this Keep giving  keep making  world  better stay  touch Sometimes  greatest value   bring   meeting   ability  think outside  group Thanks  your kind words   truth  just  guys   real role Spoke  conf yday underlined  need tech talent evolve from person people come    things  start doing something each   strengthen your learn change constantly  remain     game never forget that only  relevant  your last action down   fireplace chat  leadership   journey  with some bright HCLites future  HCLT   confidence  these exceptional   what   today because  their hunger  passion Started  tour  celebrate Outstanding employee  HCLT Best part   pride   eyes Still come  terms with  fact that  such happy bunch   target  such monstrosity  Shocked saddened traffic light today morning   queue  happy kids crossing over  their They seemed  full   excited discuss  such obvious truth  this Foreword  penned   Greenpeace Report  Renewable inability  sometimes face    obvious truths  perhaps    most disturbing aspects   human Great  connect with   Twitter stay Companies  encourage their employees  redraw contours  take innovation leaps fearlessly    mind  true leaders  tomorrow chat with World Business Today program  posed these questions   policy Watch Discussing  state  global  strategy  World Business Today Watch Thank   coming critical mgmt challenge  aligning employees  This  more difficult   workers many books    airport book     this some   brightest industry brains  Boston   London  continue growing faster than   peers    love doing what  Proud   team write   office When people expect    logical they want     seem illogical  will attract enough people  want what  believe   need   unreasonable  with reason  cannot     your belief  want Back   road heading   from Delhi second time     last tour this year  then Zzzz till jury   convinced that leaders should work   startup somewhere  their life time    huge some amazing  companies today  part  Jury  innovation  learnt  much from Back from  snow     gentler winter  There   place   world like only every person   room  more  more people outside could reply Thank   your kind  credit however only  solely goes   young employees ideas that drive    lively event team should have been EgonZander Thanks Enjoyed  guys were  great Both   have talked about    bringing   best agree have  celebrate  people   back Howard Schultz  motivating people themes common    employee   chase value  stock price Feeling refreshed  recharged after  awesome event congratulations again   entire team   truly  amazing events  always very stimulating  looking forward   evening  rich discussions Scheduled  speak  anniversary event today along with CEOs   Clayton Christenson Thanks  responses  there  digital that answers questions  young leaders  work there  digital that answers questions  young leaders  work   think    good idea  setup flight would     travel over next speeding  before things slow thanks  drop    chai when    Delhi  reach Have  folks come across such share them  provide blueprints  frugal developmental innovation across have avidly studied many ingenious programs that  using internet  help those   bottom   economic possibilities  Internet   used  disburse public service provide farmers access Debate  Internet governance  good   shld also focus   power  Internet reduce economic divide developing nations like ours Good  hear from  Wish your friend  Happy Thanksgiving from  side  tell     part   world unfortunately  will miss Please convey  best Intrstng concept Join support  Concept Destroy Hierarchy  Show Employees   Them only prayer  said  your whole life  thank  that would Happy Thanksgiving Have  beautiful  with your families believe that going  this pursuit   will become  biggest motivator  employees Today employees  thmselves  rspnsble members  Orgs need enable  contribute social causes they feel passionately delighted  hear about  pace with which employees   company  coming together  groups  work  social issues argues that   every managers folks  there interested    innovation process must participate  this fantastic idea  wish  guys  very best wish   your family  very happy  this festival  light bring health  continued success  your Enjoyed speaking  India Most conversation spelled economy  Sentiments were Hope panel  Indian Econ GVReddy BBCWorldNews hopeful  President  tenure will uplift global  sentiment further strengthen economic political stability  America Hope   Many thanks  being there  optimism  what most people took questions every aspirant   journey  leadership should  asking says priorities  infrastructure  inclusive growth   atleast Heard  clarity coming through   panel Subject though should have been India Than says while long term India needs  focus  India first  then worry about  world later These questions could   lighthouse  your leadership cents  hope  leave behind   table  need  hope   unequivocal focus  forward action Looking forward  speaking    World panel discussion today  Indian turnaround potential more optimistic  Nokia compared  most analysts because    expectation   great true with many others today Concluding  trip into Nordic CEOs  cautious  optimistic  sure  their sign Good teams have  ability  recognize admit   view  transparently course correct    right about spending some time nurturing your most audacious dream this write   office intimate Carlos  shared  secrets   success  exciting future that lies Enjoyed  unique with Carlos     World this Back   road Team delivered fantastic  rslts  again with  revenue growth   increase What    attributes looks   young Check  here hope     also nurturing  girl children  your respective Remember every helping every loving smile Through    privilege  contributing some little happiness  some little girls whose smiles have meant  much Girls   seeds    should love protect them Every  should   girlchild format works best   conference because  audience participation   confine yourself  what  relevant Leaving short trip  Gartner Great audience  loved  session    transform Keen  hear from  friends  Gartner  Industry   shape  SMAC suite  taking  impact   buying decisions Keynote   Gartner ITXpo Rich conversations   eminent  experts  action  Ground Zero read your thoughts  Agree that  time that every welcome young Zuckerberg culture makes  interesting read  this Businessweek humanity   single Live communication platform  both scary billion users  surely  disruptive milestone When   last time leaders  often contrarian thinkers   uncomfortable walk tough paths challenge popular perceptions traits  look  potential leaders  Irrationality social responsibility jury    Young Leaders Program   asked about what attributes make have drawn    inspiration from life     inspired life   epitome    taught    group  discontented   change their  destiny thanks congrats  crossing  becomes    simply Another city  another week   weekend  pure Yesterday   conference   asked   lead   have  incompetent  this   opportunity comfortable with security settings  Facebook    great partly  what      network conference talked about   lead change   just  manage idea  have everything   that breaks   iPhone    clueless with  numbers went with  they said  must have asked again iPhone  died   right    board  flight looking forward  without  phone inconvenient advice  beyond  role  trusting employees more cultivate  sense  higher purpose Enjoyed spkng  Provocative involved audience  sense  impending change   Good show leave   something more meaningful  life most wonderful discussion Sunday  other Evocatively summarized  James Much ails    saying which further compounds indecisiveness that plagues leadership Very interesting suggestions through Envy Jealousy  suspicion  this  real issue  workplace want  write  blog  through Envy Jealousy  suspicion    have suggestions that worked travel  track pants  loose  fashion designer sitting next    have seen lots  scope  India looking girl sitting next     flight   fashion designer working    moving base  India opportunities Back   airport  security line  catch  flight Will    downtown from       time     always chasing   living  life people   what  takes     guess ability  travel half  around  world  then travel back smiling same Rush rush Three words that dominate  lives  delay  flight   rush   just  time   keynote slot  Hilton Time   only currency   born When  start taking responsibility  your  start enjoying Looking   speaking   Blackstone  Conference   later Hope  gather lots  insights from going  sleep  sleep when   anything  that   fresh  ready when     opportunity have learnt  much today  managing  uncertain    guilty  many similar mistakes   office Plane grounded technical Finally  comunication will depart Hilarious Plane grounded because  technical  comunication  resolution Anger rising   concern  connecting Suspended animation uncertainty assumptions     simple strategy  ignored  uncertain these  some   travel apps  They  make life  give Shows  importance    assertion   right people ignore What When there  uncertainty  human mind starts looking   worst case relax when Will they That   question everyone wants  know  they  told    knows word frequent travelers hate most  technical snag   have Most smiles  phones    anxious buzz Seat belt sign     book    both have each other       folks   other side flight    smiles  relaxed banter people introducing themselves hard  find common Dash   some people want   there some like  want   last  some   sure  start people Skype   airline lounge maybe  sense  privacy  public place full Observing people   airlines lots  some  eating   rest  playing with their Midnight dash  airport another international there  mobile  that tracks miles travelled   ignorance Successful young leaders  neither distracted  They  excited instead they  oppty industry generated tremendous employment precious Industry  Indian   world class fewer than   five leaders  currently effective   What could Reading  Report titled  Global Leadership which analyses work characteristics  global leaders transformation needs   take some  bets  then execute with huge passion along with  committed team need young minds  Minds that    possibilities  tomorrow instead  despairs succeed  have    paranoid  perpetually unhappy  chat with Shailesh Dhobal corporate world    much premium  experience mind there  many   mind there goldmine    your team tapped Enjoyed speaking    energy   questions   young audience   totally Reminded    line read  today   waiting  opportunities   They intend creating their Enjoyed interacting  group  young women leaders  hosted  Energy potential   room   refreshing inspiring Girisha serves   reminder   power  passion  overcome  toughest obstacles  adversities  life Congrats Girisha Hosangara  winning first medal  London    inspiration Looking  speaking    always  interact learn  youth will create jobs        next Mgrs  should      enabling empowering  frontline employees  make just  decisions lead question     make fast decisions  Managers    make them   first most disappointed when  hear  Managers  become  coaches  describe    problem  decision Chief among these  which   fundamental that  simply called  some truths that  somewhere around made  earliest known identification   elements   culture tells   things this person loves  work life     life  love beyond Just  perfect balance Coffee   what usually makes  morning    someone enter workspace  bounce   step  smile  face sounding like  social activist those  want   some awesome Indian food  London  would recommend Amaya Long walk  Hyde park despite  rain   luxury   weekend  London which  Wondering what play only were  Olympians  treat  their effort attitude taught  some invaluable lessons blog  Leadership Truths  Olympics  Olympians teach stay close  these basic values  prosper many intrstng conversations   this week  macro rear view seems  clear  windshield  still time when  everywhere  questioning their these characteristics seem  resonate even more blog  leadership traits that never Thanks  your enriching response  ques thing  want your Boss  STOP Would love hear more  keep them coming were  tell your  STOP doing  what would that   Writing  blog  this There should never     flying  never miss  opportunity Sometimes  wonder  different  lives would have been    agreed  always live    book When   gets   tries  explore   breaking  teach   forget  natural instinct with Participating   kite flying competition tommorow just   independence   good Participating   kite flying completion tommorow just    part  independence   good many   simply surviving another    challenges with cheer becomes mgrs  should   installing glass windows   offices  knows  urgency   will house   glass keeps  house  said     will  more likely clean open mike night  fantastic music there    very crowded  bands  will leave Encouraging words   coach  make  diff footballer scoring  winning goal  sprinter achieving record time love  Nthn brings this  fore  than     person    only Visiting Kolkata  walking down Park known  Great food  warm suggestion  nice place What    after identifying young potential Start training  Maybe completely agree with this great article world champion    inspirational Olympian     true hero never  Crisis  always accompanied with opportunity  should look     catalyst change Every time  give    company  loved   telling  world that   bereft  hope action thanks  guys  make this  great company History  written  grand phrases  present  always  ordinary days made extraordinary      afraid  push  envelope will lift  mood   nation that needs great role models     best  have  inspire   aspire Saina Nehwal  will lift  mood   nation that needs great role models     best  have  inspire   aspire Saina Nehwal wins Bronze medal  leads  Indian hope  emerging   great sports passion   will Congratulations  India  Bronze medal   young girl shows India     Wish many more History  written  grand phrases  present  always  ordinary days made extraordinary      afraid  push  envelope strength  technology  greater than need look   power crisis   opportunity  agree   alternate energy Lack  consensus   longer   excuse That  true  people  matters more than size  years Agree  starts gving  carryin buildin trust directin strength  individual Disturbed  hear   Express  heart goes   families   head  shocked   apathy   authorities Sports heroes   your  sports hero what   learn from There  very  sights more compelling  watch than  sportsman immersed   giving Congrats India   first Olympics medal Size   benchmark   past when dinosaur   king   Today lion wears  Skill matters more than need  change that  vision cannot  about     about becoming doing something innovative Sometimes  wonder     obsessed with building large Most companies today  aspiring only role   management   help them discover their  wisdom  accept responsibility  making change Also underlined  need  destroy  halo around senior management Enjoyed speaking   SiliconIndia  Conclave Reiterated  need  invert mgmt   focus  empowering employees Tech   beats estimates  wide margin thats  results revenues come from blue ocean  This ability incubate build  will continue    competitive advntg rise   EBIT   income  HCLites prove  again that industry leading growth   achieved profitably Absolutely with great power comes great Share your views   This topic deserves  detailed blog Pleasure  mine Enjoyed your ques insights  Many    inspiring  frank conversation Agree view bringing about employee engagement takes   kind  workplace characterized  flexibility Enjoyed  chat  Keep     their series  socially conscious hope   managers  there  taking  role  mentorship    hope  confusing  with matter  talented    crave   guiding  mentor  will teach  more than most widely respected  once said that there   great player    want   coached time  institutionalized wisdom   Orgs   future will  more   shape  operating  neural have always managed  innovate  crossroads Share your innovation what according   makes  company  great place Would like  hear your thoughts   role    playing years from Scheduled speak  audience  some   best  folks   country Will  mulling over future  employee engagement Note    fooling ourselves   think that women   stopped   glass ceiling  diversity Attended  Diversity Group meeting  office  overwhelmed   enthusiasm aspirations   women   room Mother   battles worth more than coming     will  ensure  miss Large enterprise   advantage   ready made market  innovation developed with  company think possible  manage  start  mentality around innovation within  large Enjoyed interaction over breakfast with  winners    innovation contest Congrats team Spent hours buying  drum  today realized what goes into producing that wonderful  wish  knew   play First response  rain     cover  with  need   experienced enjoyed  part  being ALIVE Just love  Change  good  planned seasons     forget  beauty  Chai with rain  last  mind  traffic    stuck  right Students  emerging    leaders  believe  their power  solve problems     work  them Students today  empowered  raring  make  difference  provide solutions  problems   small Some teams bring  much data   reviews that they forget their insights that differentiate Your views  rich insights  what makes  great team   completely Keep them coming Recently    shared  views  some ingredients     like  hear your views  what makes Imprssd comment    blog Intrstng  cards extnded Chief Happiness Officer employee   focus  actual   support make sure focus wont archaic corporate pyramid  more aligned around power rather than  need  invert   unlock employee energy often wonder  some companies   conduct businesses with their  quiet have taken  world  technology  storm   past Continuing  series  unsung here  saluting  remarkable achievements  some inspiring women know what makes  sadder  death    fact that      last such Loved interacting   guys  Nice   meet  directions   clear   have focus board  flight from Seattle  Frankfurt from innovation   land   need Looked  Slate from  with Windows very cool idea with  external keyboard   port plus office applications will Spent  week   area  labs looking  cool technologies that will shape  world Enjoyed interacting with    Inverting  Pyramid Enjoyed speaking interacting      event truly lived     mission  reinventing looking forward  some more insights from  partners  customers    today Planned this  trip   hand feel    leaders  thinking Must  diary  full  some rich notes Perfect start   week meeting   West Coast employees today  part   annual Townhall call them counterintuitive bets  career gambles  others paid Always  pleasure talking  Lison    interview with Definitely   reading love their opening line about    incurable just love  city   weekend      plus before   into regular treadmill  back  back thanks   have change  needs   harder   exists   After  time  should stop trying  bring  fresh blood classic case  neglect    that    core  management tries   things  change  obvious Inflight service    still good there   reason   hope they   gaps   just  unreasonable pilot airport      problems continue     loyal  customer thus flying   hope    back Always look  momentum   spot  first  jump right  current will take  upstream  matter  slow After visiting touching students mnths  hard     helm  this season believe   create mini sustainable earths    Would like hear your thoughts  sustainable  simple Saving Earth seems like this  thing that only govts large organizations  This focus  what Read  intrstng report  chess champ Vishwanathan Reminded     belief   want   enough  will   soon enough Absolutely  Glad  took  time  meet with young certainly value  Happy Friday Talented guys  waiting outside they  change  world upside   consider them also future    eyes   young Such energy great ideas  more importantly  keenness  lead some young innovators   company Most  their ideas were focused  improving user experience  making What     Having identified these Hectic  interesting  with productive meetings  Mumbai    global cities where optimists always outnumber attributes  youth leadership risk    listed down characteristics  youth leadership that strike   common  this generation always captivated  youngsters displaying admirable leadership qualities beyond their breaking  mould  find Agree    Chennai     watch  Theodore  thinking about   cities When Theodore Parker have always been    could literally  referring  Delhi those   purposeful things  impact others positively significantly they will eventually bcom great Maybe   time  replace  Great  theory with  theory  What inspiring leadership stories from Thank    your suggestions   photography Very suggestions where   take professional training  nature photography     next level sounds like   makes investments     many companies  failing Globalisation  Power     accrding   biggest chng   brought into Indian Your article   makes  good  liked your saying   under four heads very succinctly interesting chat with   frnd Said   calls   Change Enabler      come  long Which amazing women will  like  thank frndly  kind hawker  saved Shalini  wife  taught   lessons  life Sometimes just appreciation      calling   women  shaped your life sayng thank  them today Wrote this piece   where thanked   women   shaped  life made     today Mine  direct ratings  open  public view wrote They said  understand   told them they understand John Lennon mother told  that happiness    When  went they asked what  wntd  when  grew Stumbled upon this quote  agree Happiness   only truth  everything else  just  illusion Karl  worried about   have turned   central ideas taught   program Most Valuable Thing They Teach Another interesting this time with Karl Moore   much acclaimed column will lock  global economy into gridlock   think  will  recession   longer only most interesting chat with  inimitable John Gallant Cynicism  such   person  sees  hope  role  fixing  problems   right questioning them Happy mothers    those lovely mothers including mine  have shaped  groomed leaders  Thankyou When  climbed  mountain  thought  never  felt  hand     back everyone  made this Visited  village Schools    hunger desire  young eyes   teachers  aids which  must participate train back from   trek   Himalayas close  nature must start asking seeing others   source  change transferring ownership  those closer   value must stop thinking  yourself   only source   must  feel  need answer every ques Wondering   bring   ourselves  complete with subjectivity Throughout  career   been puzzled      separate themselves into Person work  sometimes  diff   home connectivity   best value prop   vacation  Valley  flowers Paro  Bhutan Best Question   people  love which  your favorite critical success factors   good treck good shoes  interesting true  life Next Weekend     treck climbing mountains zero nights  tents  thin  climbs will test body Sometimes   employees want from    acknowledgement  their hard work    simple become  obsessed with what   giving   employees  customers that  start believing that that  what they really happiness   controlled   person   happy will  happy everywhere  work   home happiness comes from     passionate about  work Motivation   come from inside Ever heard   word   differentiate  risktake from most successful leader      makes fewer     quickly learns from them  moves find  zone  this magic ingredient  happiness  work Happiness  work    reality   What   guys only compete with ourselves  results  beats  next have  instill  romance  tomorrow into   someone future  what makes  present exciting first step  transformative leadership  creating with what   providing  vision  what year celebration   employees helping with livelihood challenges  families  amazing always believed  communication   most important responsibility    higher  strtgy Been  hectic  announced fantastic  HCLites always want more  Team   back   Happy weekend recent meeting young  asked them what value they felt they Glad note that most viewed themselves Thanks  forever using       successfully transformed   democracy Give your employees sufficient freedom  make mistakes  their path  break Mgrs today find themselves overshadowed   Internet their authority interesting word      your view should  take   company   called Happy  share with  that  again made   list  Most Democratic Workplaces Very interesting article     mgmt gurus    Gary Forbes interview Therefore words that   most often  work    will  surprised with their Over  years  have noticed that sharing your personal limitations with candor helps create  participative management style success   greatest leaders  incomplete without  story  their struggles Good times  what people identify leaders  tough times  what turn them into leaders will find  huge amount  success when  find  zone  confidence   zone  enjoyment Start taking responsibility  outputs rather than just Getting  charge  your life Goodmorning Nice frequent traveller mind   When flight  delayed  kicks  bypasses  frustration Stuck     problems with   thought believe that there  wine stores    single good book store  Heathrow terminal Returning  India Planning    bookstore    suggestions   book rich conversation with leading business leaders  both side   Some continue   others Just  reading Must read   progressive Going  start  journey Meeting with  conversing with  employees   great demonstration  Employees First thank Town Hall with  employees last week  floored with their enthusiasm Employees always know more than   ever Another Another Another Same   love what  then nothing else Keep   work flight  London from  interiors  nice  flight  Economic recovery play Warhorse Amazing experience  watch  strong story delivered through great onstage plans     Central Park with friends before flying  spoilt that plan  wondering what Gone   days    circle  influence does  impact  least teams then     become People  collaborate have  sense  community  reach  goal more quickly easily because they  travelling  each thrust Confucius said things  needed food   ruler should give  weapons food next  trust Hope  will action   corp life     have truly understood  power easier work   team  still waters      choppy waters  only  succeed   trusting each other thats   change Follow this   unique thoughts unflinching love   game  also  lesson    been playing with  same vigor dedication  years just  sports  reminder every   that impossible  Well done write   team Well summarized   leads  world   notes  Customers Talking  hectic travel  clear upside  that   pretty much   exercise  need walking down airport Back   road First stop   weather  mood   this week collective voice   thanks  their  Congrats  featuring   HRinfluencers people   they were what they ought   help them  become what they  capable  Goethe said this Appalled  rising crime against women   callous  apathetic attitude   enforcers  totally then        mail   CSAT  that  surprises  guessing  high  customer satisfaction score this young manager  helped save  just   what  call  passionate world struggles  harness  women  suggest focus Launched  today   women have shaped   Employees First culture  helped them Proud   women power Stop listening    mirror   will find  Nobody knows  better than sums  sucessful journey with  found  answers amongst ourselves Dina Medland  Financial Times catches    nostalgic mood  this Enjoyed speaking    Shine  Summit  other Pressed   need  create  collaborative culture  work Wishing   your Family  very Happy Holi festival that brings colours  love together  form  rainbow different  what  happening  politics around  world including ignore comments from  constipated    lack  knowledge    coments teaching  that leaders need  walk together with  team building  individual strengths much happening with Indian cricket Read  leadership lessons from sports Sometimes  feel that companies structures have become  complicated  handle  massive disruptions brought   newer technologies done extensive study  human also believes  enabling mastery  sense  purpose This research challenges  assumption that people will perform only when  provide them with financial this fascinating video  Daniel Pink which dispels  conventional carrot  stick college   because  could collaborate with multiple Imagine   were expected  connect only with your believe organizations need  build social architectures that engage employees beyond their Line cannot pick  right peak  sell    pick  right peak  quit  sport   leadership Writing  blog  right time  call   Many  sports leadership struggle with views  what would manager   mentor  contribute also acts    driver global challenge actually  giving space    great  challenge  Indian reasons  always beats   desired attribute credit  HCLites like    truly  Thank   giving this platform  delivering  passion need   this energy     only  done  unleashed  structures traditions Indian  Industry employs  incredible amount  brain enough  change  destiny must  thoughts   future threats  opps   Indian attract people    challenge  what they  have passion  outperform  give them their magic will things that  make  team falter Hanging  thin people    passionate   suffocating believe there  things that drive successful teams  challenge that   people   passionate   space answers  these ques lies your chance transform your Think   week waiting with  opps Have  negotiated  space  delegation  need  execute your there  sense  purpose  your teams today     your team just cutting data  slices  make  look search   challenge   Both exist  abundance around walk into   week  encourage    yourself three questions believed  something  getting  wrong   times more productive than doing till  visited Awesome thought  weekends  more towards seeing  direction   going  ensuring  right times   just that  small idea that    stage happy  read report  proposed Classroom  long time  went  stood   hugged though  were responsible  keeping life   about    part   week    introspect  Timeout Organizations should decouple allow   more choice over reverse broaden leadership franchise organizations suffer from what  describe   much syndrome  need less structure  more learn   about customer relationship from  local auto Seen people adjust visits have  drive them around celebrate  also need  reflect what   here take  Industry needs  evolve innovate faster Happy  hear that Indian  industry will cross  milestone this fiscal take  with passion then  follow Secret    them  with theirs  enjoy Today just whooshed Whoever coined  phrase  definitely  corporate could engage people around their they would  more likely  take responsibility Only passion makes people jump      morning  look forward   work   Only passion pushes Realized again that  like  word    will   interested  changing  improving this interesting piece   share  views   power  technology  some Proud hear that   listed  amongst   Global Providers  total     This  simply Nice Agree Vineet about  importance  Optimism looking  Best Sandra Rupp hear about Yuvraj wishing   speedy happiness   things  believe   different from  things  Freya Madeline Stark critical attributes   have believe comparison between Indian Chinese growth rate   suitable  both economies have different  models Passionate    like  read  PASSION story received ASTD Excellence  Practice Citation  beyond model views  growth comparisons  discussed during  NDTV also noticed  very different kind  revolution take shape After Making  case  global optimism Shocked  hear about  dismal girl child mortality rate     creates humanity There  enough reason     pragmatic   optimistic  more importantly  keep  faith Evaluated them  Completeness  thought came  tops thanks      contributed with ideas  viewpoints Finding  rainbow reflected   days  something just Unconventional thinking  actually logical thinking   finding  solutions  existing situations Media  changing  fabric  thinking   company thanks  What  your refreshingly different  that adds  shape  existing Lots  thinking gets shaped    open minded blog will    confidence  thanks    inputs     tweets Having seen  resolve   faces  some   brightest brains   believe there   reason     optimistic believe that  issues  face today   more than what  were faced with  decade   will face  decade latter last  tweets  sent  surprised   number  people  responded with  hope   anyone positive gloom  doom shrill reported from    optimist   world   will   better Writing  followup piece  this post critical relook  implication impact post  views manybig names   presence   protestors made  conference more conversations richer than ever before Women power  missing  from  Indian need more Indian women   world stage speaking their mind standing need   pragmatic however   indicators  world    better shape than   years gloom  doom shrill reported from    optimist   world   will   better Writing  followup piece  this post critical relook  implication impact post  views back  india from  have  idea   will share  learnings  away from  distracting  unhelpful Press Conference  creating socially responsible hope  toasted  Congress   hope that they   vigil across town know  world  changed when  congregation starts with  session matter    conversation topics  risk reaching same conclusion   involve  same Very happy with  welcome that breakthrough idea  sustainable business model received   Press Conference today unfortunately london trip glad  hear   experience with team Happy Republic       Enjoy  holiday Will  addressing  Press Conference tomorrow    view  starting Reforms within Capitalism  addressing inequality  jobs Good    like write  reforming Social impulses   drive    profits many CEOs    Council  some enriching Global uncertainties local jobs were   topics Enjoyed speaking   session    Human Looking forward   next have arrived   less than  sessions    being organized  explore   contours Snowy Davos  heating  with discomfort  increasing Wall protesters serve  reminder   urgency heading into  Chinese restaurant which  awesome food     around  Sounds like world Reached  love  white snow   waiting  footprints  solutions   just more Plan  write    wonder what would someone want  hear from   this highly reported there   global problem that  attendees   Davos could collectively  this which should Talking  told  received record number  registrations this Signs   global Panic What role   individual play towards making  company  socially responsible Talking  next week back  Europe London  then  gather some more wisdom from Love taking road  great   clear   years taught  some precious lessons Heal  World  song which  move    become responsible towards anthem  Which song  moved  inspired Times They   that Dylan still  inspiring after  these long list  depends    your   best   walk  life  write your Which song  moved  inspired many times    turn  head pretend that  just Everytime  hear   moved Given  tough global scenarios should businesses  socially responsible Continuing   discussion  socially responsible What measures  make  most effective  inclusive objective should    compete with competition    different from competition  create  sustainable cannot    technology  skill person   want  grow  grab have   sharp flexible  attacking  wait  somebody  press brake     press accelerator attributes  youth leadership today optimistic near term  careful that expectations runaway from  world   fast  quick Some   amazing qualities  have observed about youth leadership today Share your deals  volume growth   Very happy with what  have achieved  cautious about Thanks  HCLites   another fantastic quarterly Letting    lead Management Wondering what would happen   were  give    license  reinvent teams  companies socially responsible business  most effective Happy  hear that  Cricket Selectors   focusing  infusing  Fresh blood always does wonders Looking forward  attending   Davos     solutions  ideas tell  what makes  proud friend once told  that NewYorkers  successful becoz they never know   pigeon living     occupying  much  most  message </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>