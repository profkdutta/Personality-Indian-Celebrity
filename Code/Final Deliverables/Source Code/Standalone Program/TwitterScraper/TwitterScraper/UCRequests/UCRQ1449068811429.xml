<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">there  support tonight   Join    Stadium today  onwards Came     lunch     that start  Food   will always make  right excited  start following  These Comics were  real source  education growing Good luck guys wait   film liked    where Getting  award    December  Happiness thank   have been possible Anil will call   week wishing   very happy wishing everyone  very happy Wishing  team  Rammohan Santosh    very Looking this That   here this   film looking   fantastic bother Getting Atleast  workout gear  similar Uber facts about best  tomorrow little champion  grand   there  showering  love  stay Love always Happy Diwali  happy  hear great stuff about love  wishes   next Thank  very cool Check BHALE MANCHI ROJU  YouTube good luck strong Thank   having  over   fantastic show biggest film literally lovely Good luck their fault there   gate change travelling from chennai      india from  international chennai terminal know this  they change AIRINDIA just booked people   same seat   full flight favourite  hangout  Eating  favourite Good luck with great going come  long wait   this    screen     movies What  What Thank    gracing thanks  should come Capital Cinemas Vijaywada opens  venture   Suresh Productions   extremely proud Support  love always there   Keep  Good luck Happy  have associated with this really cool little place  chennai called  Great food great Sorry forgot  mention  favourite What  pleasure   working with More special mention   awesome cast that worked with Chef Inam calls this  Baahubali platter That   coolest What  What  What Checkout  first   TOUGH  WHAT TOUGH DOES  YouTube Back   airport Headed  chennai    airport really  home Touchdown Hyderabad always happy   back Banana Coming back here after Love   much even Thank  Singapore   amazing reception Singapore here  come looking Good luck RadioMirchi with  Mirchi Here  come  meet   September  Singapore International Indian Shopping Festival Thanks  your love Singapore Good luck Such  sweet Oopiri Motion Poster Here goes  character poster from Pleasure   mine always Sorry  forgot   this   KING from Great going Many more  come Back  heavy duty special show today Lets make this campaign  huge success world  picture  this Congratulations    winner   Dubsmash   your Another  from sister    cool Rakhi actually thank  ladies Always  anytime    your family then they really from mainstream anytime Good luck with have  thank   Love always Will  online from       tweet using Looking forward  chatting with What  lovely picture Always  with  guys your favourite dialogue from  best entry wins  fave Follow lunch with   help  raise funds   here Good luck champ lovely promo happy birthday Have  fantastic year still waiting solid What  treat Sholay never gets each time  watch Congratulations wish   Happy Independence Armed forces today    days pleasure always Dabboo right from   front   camera where    these bikes     know someone   ship them content that drives  film   film always need right actors  play  parts perfectly only opened  show Geeta  Missed  this time just candid moment with   glimpses Thank  Parfum Monde  this  team autographed cricket edition  What  fantastic time Thank Auditions  POSTER BOYZ starts today  those interested email your profiles POSTER BOYZ   remake    Marathi Directed  Gopi written  Darling Swamy with  executive producer come together this time  present  brand  entertainer  Telugu Such  pleasure meeting happy happy Have  lovely Love always Choose your distance Airtel Hyderabad Marathon pleasure   there  Siima this really  smthing thank  guys   love     everything Wish  coolest   toughest  them   very happy  Waiting Wishing    closest friends  probably    nicest person    cinema have  great year chief Congartulations Ramu Walden  where  really grew thank  very much  please thank  father  well from Thank  Extremely kind Tatha will  very happy wherever  Love Happy happy birthday Superb Hope  have  outstanding Thanks  having what  classic Thank    overwhelming response  love   back  shoot  chennai   next Thank  very much Just watched OUTSTANDING   only What  beautiful Incredible editor Vincent Tabaillon  edit international thank  mahesh   call  kind Love  best wishes Thank    pleasure Story Behind  Fictitious Language Created Please welcome     magnum opus Welcome   virtual Just posted  photo Delhi bound   final make products from recycled materials glass  plastic sorry been   rush also next  fully loaded might just take    that offer everyday   life  every film   tribute there    more while growing Baahubali  loved Varsham  chatrapathi many  this whenever  takes very found  also  personal that will  weird proud that  Telugu film first just cinema  everything about will answer that later that  always  about love working with everyone both  lovely people trying    celebrity love  most  this Signing    Will connect again find time  fitness playing  cameo  this film   powerful this film    future finest director   country   perfect gentleman need   good films  rest will  fall  place become lovely  well brought     superstardom building  epic going   answering your questions  Baahubali more today     send your tweets  them with always  pleasure working with  Looking Prompted Rana Daggubati  Pick  books  Amar Chitra Katha Bollywood News Movie Talkies Baahubali  made  years   head Rana Daggubati Latest Movie Features Bollywood Hungama Hero gets very  chances   career where negative part  really worthy enough Vishnu LOTS  LOVE  POWER   many more shoes from Stylish  Thanks guys Congrats Bunny  winning  Many more Just posted  photo Team  rest Just posted  photo words from  GrandMaster Thank   very very much  thank words from    privilege  showcasing  work Julia Roberts Just Taught  More  Minutes Than Anyone Else  Done   Lifetime Thank    kind Such  pleasure meeting   Have  rocking concert Nominations   Biggest South Indian Movie Awards   released very nice gesture thank   good luck with closest friends from     financial software world    hello thank  Ramuuncle  putting this amazing  together Growing  again with  favourite childhood Thank  from getting  back into this cool  this picture Glad    first voice  this  here they thank  very much What  amazing launch  then spent  rest    with Thank    spectacular response  YouTube link When  reach  airport  start getting very familiar with   means been living  knew  wifi SIIMA press   dubai Event  August  Back  hosting Another  shot   director   taking Happy birthday have  fantasssttiicccc Very true actually  most days   long hair with director brother Guess what   tagged only Tamil version  unnanu shout    craziest actor Aryaaaa Welcooommmme   Twitter world Chennai schedule   this hashtag will stick around till  have  appropriate title Thank    response   Really Thank   much This   mighty Happy Birthday  fantastic  this  such  lovely Lots  love   little sorry missing your audio    guys have  great event   loads  luck started  taking pictures with light  pudethae meeru stand  puttaru Trivikram Srinivas   while posing   group thank     name first shot ever  cinema With  beautiful night with  school friends after Nothing like going back  time with Wish    close  getaway hillstation Kodai sorts   could drive Back  Straight back  work real      What  lovely Cover  Thank    funshoot post  many beards finest family drama films ever funny    extremely gripping very popular cloud With  even more popular little news reaches  rest Royal Tibet Great food With  organic coffee heavy snack stop  Royal Tibet Fantastic  family loves food mother lovely little organic Cafe  CAFE   with himself actually   with strong  also referred    name  Lord Most peaceful working environment more   Insta Testing Selfie with boss   background Insta Version Testing  with boss Hello from Kodaikanal with  VicV going  show Venki Just come stand where  close happy birthday Have  fantastic Good luck  your film sure gonna  awesome will catch happy Have  fantastic year Thank  very very much Please come forward  support this campaign  help  friends   time This    Wake  like  different person each first film wedding means    supervise post production work  color sound mixing back that fancy little what Miss  wait  come back together years have passed   Thank   giving Well  have  very different look       picture  have Extremely   sound designer   pivotal  setting    theatre   years      Madhusudhan Check   jewellery line  Great going Good Hello there little thank   senior every single        happy ManiSir    Shreeram    tell romance  pure  beautiful Just watched   theatre  chennai post Such  beautiful beautiful Loved every Best wishes  today  brother Great   First  with Arya  great energy   whole      heat only  could have come  with that line thanks  everyone   wishes    welcome   entrants   list Miles away  that sounds fancy thank  guys  putting   there thank  thank Iniya Tamil puthaandu Have  fantastic Love always really that   only option Done with  first week  shoot   Bangalore Days Heading home    days before back  team  work Coming back  what SHOBU  know  eaten  either   week replies  have shots from   well known sent  after seeing  earlier tweet little   love  luck   brother Ranae very kind   always such  fine actor sure many more this year father after  father grateful tonnage worked with which state should months only time will tell really want July  Details soon good here  chennai almost  whole month shooting right    remake  Bangalore sure  finer actor   finer human  litre blog  that will   link  soon PSPK interacted very little   huge Ajit   probably  nicest    planet just  little will  worth more than  million bucks  experience have family there will start August  September will  back will announce  thing this year   sure Hello hello been long actually been doing   will answer  many questions      next  Shooooottt Happy birthday Have    welcome  Twitter   shoutout taking  plane  chennai  literally moving   next film  Tamil  remake  Filming begins epic  thank enough  choosing   this More thrs    Insta with Watching  fast   furious What Have  guys seen  Paul Walker  will launching  merchandise  Comic    also Always  pleasure talking Happy    brother Meraevents SEMINAR with KUNAL have been waiting have  look    know what today    This  where   began wishing    friend   wife Chinni  very very happy thank  very much thank  happy your family thank   will  more often  Will call film  directed  Bhaskar  produced   Shoot begins early Celebex monthly rating index ranks    Bollywood thats fancy thank Thank Home  always welcoming Agree with that laundry just  Surprised  read this  think otherwise Well well well    have Welcome brother  virtual   world  hear Life still feels believe driving into Ramanaidu Studios without  RamanaiduGaru  void will never Sorry been      Slowly getting back  Thank     love Vincent   Strength Thank    your prayers  wishes Found  lovely song shoot going  will inform audio movie release dates very Stay happy Have  fantastic Lots  love Thank  kind   just  reminder when   inviting   your good luck little brother friends with   promotional video good luck guys course  AbsoluteIndia Epaper from fabulous awardees   Ritz style awards with  brother This  what happens when  actor goes without     sitting  your pronounce Koechlin  think  need    done   bombay folks what  fantastic Michael Edward Emma everyone  thank   having Hope this happens plan With  coolest  bother   hero pushups with found this  Twitter brilliant Proud   thank much Thank   having cool   when they were showing KaliyugaPandavulu What  lovely time  cinema sure Happy birthday have  fantastic Really enjoyed watching  with Meena Garu  Such  lovely  insight into their Happy Republic   MAAtv Allll  very besssstttttt   force  with Rana  love  grandfather  most   world thank Wishing  very thank Poster with   best   Release Today been  year since  left  favourite picture Welcome    Twitter world they refer neighbourhood what  fantastic facility  best trained   Good Lifting with from     going Countdown Starts Number   world career best Congratulations again  Lots  love  luck Promos  BABY   Brilliant    Please watch talks about promotions Subramanyam Theatrical Very classy good luck this  where   started Another  from screen awards last night films from Daggubati this interesting crop   image Press Meet Heres another Dialogue Promo trending    Thanks   welcome happy happy  year   good seeing  after Welcome   virtual wild Twitter just packed  some serious   shout people   POWER Back from  Happy  year   great merry Christmas    brother very saddening  hear that Legendary director Balachander Garu     soul rest always wished  went  Michigan  study   went   bought this sorry brother missed your   late  thank lion brother please wish Susheelamma come back celebrate again Happy birthday Tamanna have  great Lots  love thank  lovely seeing hangout  district After hours  hard work finally  finished  portrait Rana hope  like Laugh  loud Kill Bill Happy Happy  Aint official till  Have happy birthday Have  massive Happy Birthday Have  great happy birthday Have  great mountains ahead  climb that wear   pebble  your thank  very much Worked with  closely during Belated Birthday Wishes    this Thank  guys very very much thank  very much Shot with  coolest hunk   chilled     shoot   mine Happy  have been invited  event  Welcome   guys   MMRDA Shot with    shot  first Portfolio  Good    friend very  mixed doubles warriors terribly injury  figures here brother What  night  what  Aces picture from  promo launch last evening Heard   morning Making breakfast  listening  tamil music compilations  full thank   much With  Boom matches   Micromax remain   Congratulations Another action still from Teaser cming sooon mammoth schedule comes     Until next Will miss Mommy   Daddy  congratulationsssssssssssss talks about  biggest visual spectacle Baahubali  Bangalore Mirror today Happpyyy birthday little  insta post     love  Have  lovely Here    teaser thank   pleasure Happy birthday little Have  great Love sneak peak  what First look launches This  what  director    after ever complex shot ssrajamouli conversation with Pradeep this week   only   maddd  show Watch    exclusive coming    Feel  rush Happy birthday Have  great year This  where  guys GOOOOOO HYDERABAD Thanks   info Have   driver  full speel  Hopefully changes   many Success  never failure  never courage that Sunday Thank  guys    much  hanging with this this  what lovely people Thank  very very much Very sweet That very kind   brother thank  very People will judge   matter what    might  well  what Happy birthday have  great year  loads Wishing  friend    worked with  madness while  acting  much more  over from memory lane support Come  with your city   your Back  Mumbai announcing   film Details soon Happy Happy Birthday Lots  love that   hell   happy happy again Prabhu Anytime  happy birthday chief Just watched outstanding Please  watch    especially guys miss happy  announce that  Theatrical trailer  will  released this Bond Guys Over   Cool While doing these  action films  guess injuries   must whether    Knocked  head   vanity Speech  Rough Movie Audio Launch Shooting Spot With  MassBoys from   shoot Wishing  talented Aadi   very best   next film Thank     honour well deserved Wrapped  deadly intro piece   headed  AbuDhabi   last  days love this   after very Thats   looked before  Baahubali beards ways  style  trench coat finest films seen this   Robert Duvall take Erhard boys chanting Rudram   Seva Communities Wishing   friend Prabas  very happy Have  great year brother Gave voice   video directed  RajivMenon  produced  Share your Diwali There  Getting picturized   your Introduction super exhausting    Shooting   truly epic introduction There  always three sides   your their side  then  truth completely different from both  above Ramanaidu Studios Visakhapatnam will start rebuilding  will  back operational very soon with even better Amazing spirt   rebuilding   family  company sending    relief Check  this really cool fashion  lifestyle editorial Happy birthday   Have  fantastic year very very happy birthday   Have  superb year Happy birthday have  great year ahead filled with more  more Congratulations Shilpakka  being  first Indian designer  show Back  Hyderabad from Mumbai after wrapping another schedule   straight  Ramojifilmcity from Just posted  photo Thank   thaks   ideas will work  them Check   little superstar  grown    commercial with  going here   freestyle  just going  stage     goin Happy Birthday mamm have great Wishing  director  very happy Have  great year thank   much   extremely nervous before Watch share  history with happy birthday   first  most  Have  great   playing   today   special Done with  SIIMA      heading   Dhabi Missing  chance    legands  stage  Wishing Vikram film  Shankar able  make    audio launch this evening because  Will  missing  huge What   From Sixth Looks Like wrap    schedule    board  Hyderabad will  home    hours  flying Dhanush   from last Heading  Malaysia tomorrow night  rehearsal  show    Looking Last    first schedule  Superb Greatful Most     just bury them  Mark Wrapped  thank  Neeraj  offering    pleasure today working with Heading   capital city  Delhi  start  Always    back security line  Chennai airport forget   strawberries  cream from Mapro such  pleasure meeting  last Best wishes  good luck  everything SIIMA  happening  Malaysia    Tickets  available  purchase moving    next begins   directed  NeeeajPanday  sharing screen space with stars Akshey Kumar thanks  Director Gunashekar  choosing   play  role Done with filming  with join  team  dubbed after  Great experience  recreating historic Hyderabad marathon this born  Madras  then called Chennai grew   Hyderabad   life  when  Mumbai Those     please register     guys nephew makes  feel  only Good luck with  film Chief change that  want   sweet little short film  Sukumar  Allu Happy Independence other side with Sorry  only  half pics With Surya   press quick     Kaula Lumpur   SIIMA press conference along with  Anjaan Wishishing  producer Bujji  very happy Hope have great films  success this sets  Last   shoot Great start   Spending  morning chatting with  former heavyweight champion   world Happy birthday mommy   Lots Here   guys Love     lovely lovely Good luck Apple does   with every single film wait  watch Congratulations  again  Need  keep  continuous draft  these Msgs    post  each month Rushing home Hyderabad  where  should come been good  whole  merciful ALLAH gave   came  moon  come Here   piece  fitness from Glad   there just     back next Will call  soon nice  look  from   terrible     road  definately  when  trying  catch what  call  BLOCKBUSTER PROMO Rare photo   with Drushyam Exclusive Interview Part  some more Drushyam Exclusive Interview Part Thanks  posting questions food trail with near Read more SIIMA  Will  your host this year This time every actors dream  play Just posted  photo finally someone thank  wait good    auto  front says Power star  superstar know    there Transit   quick hello   guys     fully packed Heathrow airport Apple twisted juice  what called   heathrow Headed straight    Friday morning   hours after   wait  watch Back  planes  more planes boarding     Hyderabad great time  Thanks     with some  friends made some here   back  America after Always loved this Will keep  posted  events  Philly Transiting  London Heathrow airport boarding there  times  year when   running  Fond memories looking forward been   states since  started Just posted  photo Congratulations  ISRO team   fantastic launch  PSLV carrying satellites  Canada most beautiful month   Ramzan Just posted  photo know that  wodden board  have space George Lucas  AmrishPuri   sets  Indiana Jones   Temple  Doom emergency exit rows   only seats  fully Hate sitting   plane  waiting around  takeoff Been Bold  Dives Head  Into Largest Waves Congratulations Sorry   late beautiful film this morning Coming back home   best  school friend  mine sent first presscon   movie actor wanted  share wrap  Headed straight   Been almost  week since  properly Check this   coolest ever together Blast from  past  filled with stars  grew surely looks  part  host slick  stylish Shooting  today   with  boss   compound shooting here updates  Drishyam from Just posted  photo Listening   soundtrack  brings back  memories  scenes   Truly  best Telugu film  recent workplace today forest Heading   sets   Really blessed with  there    take forever active once again View from  house Mumbai  Chennai Conditioned  self  sleep perfectly   hour  this domestic    house   packed back   office  back Back from  little weekend getaway  Really miss Hyderabad  being close Great things never came from comfort Thank     wishes will convey them called  that   while miss  crew Thank   having    show   pleasure Looking   many finest telugu film  recent  with this beautiful Another classic   collection memorable premier     most awaited films Watched  lovely film Dollar soulful film with some  storytelling lovely   coming from  Thank Poster   first film with  legend himself Heading  with  friends  Pallavi Joshi watch  this straight hindi thank   smtime   will keep schedule     couple  months before  join  project Little late  finally watched McConaughey weather magically changes  sudden shower  here   sitting  cool  pleasant outdoor that  dreaded another     sunday spent Your future   your finger  better tomorrow Rana Dugubatti joins  efficiency bandwagon    DAGGUBATI actors were  allowed  testify  court because they were seen  professional Life about waiting   storm  about learning  dance Flagged    Caste Free   ocassion   superb Happy  have been Bunny   best congrats guys Welcome   virtual wild  little cousin little Bunny Congratulations  Allu Arjun  Sneha  being blessed with  baby Starting  weekend with Watching Wishing  oldest friend  very happy Have  fantastic Always  shooting  need  come back Shot  last days  Mumbai  Mehboob   commercial along with AjayDevgan  director Abhinay   blast Just watched  must Superb performances  great story make  part  make  part Enjoyed  though   madness   deadly clash this Friday   them look teaser   Good luck Dulq Wishing  friend  very happy Force  with Just gave  voice over    beginning credits     officially part  this film theatres February  laugh riot with Sunil unexpected   from  full   chilling  home shooting  tomm  back  Monday quick  believe what  hear because lies spread quicker than Happpyyy birthday have  superb thank  veryvery much full  shoot done  heading   auduo launch  Yashraj films debuts  telugu with   Goodluck Just walked into  airport lounge   Happy Republic playing Congratulation  superstar   have Lots  Thank  guys ARBL continues  record revenue growth   growth Congratulations first pillar     lived  worked  cinema from  silent  till this date   more amongst What  your role  upcoming Salman khan starrer playing morning shiw Superstar Krishna with LEGEND such  cool People  sleep late have more mental stamina   outperform early your Twitter account  What  hell   Nuclear launch Many  failures  people    realize  close they were  success when they gave sounds like    idea wishes    Good luck boys fanciest luxury  service launching  Best wishes   Sorry  wont  able  make   your Your body   just your brain  have coolest telugu film written  directed  Ravi Juat     most oustanding film   thriller genere gripping   must Happy  Year have  superb will  continue  epic scale Stuck with  same  know  that Especially   line  work Thats quite smthing  must  still cant believe Over views  less than   best birthday gift Thank    missed  here thank   much Superb performances  both RajTarun  Wishes   entire Hope  Christmas  yours Virinchi Watched  very sweet film last Produced    friend Rammohan Happy Birthday  fellow Sagittarian have Eiffel Tower  been     colors   South African flag  memory  Nelson Paul Brian  Connor  will right here thank  guys  Keeps Request   press please stop writing irrelevant news about  personal Anything    clarify  know   reach early start   another loooooong Enroute   Kuntala waterfalls Nirmal Well  most   have seen glimpses from  shoot   papers  official look will  released Back   room after  long shoot   schedule reason  bangalore     sister  lives there  anyone else  contact   directly   need Thanks take  random  from  award rehearsal session  make news   Extremely Morning pple woke   some irritating morning news   Guys   reputed newspaper   random gossip Just finished dubbing   telugu version Wishing  person  love most   world from  second   Happy Birthday Chay NagaChaitanya starrer  SureshProductions Classic playing   iffi   game Thanks   candid Just watched   best  silver screen  seen after Audery Hepburn   beautiful Heartwarming Google India  Packs Cinematic Story Into Minutes form  International film festival take   action  hair Just watched Venki   were  total laugh watch  climax cinematographer father     soul rest  Strength feet inches then   taller than    clearly Hearing good things about role  Congrats thanks thank  very much Just posted  photo Thanks   countless tweets   first little teaser towards Tamil thank  Vishnu  Ajit earlier   posted  Most    right sound  teri Trailer  Uyalla Jampalla sweet  Best wishes Just posted  photo Intense months  HERCULES   Hobbs Shooting starts Picture from  years   corporate life Senthil with   Ryan during lunch Happy Birthday  here     fans Fancy  across this Watched last Film     watching   Hanks film after  long Watch Theatrical Trailer Official Venkatesh  Anjali Shazahn  YouTube just follow  more   Mumbai Happy Birthday Have  great year Even   spent time till  early hours    official till   Happy birthday haveva Happy have great Cming   city very very Happy  Have    sure read   tweets thank    love SIIMA      celebrations been  superb reunion  lots  full with  actors  technicians Done with   cinema events   back   grind  full throttle shoot Arya  rehearsal eating  food  chatting someone classic which  grandad produced  called  Telugu Ranbir  called   Ayan  director  called     little cameo Just read  Filmfare Middle East Guys    spelling  single   Daggubati finally   film today before getting   Totally loved Parneeti Chopra thanks guys    surely thank  very much   chocolates Watching Heard some great stuff about Great team  great   know   wasnt special weekend   shot from Sunday Morning     Monday morning  epic shoot little over Finished  marathon schedule  days starting from       training till pleasure   Thank Nowadays news break     then appears  papers  next  true Thanks    tweets   parts        wish still remains  still need habit  over thinking reduces with    begin  worry smart  invented  wife added seen feature Done with  SIIMA press conference  Dubai    back home  begin  second schedule   Looking Enroute Dubai   SIIMA awards press Loved walking awards  Carpet sooooooo nice  seeding  must seeeee   with allu   didnt  this hear  loud   when  know superb night driving around  city last  haleem  kebabs  Sheraan   finished with  Faluda super Lets  another thrs always  next time shooting Thank    Much better Will  back  training field  about director says another falls   perfect rider would Direct  myself   want  HANDS free Sometimes  gotta create what  want   part Drinking   apple Some healthy things actually taste Business Leadership Award Most Admired Beauty Expert what    girl many years    right Some more random movie watching Dwyne more like Gajini gone Well  good   fast furious always Watched  VanDamm     player   time Dennis Rodman  commercial action film  loved Welcome  Well    rwally  call   need Thank     wishes  tweets Krishnam Vande this Sunday   only  Gemini just threw    hook   please   text  reference  this looked like   from  film pressing Damm wish like that  that anytime Good luck Just watched Jack Been  long since    franchise  Cruise picture  thank    outstanding food   know what   look many times   fake  fool doing better what  already being Peter thank  very much will come back Thank called  guest role   anything another picture  both superstar   life  grandfather turns Happy Birthday Love Just watched Hangover  watching    patch   first thank Hope  enjoyed belated birthday wishes  Terribly sorry that  forget Getting transported back into  time more  sweat   less  bleed  Unknown Lovely cool morning skies after Have atleat thats what aiming films  mine will   before Bahubali Half   shoot  half personal planning  heavy will Unknown Trust think    speak    change    with urself will never  happy   continue  hold    things that make  Instead figure  make them happy really   insist  making     never     simple used that weather  come back here Just watched  FAST Outstanding never turn  back  even  they taking  first step even when    whole Martin Luther your favorite childhood movie  Finding  Lion Most people want  perfect  just want  hamburger that looks like  ones first training gear from fitgr thanks Existence really   imperfect tense that never becomes replaced  unicorn tweet Always  Unless    Then always Truly blessed  relive   able recreate    time     kakathiya ranked   Most Desirable   Hyderabad Congrats thank finally ended with attending Good Wishing   great married life Something something audio       blink  miss cameo piece     happy fully packed Lots  prep work before  start Connect directly with   official facebook page offical facebook page goes  ADDA Promotional song Video link   know what  think Goodluck Wishing  friend AnandRanga   very best    film     cool promo thank     honour  them   company Many more places  many more height       greats  film industry    giving  this  form Indian Cinema   personal film journey     Digital Post Studio Indian Blessed  have been born   family  Suresh Production that completes Good seeing   ride   Buddy catching    flight  chennai ULAGAM FIRST LOOK  five Finally Watched   mini   most gripping  powerfully written films  this subject  Exceptional because  want     service Wishing    nicest people     film Tamil superstar Ajit Kumar  very happy Have Whatever  mind  conceive   mind  Napoleon Hill black  chilling pleasures  rising  easily    more things done with  much more time only  fells like half    Horse riding  weight training before breakfast   quite lots  movies will keep  posted only  prep  shoot Into    best board back   great time  Delhi  special thanks  everyone   films division just stop eating  food  your done  beautifully  convincing   performances  production throw   silent film  Franz  real outstanding  ability  narrate  tale without Just finished  event  first time  host  also  first time watching  full length silent film   full theatre Landed   Capital  Will  hosting  inaugural   National Film Festival tomorrow early   horse hope    more than  hour  beat crazy enough  think that they  change   ones that very good friend from also  owner   hotel called Fully packed  ended with  deadly birthday dinner throwing diet   Happy Birthday believe  most important single beyond discipline creativity  daring filled with readings   Looking Some   best things  life really About million years horses  size  ducks roamed North Heavy training    aint limit  anything   bigger   farther  will Good luck cant wait  watch plays Mandarin  arch enemy  Ironman  super Video games  lead  higher grades  Clearly that  case with Daytime naps help  improve your memory    risk  heart  this  after  training think this film will  Will drop thank   much thanks Rohan cming  your city Headed   Mumbai     used  flying   hour  flights   domestic circuit that makes Extremely thrilled Just   grandfather being awarded  PadmaBhushan honour from  President  India Good   taking  early morning flight  Been some  travel  last couple STOP getting       enthusiastic about     getting strnge concidence with real  incidents aftr   govt very next upcoming show        Star then wondering  everyone  congratulating   Just realized  dubbed  Thanks guys better  have failed  than  have never tried  Because  trying   biggest failure Sorry     Sorry  being  Back People spend money they   things they  impress people they Aarti shetty  closest friends from Mumbai been  founding family  Adlabs   with India coolest hangout world class theme park  india thank    pleasure having    soon from tollywood    mythalogical roles   diction  thanks performance  stellar  rarely     such aggression  Take Thank    innumerable tweets  watching  Really feel Faking  smile  help boost your mood  actually make most magical things     starts with  Cricket Every physical    tremendous learning opportunity because  order   have other  around thanks   great group came Sharing space    most  people    thankful thank  guys  following  helping  Promise  with better  cooler films best brother   wait  just  Sure Best Wishes Rana  turns warrior  Tollywood WARRIOR hope that explains Thank still Ikve spoken  Vikram myself  apologized  said   misquoted  will speak   convened Glad    cleared apologies     fans   harsh Spoke  actor Vikram says   misquote from what  actually sorry typo   touch screen Just watching  television series Wishing    very best    tonight  Charan good luck   cricket field almost close  Stay        mine  take anything away still  huge     your films that headed   right direction with close   disasters  your kitty barely    actor your tweet thank becomes  difference btwn victory birthday wishes   bless thank  guys  sone superb then   Times Food Guide Followed  with heavy weight training  then   office  headed   audio extremely productive Training  began with horse riding  action training with Vietnamese Just finished listening   speech  assembly  mean officially  play brother   Negetive lead   produced Thank Will convey Thank    your wishes   Will convey   them sunburn Sitting   activa  eating  candy  that thanxfor this moment     mine Wishing everyone  happy Have dream that  fight   haunt    rest  your sure   there well will connect soon with more   Hindi news well telugu cinema  America thanks   info  constant Watched  Gangster Squad last night with some Bombay   English film seen   Loved Just watched   privilege  watching  with  Megastar     Charan  outstanding above  thine  self  William Thank   much Heading back home   Lots   interesting projects both  actor   production  projections look pretty Cine awards last   blast  were Good Happy happy  Year  Just  back from  vacation last night   back celebrations more christmas         vacation till albums playing     Superb  songs SVSC title track  Nellore from Just watched Salman Khan   Totally enjoyed Lots    stories waiting   told     Working  putting   calendar Thank      loads    last  days with friends  Have  great going  watch     firend already watched  Best cinema exclusive with  great success asking   question    themed   absolutely  fictional tale with  relevance  anyone living Done with  double celebration   month  Thank      love Will  live   Call  would love  Looking   hearing from Theatre visit  Tirupathi Heading   Cinepolis cinemas   Meenakshi Banerkhatta  there scenes done without  double   much more real   exude  more realism   body language Thank  very much    wedding Feel Thank  making   geared   chat  with  guys  call  from Airtel mobiles Thank  Feels   hear that from Call when  done This   cinemas Hope  like online booking  first theater started trending Thank Watch special hour   today  Film releases Onboard   Rajamundry   family Been ages since been  suggestions  good lunch live call       middle east  Looking   hear from Hello sorry  missing    Been extremely tied with wedding  coming around  same Hope leader Rana Today interview  Sakshi Thank   standing   over Happy birthday  power  many more years supported  grow  film from visual production   acting happy birthday buddy interview  todays Eenadu Magazine Films family friends  loottss Although your brain  only  your body  burns  your calories pleasure speaking with Thank begumpet office Launching  promo Pride Fashion Tour  Mumbai  very much interviewing Manisharma  Krish about music  more group  still considered    best drama troupes   Telugu first female Walked last evening   BPFT  Asmita   from interview with  playing  surabhi theatre actore   thank Rana Daggubati Interview little more  Thanks thank   having Will start shooting   Tamil version soon after  release   telugu Sorry extremely easy   press  Please send  queries here    team  Hyderabad Dear  kumudam please   write  publish interviews quoting   when    never made  statements with thrilled  have Krish   Inaugural Ceremony  Thank Awaiting Vande Music Review thank full    filled promotions  Played anchor   interview with Krish  ManiSharma guru   recoding Sorry   late post     with designer Asmita Marwah   blenders fashion Congrats Nani Loads  love  wishes Wishing  very happy married   terrific future thank  having Life  like walking  know where   going   know where  have will start early next That  really     evolve  human  grow into being more Dubb fixes   morning  outstanding  lunch     headed  Vizag silence take    core when   film  Cant wait  watch Heartfelt condolences      soul Love  strength just  fear  failure which will limit Condolences    your entire family Always here   Love always   soul greatest danger  most     that    high   miss       reach waste  time     experience Auguste True Tiger poaching  illegal wildlife  habitat loss   developmental activities back    with Post Production finishing early start    went   opening  next Best wishes   entire Support them  sending  Campaign post motivate them  further continue their  with passion   tigers overwhelming  hear about  dedication  forest guards  protect tigers  such difficult recognize their effort have read   amazing writing thanks    experienced cast  crew  have come onboard  support Krish    make this film larger than what Done   Wrapped with some post supervision  Nice     coming efforts  every single must read  Ramayana series  Ashoka Banker done with moving    best interpretation   great epic Personality    last movie  watched Walking tonight   blenders fashion week  coolest designer   friend Asmita Congratulations Nayan  Laku  your first nandi awards lots  lots more  come your completed Views   views  views  idlebrain Youtube Super  night birthday Lots  love  strength     entire Flew  with  Megastar himself  board with headed  Mumbai   celebrations Birthday time wishing   finest  most successful director  very happy birthday Thank    enormous support  response   promo  Will post more about Leader  Trailer gets superb response Thank next  with  bilingual  Music will  composed  yuvan shankar Friends  wait Watch  audio launch   stream live Promo  from Watch  this space  more  Krishnam Vandae Meet  director  cinematographer Standing  opposite spots though Bringing   action Back   shooting   last song    hello from asking posting some images  Krishnam vandae Jagadhgurum Promo  this greed   that  been produced  SureshProductions  home production soon also producing remake with time   Hindi  Telugu smash  directed  starring Thank    superb response   images that have been    have    that   more LOOOOTTTSS Sorry been   Completion  post process  full  first promo   film will   this Sunday Also watched  enjoyed     cinema   genres  languages this weekend Kapoor  used  stardom once again  push bars       director   entire Closed  weekend  watching   nicest Indian films ever made  outstanding     actors especially Sorry been   touch   Been  crazy last week with dubbing  completion  shoot  some personal home well with playing only     birthday Thank  fashion awards  making   India Youth Style honored Good seeing  Catch those   that would like  join     Please visit  will  most Anytime   cause  bellyfull   where Michael Clarke John Coffey lives Good  hear from Dubbing  Completing  first half dubb    POST   film begins bother  answerable  anyone feet inches then   taller than   That means taller than   world mother  invention    also  father   Hussain Zaidi ABOUT ADMIRATION  everyone praise their Awesme quality Rome built    will  Muscle growth differs  each individual based storyteller choose   stories choose Waiting  what will choose come  today   indoor   floor tell    when foot prints   Neil Armstrong Will   Hope greatest human Ajith without Wrapped  sched   tamil  extreme pleasure  honor working with Really   great time dream  begin Boldness  magic shoots  tamil film Shooting round  having Back  Mumbai after very Shooting here   little cameo paying   tamil   Tamil Thank     messages about   foundation  indeed   honor   thank Shooting    famous Aluminum shooting next     cousin Breaks will Wishing  pretty   prettier  very happy Have    year pleasure   Love  wishes   entires wishes   much awaited hoping  becomes another Arya  GoodLuck cast  yesterday   sandwich Sweet bunch  Superb promos best wishes only sport  love watching  MOST Loved call during interview  well  Happy friendship connect when  come   part   land  places thank    innumerable wishes   sisters Thank  TIMES   lovely Really feel Thank    comment   Southscope   blast shooting Rana Daggubati Trisha Krishnan   super exclusive shoot  Southscope Wishing   very best    film with Force  with Start shoot  heavy duty training  what best    tonight Explored  city last night  Shahran   repeat along with Kaddu  keer most come here before      real stuff Eating   oldcity Feels good   back celebrations  best time Back home after Feels Finally feels like experiencing  favorite month  Driving   city Guys thank          offered copies  speak tamil read though Will   english help    copy Stayed   cheenai   superb shoots  both   leading south Indian film magazines Wrapped with  schedule    Done with  extensive climax action Celebrations   Birthday wishes   newly  Upasana Konidela Have  superb year thank   knew  when  lived here Shooting  Chennai   first Tamil lines   first Extremely Excited news  Vandae Jagadhgurm  being shot  will release   first bilingual Moved borders from Kerala into wrapped  Palakkad shooting from tomorrow night with  always entertaining Thanks  swinging  buddy Dara  childhood hero Kerala with  Lovely   waking  early  shooting   pace  weather Gods have stayed Because      reincarnated  need  wake  pretty much like Wild Animal Krish    this   Madness very powerful Sometimes   only weapon  Framed Roger Tell  some  stuff   there evening    night  filmfare  boarding  plane  Shooting  Pollachi  Pallkad sailing today  Tankbund with Shuheem Rahul Lobo    Chennai Direct Makes life simpler Congratulations  being  fine part  such  Outstanding Moving from  After  headed  watch down  calling       film   extraordinary experience that watching them both Superb buzz  Looking What  coincidence  Shekar Kamulla this morning   studio   edit   film Just watched  Amazing     Truly Amazing loved Manoj Bajpai    other actors  Some superb craftsmanship  telling Anger  never without  seldom with  good outstanding When there   dozen   actors standing tall  similar  Standing Taller called RANA anymore have immortalized Arjun watched Leader  times   eyes   even know  were  Congrats   film little      look back  realise they were   Robert Wishing   friend Dulkar loads  luck    malyalam film release Hope  film   rocking weekend Hopefully   part  recreating some  them   national Commercial cinema with  newest form  story Three days  Chennai  back  some superb work Really amazed   kind  films that  being made Heard    most outstanding idea   film being Hopefully  falls  Fingers Details Back   second home  headed  Bangalore   then  Chennai thank Hope well with picture      awards pleasure being there Wishing  friend  actor Arjun Kapoor  very happy Have   Force  with plan  Shooting  hyderabad from  will keep  posted  anything thanks  Sohail Khan   amazing parties Picture along with  designer Shravan  other models Walked  ramp along with   show stoppers   same congrats    winners Simbun Dhanush thanks  SIIMA    producers  directors    films  putting blast   SIIMA awards event   much needed break after   action Very Just back   SIIMA awards  Back  shoot from Headed  Dubai    flying with actors   celebrations begin Woohooo   Cming tomorrow going  there tomorrow  Dubai   SIIMA Getting back  more human working     sleeping   shoot schedule totally messed  body clock your film deserves   acclaim  Best wishes  many more Thank    those lovely comments every time Leader plays Need    body clock back Done with  last night   elaborate action Shooting nights     breakfast Here    newly married     minutes before Operating   without  wink   Just  back home   some Will  back   lunch again Shot  night    Went straight  function Marriage  such  thing    dammm getting  feel grown  Love always forever sorry    being there   earlier Will   full form Took  tomm form shoot  Doing another little skit like    Excited  extremely happy Been missing   weeding Came straight from  after  packup Been shooting consistency   nights  smtimes till straight  extreme action sequences Great start        named  this   full  positive image  director Krish   from sets  Krishnam Vandae Jagadhgurum heard some great stuff about  film Looking Vijayan Master fixing final checks  While Krish  approve year olds have      When    felt cool with Wrapped   because  wanted   because     superb work night sets always full  visitors   Victory   sets     buddies  Shrwanand came  nights Please welcome  friend  superstar     twitter Waiting  eega wrap     visitors       more  Gnite swimming   good  your    explain Night shoots    really Sleeping  waking   stunt rehearsal  shoot again from Editing   until     What  left often springs into ESTHER FREUD wrap  back Glad shooting nights considering  heat  around brand   Bollywood Hungama Love night schedules  begin  long schedule  night shoots   outdoor Done with  action Superb weather Fought Just  this from Working Sunday  Started shoot   Last    action Hoping  shows mercy planet allowed   this    shooting  some extensive action sequences necessities  doing    action film  hate little delayed start  shoot today anyways have only     Using  time  pump some steel Wrapped   second schedule   martial arts training     then  heading  lift some Have  doubts  saying    best book ever written   history  fiction Finished reading   time favorite  think   time   last thank Sorry missed  tweet Sorry   typo   earlier tweet  Gabbar Singh Watched over  Finally   Real PawanKalyan film after   congrats   super success Always nice   back   home after shoot  work    office   days rather than   hotel room back  sets  Krishnam Vandae Jagathgurm Shooting till Thanks  choosing     fantastic will  back soon with   improved Back after  hectic Department release Response  good  Thanks   liked thank  will  everyone Love thank  very very Hope    time Hard  believe that  newest version   game come with  government matter  this looks  other  this  something that    then   Balboa long  cinema  been stuck   particular visual changes  visual secrecy    hand  hand  friend Hahaha True need   unhappy    really appricate  good  feels when Picture from  first press Watch Amitabh Bachchan talk about Rogue methodology   making  Departmet   interview  bollywood hungama miss  fans   miss them very much thanks Calling missing  festival back      Watching Well  that final time    cinemas  Film  film    Mumbai Touchdown  good   back Missed everything Happy Birthday have Check   action making Shot  Taking  plane back  mumbai  Working till noon   flight back  hyderabad  around Goodluck with  Force  with Been many years since     fine dining restaurant Feels nice like   times with Everything will  Maybe  right  eventually  will That  director Krish trying  cheer   minutes after  tried killing    sets that     Here     memory full power   best wishes   over  Thanks Holding back your feelings stops  from getting   also hold  back from true with  Chief Minister    young dynamic leader extremely humble  Real honor  have Check   Rogue methodology   making    exclusive interview believe  believe    implicitly  Walt Bollywood Hungama office  chat more about from  first film   from  second film  filmcity this well Hope    shining   next Check   compilation  some Rogue shots Thank   wishing  Will convey  wishes Thank      fabulous time love Stayed there  almost when   shooting  miss atleast   been taking  easy  month because    Recovering well Looking   showcasing work from   chatting with  Delhi press   press name   What  league started  with  deadly Congrats   entire team What  Thank   having Going  watch  first Fight match  Going     evening with  Chief Change your thoughts   just might  able  change your thank  very much deal with they take  away from this  normally  role  Marlantes Easy  BOSS   class compare  with Agreed sorry Kamal Hassan while singing sounds better than Bruce Everything will  alright       alright Check  Rogue methodology   making Happy Birthday  have  beautiful Lots  lots worry much  wont believe  scrap        thots  stay cool   pleasant smile Start everyday with   leave  memories behind  have faith   better Been misquoted   Hyderabad write facts exactly   speak about  personal Thank wear glasses   just  without  wear glasses  reasons best know know   like Actually lots with your  hear  with your  invent  with  small brain  share  with Thank  very much Wishing  coolest  very Happy Have   year sets  Thanks  coming Today   after Thanks Nathy want    school   guyzz    back  Munnabhai School days were When  really study  year  just  mango rocking with keep  Good Luck sorry  down   missed  tweets  Thank  very much much much Thank extremely excited wait Thank  Hope well with follow   updates sincerely thank  team  doctors   Apollo  their Doctors from  Emergency have  become  part   shooting crew fist time with  press after becoming  Thank  Lakhman  sending Looking   another superb film from  combo Waiting   film image    just when   taken into emergency right after Today  fully strapped    first session  light weight Feels Continued shooting  with medical Thank  guys   love    much much better Wishing  school friend Tejaswini  Kiran  happy happy days  rest   cannot   home  Popped  solid dosage  pain killers  back   sets Name your iPod plug  into   press feel like  Hahahaha unleashed     song Good luck     first Hindi film shoot many more breath right another person takes their  stop complaining  learn  live your life with what welcome     lady   twitter  really addictive  Have watch    song teaser bouncing back into action Hoping   back  sets  less than Actually   take pictures   able  assess  damage believe that every single event  life happens   opportunity  choose love over Moving  back  sets   acton  Films reference  state  mind  maybe   more individuals things slowly   person  used  mean  world   seems like  person   know Shooting another action sequences    rocks  gravel    first action Loving every pain  feel today   Strength  will feel Never never never  never Just   Because  meant   will justice  their crime trailer  Department Cant waiti  watch Going   When best  tomorrow Will     watch EarthHour   timing  followed   around   companies associated Hope  association helped shooting   hills outside  This  also informed  media  press weeks before  actual Just  clear confusion  assumptions made about  EarthHour   association with   never going     event direct proportion  phones getting smarter  People will  dumber  Hahaha when  said   meant Wishing    earliest friends  Mumbai AartiShetty  very happy Have   year  loads  luck Mumbai   final patch work shoot  completion Twitter services   phone were Finished filming  solid action   hard  rustic Your cellphone  more computing power than   NASA   launched     launch birds irony   artist  that   celebrated  your hearing very good things about  Will watch Congrats Action sequence  sand  extreme heat being captured  Burning Back  sets  Shooting   acton sequence    terrain  Hoping temperatures stay ever  Bombay party that   most southIndian Wishing  friend  superb   lovely year tragedy when seen    comedy  Charlie thank   choosing   putting list  Most Promising Newcomers added  video   playlist  Ishtam Trailer uploaded  video  Ishtam Trailer Watch  director Prakash LIVE  iNews from added  video   playlist  Ishtam Trailer uploaded  video  Ishtam Trailer Watch with Prakash LIVE    Inews housefull  Congratulations  Thank takes straight release  telugu  more towns outside  than  ever Waiting   full length action movie from KrishnamVandaeJagadhgurum coming spoke  east godavari accent very well knew   dance  xpctn  much dnce    really  thanks Finally   telugu movie    screen Another image  vascular pumps post training Thank  Jatin Good  made   kitchen  only   Superb Thank    honor  work with  Looking   doing   more work cheers thanks When   going  watch Larger opening than both  earlier releases  positive form  seen Could    better Ugadi help  spread  word   when  film Spending  summer     second  chat with chat with brings   best    bees Could     link uploaded  video  Ishtam Song Chang Chang matter what     computer  always     True open heart with Parents spend  first part   lives teaching   walk    rest   telling    down  shut caught  live  good luck with Charge your     Airtel geared   talk  about about added  video   playlist  Ishtam Title Trailer added  video   playlist  OSATHIYA added  video   playlist  Ishtam Title Song uploaded  video Changure Andhalee full song  Ishtam watched open heart with  True lines about thank Bookings opened  South Star Awesome dance    Thanks  Prem Rakshit have done  without added  video   playlist  Ishtam Trailer added  video   playlist  Ishtam Theatrical Trailer added  video   playlist  Ishtam Title Song Coming  talk  about Myself  Ishtam  Airtel tomrw Call uploaded  video  Ishtam Title Song advantage  living   past  that  cost  living Late nights  early Best place  pass    aircraft Zzzzzoning  Connect post also  Samantha Ruth Great evening   Chaitanya Students  terrific great    link       song will call when  Mumbai watching   open talk with  really Headed   press Meeting  entire Vizag Looking forward Excited    National television full power  telugu cinema with   thanks surprised  know  much  picked  from learnt  much from watching  give     Very sweet route Heading  Chaitanya college later this Looking trending  congrats Thank know  were here Congrats people  trying  bring  down  only means that   above congrats  music director Tamman  receiving  special Just attended  Gemini Television Extremely well Congrats   team   winners film ready  release  next heading  completion  another  shooting floors superb trend  support earth hour pledges   Earth Hour Long packed    opening  SureshProductions  venture with Sunil   directed Ishtam Hyderabad Theatres List Wednesday nunchi advance booking starts  multiplexes  Thursday mrng DEVI series  superb events  Bangalore come    headed back Looking   cming back  wrking   real lion does  concern himself with  opinions   sheep first press conference  Excited undoubtedly    delight speaking with Same   total pleasure Releasing  title song video  Mantri Mall today   intro song choreographed   first full dancing Found  interesting display Courtesy  friend Count Down Starts   Leader Days Hours Minutes Headed   extremely early morning plane  Been years since been Will update events honored    part  earth added  video   playlist MAGIC REMOTE want  live    hearts    want  live    woody Devi theatre  confirmed     releasing should watch    first Here goes   warm welcome   superstar  tomorrow  superstar from  first back HAVE FAILED    NEVER STOPPED Words  make History Rather than wait   storm  pass  should learn  dance uploaded  video  Ishtam Theatrical bring them  right   heat Launched  Audio  fist promo    GRIT college Music will  available  stores  Promos company    lucky  have    Lots  luck leading Audio company Venus enters Tollywood with Change   audio     audio will  launched  March Evening  GRIET Happy Birthday Ramu Have  great Power breakdown  rally  sign Where    passes  audion  studio gates will  open audio launch Ramanaidu Studios    Will  showcasing clips    song   first look film coming   completion real wait    film    Most   learning experience Finished  heavy  workout early      sets   shoot  last action never   motivation  except     keep  real excitement  playing  Donald That  from  first photoshoot ever with  images have been  circulation  over navvoo muthyaalee Miss those  Thank   bringing back Done with  just land into Over   shoot tomorrow morning Heading straight from   Mumbai  complete  balance work   looking     much Thinking    somewhere Stuff  interview   with here goes once again madness  continues till  very like  first song More coming Done with  song shoot    Temperature   time high during shoot  feels skin tones keep audio will      February with more videos  songs      Film will    cinemas almost Finished Film    final Picture  sound will  locked   first week Headed   airport taking  midnight plane  Filming  introduction song with What does NaaIshtam  means said   most selfish Clicked while  almost drowned     sweetest Thank </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>