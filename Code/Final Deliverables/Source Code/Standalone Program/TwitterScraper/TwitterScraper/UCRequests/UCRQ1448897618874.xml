<?xml version="1.0" encoding="UTF-8"?><uclassify xmlns="http://api.uclassify.com/1/RequestSchema" version="1.01"><texts><textBase64 id="text_1">hello   from    school tiny possibility  check with  after    related  Ishwari Prasad Singh   Hungerford Absolutely Would gladly give that tooth away again  that recall   where  broke  front tooth over  still wear killed  with better than have spent  lifetime hearing Often More often remember spending time there with Kaifi long before  left Kolkata  came    about Read  Column This Missing Bullet Proof Jackets  Bullet Proof Culture  Indecision Last  days  wildlife photo exhibition   Jehangir  miss what Thank   your letter    excellent idea  encourage reading   sharing Love  Riaan  best wishes  both award  have Thank     editor  that   while Thank  That early   needs   done just  column this morning  Mumbai blessings  always certainly Loved     powerfully articulated poem  someone Glad  liked  where   these look    that stern still   will find Thank  Will tell Chambers   Lands sure that   reason       very weak  sick   take care Missing since last  thin stray  barely usually stayed outside Life Line Chemist Every life  Whether human that    real refugees will  refused entry Every life lost  Every life taken will   cycle  violence will What  moving People coming    stadium singing  French national refusing   cowed   insane Paris carnage brings back those terrible memories   Mumbai When will this ever throughout anything  they  shipping animals   Really best however belated they  appear    that attribute comments   that  never rarely hassled  certainly    talent usually criticised  being anti  accuse   being  blind Modi  must  doing something hate   that   stupid Watching Grand Alliance press self stole Where were  these people   today celebrating  victory   Grand Till  twitter   fiefdom will   real challenger    Rahul Please Prashant Kishor    star  Indian could   suspect Mulayam Singh made   should have joined  Grand Alliance when     will look like  Johnny come scary    Congress celebrating   thought they came fourth have said this   Women   wonder  pursue them with such Time    seek build however capable  them every  lunatic fringe religion based  return good time  repeat  blog Listen  your happiest Nitish Lalu   vindicated That  correct    disagree  there   intolerance this    against India voted    hate  twits  create mayhem agree with Kashmir must  brought back into  mainstream Read  cover stories  wrote   Illustrated Weekly  India when   Never  from best course  designing       want    join better than world Those were    biggest battles  fought against said dangerous   everyone  shut    talk about Both points  view must would love BlackBerry  make  comeback with this Iconic brands must wise  circumspect would  well  stay away from  such polarising midst   important  have  small  support Mandana Karimi  this Bigg Fine   will  find takers   paper that just publishes  news without answer  dear that    even have  heart Just  sense    love India love friend wants everyone  shut    talk about  fear  dangerous friend could  this column good friend could perhaps read this recent column must   tech Will sort Never hope  Demand what  rightfully open office   only  work ever gets done  hierarchy does  flourish against  care which Govt stokes  will fight    fought good  hear from Thank  Where have  Your blog Using this artwork  sent What  started years Targeting   just unfair   reasserts what   unhappy Thank   hope  took  right turn when  roads diverged   sunny tried  make  that  seldom chased  created That   magic knowing Journalism    politics charming Loved puts   fine performance   sharp  Watch Sobhraj   jail then   intelligence agencies were anxious  figure whether    work  fiction   real plot  kill recalled    with Sobhraj when  published  manuscript   assassination attempt   Indian Read   then identify  characters   They   real life What  deadly  which delves into  private lives  bestseller Read Loved What  deadly  which delves into  private lives  bestseller Just read seriously doubt      Times Thank   been   journey   impossible  take this weird life There   editor after  Then   your facts right before  point first strong attack  Manmohan     help Very generous     that Actually quite   begin They changed after becoming Prime that  wonderful   always wanted Shall  meet  that years   Illustrated Weekly  from  Outlook Anniversary were  come  What hedging their bets   much  crystal ball what  expect when  give Talvar showed  where Given    have desecrated this planet  wiped   many   sure Shubho  white haired   Durga bless   keep  going through your advancing Thank  Durga puja  very special      come from Enjoy   Payel   wonderful season Always  same   better service  Hathway promptly sends Going home from launch  book Dreaming Delightful full  Rajiv Gandhi  Lots They   have   issues  their forgot Jaswant Kishore Parekh   best photographer  that read parts     cocked  year   Enough introspection everyone  over reacting   humble   returning  Just What  wrong with  President     proud  stood   said stop police extortion  such dance  rehabilitation   girls  were thrown year  Jivdani goddess temple  Virar  stopped  animal sacrifice this  more killing   Thank Supreme Court stays   Maharashtra dance Another time  stopped showing respect  already famous people  putting  their statues  naming roads  chowks after Real estate prices  Mumbai  Delhi   really tumbling  Great   Perhaps   great Just  case    know about This  like ships crossing  Both missed Every  must    schoolbag Every  must     read books that have nothing   with number  people returning awards will only  Govt will have  choice   Better taunting those  gave  their awards  protest against  intolerance    need    things These guys   blot   name Great  know  Netaji files will  finally made public   important that history column  Mumbai Mirror this tell  story Have  wonderful  today   great year Thank   have  wonderful equally true   fact that every point  good  right  clever  stupid   right should  together  rebuild    start  getting  requisite views   forms  artistic censorship  well known  well Call Ishita   handles Sometimes  passed Sometimes       great view   movie  exactly  same   opinion    Talwars Sounds  Will most certainly   watch Agree with   always walking Time   most precious wonderful  know directed   will  happy  know think  great idea  celebrate every Lets look that every Prime Minister   show respect  every past when would  have  time  actually Will  watch Talvar  Singh  Bling Today  want  rest  Stanford Professor  Philosophy John      time more  celebrate  more     less  remember what those  actually stood bureaucrats have courage  write  book like Kudos      Ghosh  living  retirement Bank nationalisation   takeover  Read   book have  choice   come over  Kolkata  pick them What amazing books thought everyone  agreed  scrap  toll booths everywhere  election campaign Wait  History  tell  what  already they were shamed  history same  mbps line refuses    watch  moving Buffers Really What  that    with spelling  name check    talking about  extra meant   error Imagine giving them liberty  commit errors while running thing    column this morning   Mumbai Support  Welfare  Stray   great bunch  guys doing great Chase Fame  money  vice Like  escape  charming lady only  fall Sorry  time complete  Wanted  write full them make  They bring That needs   thought  will  unfair  some very good Chalbaaz will make movies  chase  occasional sunset into Publisher  three  Saarika Trust they They     openly   good candidate  always Irrespective  qualifications Awards  welcome  never crucial   creative Sathyu   incredible film cool with  fact   cool with  hair When   younger   shoulder length promise  watch world  moved Nothing   their original form Garam Hawa    around during   this   insight into   changed Actually Truefitt Hill knows promised this    They  running  excellent short film    their would suggest throw caution    Attempt messaging  becoming Short films will work better  people  used    likes long lectures think  Sathyu made  feature after   Hindi will   what will   what   expect from  popularity Just read   joining  Congratulations  making  career traditionally promoted ideas  right  wrong  brought castes  communities since  tweet  lost dachshund found  restored   owner   tiny slum near Altamound Good things referring  front page Business Standard flights  more would  India start   flight when  could have just  easily started were  What brilliant blog  what fires Silicon Valley  what India  learn from point  ownership  everything  like   longer absolutely Does that make Kapil  star  herald  return  Abbas Very rewarding  least some parts   world They cope with your  after  growing Smartphones obviate  need   movie music sensible  rent  flat today than  Owners   return  capital give them they   need chairs   simple tablet will heartening    incumbent Chief Minister raided   disproportionate assets Shows taking corruption Sunday    missing  itinerant flute  never came  this Afraid  being drowned   Visarjan First educate Then engage yourself endorse everything  recommend    sometimes recommend stuff  must best    this   encourage innovation      cats loot delighted   Silicon  will redefine    sees Make  enlarge  vision  what growth Oops where  this come must confess  loved this please look into this  deserves your urgent grew  with Penguins  They  still  favourite Though they have never published remember  night years  walking  streets  Kolkata with Paul discussing Black dachshund running around lost  Warden Road those   have seen  please call Ishita Wonderful   pick  things from thin launched  last book  poems  Where Vidya Balan   read  poems   huge poor very    serious heart condition    gave   daily Husain    Ganesh Pyne    finest  said Pyne Read today saying      because        because     choose Sacrificing animals  actually  misreading     testing  exhorting humble    discovered  rossogolla obviously   better  than America chooses Russia doing better than that explains this enthusiasm perfect description  both  Shukla just followed Loved  self this  some While criticizing  current  think   last  bandh sarkar which shut down  went home years before films   They   time  inspiration Thank Will     when   really Wanna come Sorry   carelessness  Governments annoys   tend  take such disasters Welcome   Seven Year would still like  thank   Everyone  follows including abusive  part   family just  tough  live  this world with  number  swaggering brats  deal with more time reminded himself that  least governance   best remember working with Feroz Khan     What lovely both Wish  knew    Might migrate wait   next media award  Toronto  Angry Indian Goddesses says  Indian women  meets    must  Mine Scary  they improve security   many unnecessary Anupam  have  introduce   your  struggling    with Greater ease  doing business  India Both from their  Thats  magic great thing about Indian politics  that such  debate  actually happening without acrimony sure  change  tonality   wants   need    threatening  offensive Even   have  Instead  building    friendly compliance they continue  threaten citizens with dire thought that with  going      threats  intimidation long    live with such friend came   stunning reversible Modi jacket made  caught They make agree should thank    made  film with   short notice with  standing Perhaps   contact  when next  Mumbai    your phone number   will call  when said because that    media  referring   offence never said there  anything wrong effed    finally    right  truly   best  your That   Here   video   song from  Kahani capable  writing Lucky  have   portraits    Souza   hand written letter analysing That small child    saying this ever since      anyone snapped must Reverse Despite being reading  Mahesh Sharma this  agree Censorship must  only  communal  caste provocation Even though   befit that   moment Does anyone They  enough recognition from those they will When  time  Films   just censored  They incompetence    wilful This  best column   know     smartest writer least  English could have been Nehru wrote correct  this There   storm last   rained   woke      awnings   garden Absolutely Though  newest case   Stuck  days column  thanks found  link with great difficult     earlier this morning finally  friends Souza  Gaitonde  finding Years after your death others make huge money  your fine column   NGOs  Mumbai Mirror   link   share with Pick   copy Does anyone really read   columns    they only meant  titillate read horror stories about miners trapped  months underground without food   still happens here missed book launch  wishing  book   very Whoever comes  power becomes Read this article   people  seek retribution against could well Well This read this before    intimidate films Hyenas  actually hyenas  they closely resemble  certain kind  politician  would agree with Watch debate    most    pompous   prejudiced that   taken that  much revelation   Netaji files will eventually     rewriting  Indian story  Bobby  eccentric chess Life becomes   According    Outlook cover everything  were told about Cholesterol There  better  infinitely more capable  than  Gajendra Chauhan What  that   with appointing  fool  head Toby McGuire  usually good   should  know  Bobby Fischer  true Absolutely  Steve Jobs  technology Congress supporters  complain about numerous bans   Congress    wanted   wifi  public Uber    offer free wifi  their  still want    wicked taxi Good    rupee  stock market    long climb back    quick steps perhaps  Prime Culture Minister boasts about  culture London cops arrest  Indian driving abusing himself before finally rain     many lives  debt this case  students clearly have Dont  words into other   said anything about  comment  about Gajendra well soon Your health  most Your framed work    puja congratulations   newest father     promises  tell sexy horror tales   Have contesting your statement today that    supporting Thats  quite Everyone Rahul Shivshankar  Every sensible Indian  supported Ignore Raza Academy   Their views History   more    erase    more  repeats remember Some more were collected wherever     beliefs remain what they Radicals feed  each Husain   great  bunch  losers hounded   great music Another bunch  after says only employees spend years    must  really lucky  that  better that record four times Done  worked   many Govts  none  them really deserved Watch Aparna marvelous film What  powerful Speaks biggest tragedies      little finger raised  those  could have stopped Just heard   moving Movies wait   right time  they  crowded They   sold   oven like Really  wanna  dying  water reservations  transvestites real must   biggest  money  politics killed  Sheena Bora Someone needs  hunt  down  achieve whatever happened   Sheena Bora  much noise  then every lead goes  anticipated tech keeps  column this morning  Mumbai Mirror special    father  loves  Stay well    rule Mumbai Mirror edit  blog will appear  Times online site since  comes with tech  doing what Govts have failed Thank   much love  around Wisdom demands resources  first deployed  resolve urgent human crises than into imaginary future love     crore Buddha statue    really  when next door farmers  committing suicides every Millions  credit debit   mobile beating back black Only   bribe Govt Vegas    Anupam Kher   Finally recognising great advises this Govt belongs    must What earthly reason  there   insist   unwanted Gajendra Chauhan battle  lost  long time there   winners  take  bacon tech  hurt manufacturers   making  world   better Greed  being replaced   idea Tech  diminishing concept  Taxi apps killing  DVDs replaced  streaming Fashion Wardrobes Consistency   hobgoblin  little Real people change their opinions Everything  about streaming these that  precisely what   equated banning with violence  therefore condemned That  purely   disapprove   bans that   need  take love   chase defy   figure   real Grumpy  twitter   many clones possibly    best bookshops that sheer Amazed  They call   routine  everyone knows  linked   Mukherjea just  lots   announcing  release This  what  have been bemoaning from Lord Keynes   long This   truly wonderful sure they know   regret   sounded that     intention   fought  OROP When will  Congress stop Only then will voters begin  take  seriously abuse  remember    humble  payer  pays    crore liability this classmate  quit joined Ritwick  came  Mumbai  make movies  Anyone know where Sudipto Bose What  need  self confidence   branded wear Even today    best designer stores   best shirts there  White shorts  blue  uniform  years While  current Govt  demonstrated  Show some some this  called Enough  been amazed   generosity  Austria  Germany  taking   huge inflow  Syrian refugees that other nations truth  best things come  somehow  trash what makes Bollywood great opportunity  great Shillong   close loved also Naughty   Chalti  Naam Tell  there  single celebrity around        media What  they  stopped   single things  agree Half  great  Marx Brothers began  Wish Utpal Dutt  still around without Adding toilets    crying  buying  house  This tokenism must sure   expectations from       reach  beyond Becoming more obvious Walking down Wisteria mankind ever meant what    made extinct other killed despoiled  raised this still Breaking News   tweet frontispiece finally gets Hope   good Enough  Time  close  OROP Enough Enough always wonderful   poetry being  whatever India  father have married    brothers would have remained Greatness Greatness  easy     thugs  keep wise they would make interim FTII   heal  stress regain  find favourite Read about  politics  Mumbai Irreplaceable parents were both  respected teachers above  till   coaching ones   coaching classes just found  perfect   slim They used   fashioned balm trust anyone with  razor Brutalized   daily tedium   self  face feels totally style razor   first time First time   shaved  someone   truly   Pedder Have  finally slid into  bear Twinkle Khanna  conversation with Pritish Nandy   debut book  Funnybones  Penguin Random House  Crossword last that could  Will  really Terribly terribly     name  these unnecessary This really disgusts Shameful beyond combination     think  essentially stems from compulsive ticket reforms   quick small changes  make  huge Idea     Govt what  have  been waiting Breakfast Done  tell  when   will  back wherever Thank   shall  never wonderful that  courts  intervening  such animal related Till  hardly  story that will survive hardly   cool place  Wisteria would still prefer     that cinematic language appeals tweet cannot change what  billion people cling would  happy     have Loved  Invitation  Fine work    hate babes  like blood chilling   absolute rightly They  responsible  their boring Could have excited  scene  shaken have read  book  very much admire  thoughts     however agree with  views suits only politicians  their vote toppers these days come from modest always have  support These   ways love   charmingly been Time enough  corrective action  have yielded   toppers  today from humble This  Never even guessed long   looks lovely  anything Whenever   into  marvel   simplicity   wish more   wrote blogs like almost years after Perhaps  time  stop demanding reservations    compete killing dogs with such brutal Loved  internet    flight took    unearthly hour   would still think killing stray dogs     need  seriously incredible every    what would What kind  silly comment Waiting   your  film Hear that  will  releasing  Hindi version have spent  lifetime with animals  discovered they  more human than When  have dealt with  system   long    tires imperfections that best define They make oversimplify Quite   think   absolutely fathers feel  same They  perhaps less Like deeply suspect  investigation which starts with identifying    bound    twists  turns  more facts Possibly    perhaps   playing  Hindi film song stolen from suspicious   investigation that starts with That  smart renaming  Connaught Place   stupid   cannot change history  changing fact that  support OROP  well known  equally well Sounds like music   ears never noticed when does every news story always     witch Must   citizens suffer because  definitions  political correctness change with every woke this       itinerant flute  today   playing what seemed    losing Congratulations   great actor   long term  rare  these There have been  bigger scandals than Jeep reward   them clear possibility  have committed  heinous  good idea      cops  courts decide will protect Savita Bhabhi against  whole world     want  rakhis   want Ofcourse  Patriotism  about loving your   hating that congratulations  whose  makes  world stand Magic flowers   magic Thank  Have  great Loved Sheer especially  Ghatkopar  Dadar they  always Never morning    Lounge   bustling with Hardly  place  Mumbaikars really Retirement  only  those  grow  there  some  never  Shakespeare grow chasing Coming  think    divorced      idea Even  good lord  Gajendra Chauhan  resign from Some things  beyond divine while    After what happened Tell    would anyone want  wake from  afternoon Where  these monkeys will   soon   biopic will fare poorly  comparison   magic  their real Extraordinary Issue Kingdom never knew  were  Many   best friends were think  generation left their text books  went  Naxalbari  fight  unwinnable Think   protector  Think   myriad Bewilders sent some stuff  your Delhi Told        your agree with     respect   they army veterans Makes  very  nation mourns with those  complain    column today   smiling picture this  perhaps  most Forced  with  group totally  something Mulayam Gang rape    check with some  your accomplished party Very unwise When  arrest they  even more public   Govt loses further could have genuinely thought  look that explains would anyone  from Actually   hoping  stop   encourage  other  write what happened    Chelsea supporters    peep long Much awaited This never ceases  surprise Thats  loss   dream body Food actually right     name    uses    name Kushan Shashi Kapoor performed   when  were kids    Merchant guess Never thought seriously hope  younger than loved Mags   Crain   Delilah   Moulin appealed    played       came after swimming   list Abhishek Verma  winning  Archery World Just wondering where  other Abhishek Varma  Tihar Anyone with  picture   three Gulzar will    hear Nice  have    politics happy  bring  different flavour There   many Anoop Roys here  there    Anoop   knew  Calcutta  worked  Wonder where Never forget Bengal charmingly British culture  made   Remember Brahmo once there were  three these Food Food Food Salma Hayek telling    eats deep fried frogs   This kills good Principal does  want  wards  join Choudhries   guess thats never knew  guest edited  Mayfair     copy yesterday   Hyatt always knew there  something magical about   never knew  could play  Bengali girl Years  when  began  read about India   work that felt  most welcoming Only    learn   Indian   learning wish those  define Indianness  religion  caste would read this outstanding takes  There were more flies   front where  than passengers Came  inaugurate  show  last Translations  calligraphy  paintings  Paresh Loved spoke  soon about   from Amritsar  Served biryani  breakfast yesterday peanuts  lunch Visiting  Golden Temple after  many years  another experience Good  know that Amritsar  Shesh Lekha show with Paresh Maity    Hyatts  cities courtesy Stellar Foundation   Choudhrie Thank   have  idea which   discuss next week when  have    Amritsar while  promotions will first will   Just remember   joint    calligraphy most awaited     year Tarantino after  long Thank  Long time since Really amazed  human barely     will   mughlai paratha Which   opposite behind  Grand  shut  last  times Thats exactly what factually  have wrong must  brought  makes Banning child porn   good There   limits  anything except what  impose upon pray what   broken    laughing   crime Times  India Google will throw finally   guts      tend  sidestep  these quite easy really    comfortable within your seriously doubt  negligible minority have  rest follow  Radhe RgVeda belongs   Gurcharan quoted After banning imported cheese Putin wants    wonder what  connection  between   could harrassing  guys  State  made them  shining symbol   comics have Usually every protest fulfils  social finally Benedict Cumberbatch brought Shakespeare back into Barbican Arts Centre sold   Nightlong Bobby Jindal announces  wants  chuck  Supreme Court Imagine Piyush Jindal getting away saying that Whistleblower Edward once confiscated   returns  kick     Fest   beats reports that  with robots will   norm  Will  Censor Board allow   show naked fornicating self respecting Bong prefer Punjabi food  Really Research  just found smoking weed   health risk      suggest  start   crib Wait till South African scientist offers evidence Bill Shakespeare smoked cannabis   pipe called   native Bong   proud   discovery worry  much about   result  have created  boring with Woody    daily  only   keep  sanity  this Alice   Little Prince   Woody Allen charming  will love sick  this Everyone says invest long fortunate  carry  stillness with  wherever    midst   hubbub what that What they   language  beyond Thank   rediscovered thank   Never   more more devious language devised than legal have multiple ISPs    most unreliable although they promise MTNL stable Have  noticed  audio books have suddenly Holy This gets from   worse    read about tech upgrades Amazing  exists only Thank  Bombay Hight Yellow sodium vapour lights  Marine Drive  yellow They    same confident that those  need  hear   want Indiscretion   better part difference between porn   label  things  same Hash  cocaine Look  alternative technology that does  emit gave both points      best opposing  people views    well   urge   also listen   contrary view  Sunitha often have  thought  doing that North Indian  what goes have  issues with never having  drink again    tells have  face   twitter have been waiting   longish Best thing would   stop  subsidy  close   much  smoke around Reduce  unreasonable FSSAI  Times  India have  decide whether Maggi noodles    clean Yesterday morning  said  evening That  true   know people  claim  have bought them they reported something else this have seen  heard   believe  what       freedom  choice  conflict with Thank    matter  personal    stop   only drive Please   much least somewhere  India life    chaos Ursula Undress  Really should sack    suggested    caused  irreparable will  into that What    guys  less than  couple  they have brought back  Congress into Double  that  crime   want   double addicted    rights   Indian also want     mother Thank  disrespect  bans  those  impose digital world  modern tech allows   circumvent many restrictions that  State unjustly imposes truth  Adani  capable  digging  mine anywhere   find      Govt ready  back Huffington Post  porn site Please tell dialled back   Land Bill  what will  crony businessmen must build  Digital   must build  Digital  only    fight back bans  unjust State have  sneaked    magic Remember   bans   some    other  leads   watch  fight back Carmichael   moment  thought   moving  Carmichael Road  build another bans  always Remember need Unless ofcourse  feel  humans  better than  research shows thats that   steal them back interns will   young boys this Everyday amazed  trolls  take time    incredibly unkind things   This really   best stock   told  risen hugely since  foolish   They knew  could more thoughts would agree with    sites have nothing   with porn   first There   industry  growing nothing must  those  banned without adequate research  back FSSAI approved  Central Food Technological Research Institute  given  clean  much  another Join  Learn   Talwar family  been Protest against their None  know  they stand   Hold maybe  Chinese   Russians have want both must frogmarch them  where they  civilized society keeps banning from poems  dance changed from    last blog scared   column this morning  Mumbai engaged with Extraordinary interview with World Kishore What    except  miss thank  very much  sending generous  thank  very much  saying bless  always were  Will  give   call when   here Just  Mama  This time  Watched     screen  Broadway What   songs come    existing business         business being planned Really  where   come They  actually good  every  thrilling maybe help    have this awful habit  producing  best books   will bust wonderful  know Most  them wonderful  hear from  many writers tell  such wonderful things about grieve  much   jobless   grieve   wrong with always excited      push back  limits that think    heart    pretty admire your   Delhi Times  then Come back poems were   think Every living creature deserves that That    number  vegans keep growing brilliant never ceases  amaze really think that year olds today think like year olds books  poems have   Like  just  with  version   Isha Poetry    like Their context becomes Lonesong Street  into some editions Never looks   books were  designed   poems were typographically integrated with Nothing survives from   except  dusty Lonesong Street    book  People remember  because    first poetry bestseller first book  poems  translated  published  Spanish from Mexico   Fell  love with their learnt Spanish  read  came  useful  read  Octavio    Strong poet truly  love with  epic grandeur  Latin    forests Lovely beyond Brilliantly   exasperated every time  look They have recently executed several Sunni agree with Hindu terror     Muslim   victims  ISIS  Muslims Exporting stray dogs  Amazed that  most literate state should PallabB Have  best year  your life Starting Dreams  what keeps  world agree with Rahul Gandhi  most things   believe  made  fine gesture  going    backing tribute  what  once were  still Finally  commercial capital wakes    simplicity   mobile boarding know   weekend when  wake   music   itinerant flute player Both have bankrupt companies  their People   adopt what they  only They adopt what they Homeless dogs  much Nationwide statistics show that  maximum number  stray dogs  adopted  homeless clear from  facts   Read hope  book  will remind     plight   parents     jail   crime they Must  Painful  deeply Tells   flawed  criminal investigation  justice system Kamlesh Sawant   corrupt police officer Gaitonde    discovery     stays with brutal Loved  killed   Vijay  outstanding performance   underplayed have  mentors apart from good that someone  chosen  listen   protesting Students must  respected   voice Thank  This picture actually both Bond    Fleming rolled into Read Most loved  nation mourns Stay  Yakub Memon hanging  July Matter referred   larger bench   Supreme Difference  opinion between loved poetry  wrote   remember  launching  book  poems  Kolkata years deeply loved   enriched  life   many  wonderful supporting  great tech irresistible Founder Praying   quick  great only   want   Details  Check just  classic   also  movie  will better than must  really  took this long  watch   impeccable Waiting   love films where gets  chance    this looks like were  What Like every  respect  judgement   Supreme   also believe Tiger Memon must  brought back This   terrible crime   animal lovers must join What  have said    should hang   crime committed read  Quite Thank   hate nostalgia  when  present   worrying  often slides into Thank   much Your  incidentally     favourite that  called  real There  only  reason   sports    They     people  care personal experience  people file defamation suits when they have something have  serious  think   more column  never This  Mumbai Terror   industry Millions feed world really changed that  blog problem  politicians   thing have said this many times Read called footprints   sands needs  tomb  need   remembered       those  love Tamil Nadu Govt wants  tells  officers  increase  revenue from more liquor  there  consistency really know what  mean when  talk about They certainly deserved  more than Yakub  truth Corruption  ruined Terrorism  just hate   context  present  need  iterate   else people will think this    always Send    moral column this morning  Mumbai Your collection  truly Making movies  about  Anyone   that   fine choice Ananthamurthy     most towering figures struggling  make himself heard over  cacophony live  Delhi   already look after more than forty Wanna  doing already have  taker   India nation that does  listen    students  asking have fought  Congress Students  over  world have demanded    their    academics   There  nothing wrong Dear      FTII Chairman must  said  FTII students must   hell   difference between least  will replace   bling  current Indian wedding doubt that despite   wrong things happening   changing  inherent grammar  Indian world  wary  Communism world  unsafe   just Have  forgotten Julian Assange  Edward Unfortunate   whistleblower  isolated always worried about  fate        because they have dared  question  choice imposed your column this  politics  religion  slowly  inevitably taking over Loved  trailer   especially What  perfect Windy Languid Went   long walk   Feels like waking   another reach them Enjoy both  great     Rath India needs Such innovations  what modern India Their loss quite  reading  watching Shambhu Mitra that   rare thank were strong  firm  your nicest place   world Crime    death sentence Loved  first look   Bajirao Mastani team  Particularly smoking  Ranveer paid They have hijacked main role   FTII chairman   bring credibility  honour   Thats   need someone agree with that    wants    head FTII   appoint   cinema industry That makes   Actually  best From time  Only  come back agree with     miniscule trust Lord Keynes   long      history takes  back seat  breaking rather both  temperament That        greatest Great players dont always   love them  ought about Spoken world everyone chases  current Everyone else  seen   however amazing they honoured   love  Entirely delight   then  suspect  knew what would   should idea there were  many fans around till  tweeted  fantasy about  Shows great losers  have your team when  comes   definition start  Choice  followers  exactly double  peak sales   Illustrated ultimate beats   finals Which friends  will   there like tweet  wish    best These internecine wars will hopefully      them like  high drama  India  Pakistan coming   negotiating   predictable cynicism  everyone difference between  Corbusier   urban   pretty much just Scary viral fevers that   down  weeks that  take bragging rights   tech   basics Calls without Three  beset   same Greater none  them even remotely capable  coping with battle  long ceased   between  Left     between those   govern  those Enjoying your  Would  like  drop  when   next Greece will resolve     Democracies  always better equipped  handle Does your snooty  look  strays     life Thats They  confused  blinding lights   down   dangerous Good thing Perhaps  always carry some food Times  India   able  help What Nupur Talwar deserves   fair trial  Will  ever While  differs from     kinky   very smart priorities   absolutely  should have been front page Morrison life hurts  damned sight more than Freedom quickens self  only Governments figured this they both lived happily ever actually thought  same  never   courage   Brave another amazing Surprised  many there   this wonderful land This  really something idea    stump Just  make  come    Always  pleasure hearing anything from with anything People contemplate suicide when every window  hope shuts have said this many times number less than  million  never worth crowing   keep They  rather ghastly   need nerves Game  Thrones   ultimate tribute  contemporary bloody  notorious Vyapam scam that  claimed  many From  warm chocolate pudding   crooner from this      Next time wonderful thank Orient Express   Palace  Delhi still serves  best warm chocolate pudding  this earth   Mexican crooner Launched   book     marvellous conversation with     many truths  live What  huge turnout   event  what Literature  Dont blame    those selfies turn quite like Upamanyu  stole  evening from   Incredibly Will    this    rare Hazaroon Khwaishein Amazing prolly after  shit watch them  electronic gadgets afflicted    want  people  make their  choice based  their Grew    young  watching Shambhu Mitra doing House  Enemy   People   Calcutta Mumbai where  live Even more  beef      largest exports till Curious  that That sounds Venture capital  abundant  frightfully When   last time    Beckett  watched  Kurosawa  time moves   tastes innovation ecosystem  some formal banking favourite song during  school crying    crying  freedom just  madrassas  convent  Ramkrishna Mission   options exist  citizens  choose that   sick  them Where   migrate Particularly   homes  North Kolkata which  have  forgotten Ofcourse  recall your  recall  your works agree   best    been  while since hell   always want  repair  always mess   Marine Drive   perfect Amazed that  Greek default   little impact   stock What happened   global will miss   when   goes    bubble thing   only know that  loved  after  lose Thank  Chief Justice Mohit Shah  urging restoration   golden glory  Marine Drive with   sodium vapour surprised  Tamil Stalin slapping  common  Russian namesake   worse    problem Women  really coming into their Pretty much every night there  hordes  cops scouring SoBo  catch women drunk Money   black   laws force good people    their There   ugly    Just ugly people   ugly things  their fellow dont have   anything more  Just wait could  Times  India archives   twitter There  something magical about Mumbai even though there  rascals  conmen hiding  every nook Have said  before  will    pleasure working with Given  number  times  have been flying  Delhi every week  recent  wonder   bother  live believe   most   real ones time  scrap Article  Make love free  anyone Really impressed   Love   personal only difference being    Editor Those were  days when editors happily carried points  view they disagreed Praful Bidwai   fine   wrote often   Illustrated Weekly when    often height  myth knows  most about    profile   media should access   best stories bill   what about putting  woman Just dipping into India   Charming read about   food newspaper reports that  huge haul  meow meow from  Mumbai cops   meow meow Sister Nirmala   truly worthy successor  Mother   read   passing more  obsess about black money  more  reveal  flawed   policies  corrupt  nation  move looks like everyone hates    really wants    because   spill Perfect speak  black money  Chief Economic Stop obsessing over mistakes   Start Finance Ministers have been  erudite  Yashwant    informed  well Yashwant Sinha   House Full last evening  event  felicitate   getting highest civilian thought    missed   were acquiring Whether  like  follow  twitter always  Love with That   nature would reducing default typesize from point true  wonderfully first   your Congratulations  your Rajya Sabha nomination from Would  happy     Parliament Congratulations  Bangladesh  joining   boys Lesson   Indian cricket Never under estimate your They   longer They   good  anyone they were  matured society because they were  free That Send   high would love Your Ultimately  citizens have  take charge      Rely Pretty much   fact  intend    same Sport  beyond  best team must This     proud Teaches  that even    pampered pound gorilla   tamed   tiny back what   inevitable wear  convictions that when  white  shoots black  randomly mentally   when  black  shoots white  randomly Forgive  India fans    gleeful about minnows Bangladesh hammering  last  like Especially  they Here   bright sunshine crow  your came   office today barring Dont That  shall Bengalis believe that love always blooms finally  rain  Couples  Marine Drive   Such  charming Better that than  slightest hint driver  Ready  take      first   roza that would tweet about    stayed    rain  night without catching area  Malabar Hill where     ministers Curiously SoBo    rain  least water that  absolutely  have spent  lifetime discovering Today      what your heart tells  what your conscience  take  Stay with have often wondered  they  hated  much   some countries they shoot Banning     extortion crows made  nest  themselves   survived  nightlong drenched  their crows catch That    sister took  flight  Delhi this  left Fair   building consensus Someone   Government needs  take them Some   users have lived even  Timothy advisory  come  your Lalit Modi  spent  whole life breaking Some called   Others called     will know slowly  first rays     about   city will slowly limp back   will  back    always annual date with blinding  city  ground    daughters caught  flight  Delhi what happened  Struck Want  read  epic tale    ideal Dive into  series  prince Just finished reading  advance copy   sent What  splendid told with such amazing Have  great    wonderful year will come when guys like this will face  There   limit   patience Charles another great talent    amazing generation quietly passes have Digital India with such pathetic think   well  Bobby     Bobby Pawar   tell Chhagan Bhujbal    Face    more  leaders both   have  book  poems that   written  Stuck dark clouds that cannot  Only those  fight strongly  wisely matter  grave shame that      greatest artists   time   personal second flight   many  occupancy  doubled about supporting  about whether  wrong  intervening      think battle against boredom produces  finest works world   split between Congress   There  also people  think always baffled   magic  mysteries   amazing twists  turns things very Older people  through  glass Have  wonderful  Aaditya   best year  your sure   mind always rules Perhaps  could change that  Ogle Between eating unhealthy  banning food   whole world wonder  trust these test reports Just  case youy missed   blog Taming  enemy guilty must   after people  away doing  much statues have already been pulled including  favourite Kala Ghoda Time   statutes proxy     awful Neither will  Delhi will Glad   courage  take   crackpot Yogi  swear  yoga   want  force that  been flogged  maybe  should  look   other stuff     Could surprise running from  wrong really owns Does  really   owns NDTV owns pretty much everything there such  delight  watch  what  amazing column this morning  Mumbai Taming  enemy within Very   about   that  resisted that Persistence  what  live only pointing  that  live   universe love pani puris   street food guess   have missed   Notting Hill  also about leap Developers have  most heartless ways  clear  slums there  already more  cards than people   more twitter  than people actually Cinema   always about Strictly  about that leap experience    will  brainless Enjoy  Cote  most  place   whole world     finest setting   heist rights  with  Times  They alone  publish  republish wonderful  hear that closed down   late publisher   gave away   copies over love  fact that  head drink  occasional     carbide ripe mangoes  veggies laced with  will  sneer travel  much that    Platinum Club fully appreciate Deep respect   Indian woman wherever think strong women make India wonderful  know cattle class feeling  local aircrafts flying Very Heard charming   standard elevator music  hears congratulations  turning around  ailing airline with  whole  bunch  small  very smart best     confident your film will   huge What  charming   announce your first Thank Rangita   join   your have  good  will turn first SpiceJet Great  Fine served Excellent soft Polite House Moksh shut Bush With   landmarks gone  have  reason    Breach Bush   love   Breach Candy   same without will miss  will  cats  shared  food  provided  protective cover   human That   requires amazing Would  like    your phone predicted Sawyer would  during  blind   bang  every time  thought  smelt rain minister   Chandra Shekhar government  wrongly briefed They actually come have more send them guess that  Everything else Invisible   policy That   moot What    where  come from  never  different will discover your where  called Only    proud  being middle class will  understand  true True  last movie  that time  Hazaaron Khwaishein have  total cannot  wiped     That What bigger gamble  there than wanting  share your life with another People walk      middle class Invisible Middle  column this morning  Mumbai that  Ogden advice keep your marriage brimming With love   loving  Whenever admit  Whenever shut except  certain cases that  usually  learn  live without Time  allow board meetings   held through conference calls    want  bring   digital  need simpler Bharat Ratna  Naipaul   more deserving than some  have death  John  brought magic  makes      death  Ogden  brought magic What  wonderful Reminds    first time   when Saraansh went   What that  what  called Lounge   favourite  more  mood  memories than Nothing more boring than political terribly impressed   food anywhere   star food  usually very Animal experimentation must that   good then there  cracked guys  just pick Women gamble  much  Germaine Greer once simply because their instinct  gambling  satisfied Certainly Bengalis  find sweets Ofcourse they   luckily  evidence till date shows that they talk     sleep There   distinct difference between  opinion   call usually  Animal lovers ultimately become vegetarians  have wrote  filed   application      Padma   turned down That would  expecting disagree with   surely     right   opinion however stupid   sound really  most incredible love poem Incidentally talking bong  Satyajit  often spoke   dead father through  Bengali waiting staff touch   have dangerous consequences  Strauss Kahn Minnie  what     these found this translation  mine  Banalata have translated many   Banalata   posted here   greatest love poem ever thought  were    Mumbai today Till they come back  haunt amazing side effects   internet  happening  India     know Wonderful work  Mowgli looks speechless   Would love  have  print   could spare have  cover  that   rather       find rather nice  presume took This   important Will change  attitude    corruption subverts take advantage    dictionary   sounds  other such High view  good roads  pavements being  fundamental right will seriously impact   municipalities Cleaning    fine idea   whole   young entrepreneurs  professionals   shifting abroad  avoid  onerous Those  grieve that didnt    Laszlo Krasnahorkai  author  cant escape this  Every  must watch this Usually they  apart  melody  make everything heard   Taylor scream  lungs   some weird Days later  figured    favourite Carpenter that Hearing great stuff about what does  some great classics kills While there    dying need  make  songs this There could   online business  fencing Dubai  other   huge hoardings   Pharrell Surprised they Beautiful white flower against  Thank Actually Bollywood came from  recall  evening with  Kapoor when  told  immaculate  about Will  interesting     horse gifted    Mongolian  goes   toshakhana  lands forced That    list Sudhir sensibility   closest  Chameli forgetting Satyajit under rated magnum Shatranj  They were  Bengali films  whatever their Since   raised  middle finger  maybe  should learn  face truth     finest Everything else follows with  finally proved   carry    make flight with just before  said this   Bangla film made favourite Morrison line though  here gets   inspires   prove guess  followed  Morrison     worst mistakes   life were Allen Ginsberg taught   Hash with anything    cemetery   reciting Govts fool  common There   prestigious award that authors from dont  shortlisted Naveen Kishore must   coolest publisher quite figure what earthly reason there     different Govts  each    hide  Netaji like coke   figure  Barcelos  customise  with kaala hash with because  freedom    distinguishing actually getting    always Adani  more  live Quoting  delightful Under  exploits Under  precisely think   clever step  embarrass Groucho said  Politics     looking  finding  diagnosing  applying wrong Leno said  Politics  Hollywood  ugly that  have spent  whole life defending  right  creative Mine  well many left   openly vibrant nightlife enhances  magic   city   charming subculture   popular feel seriously      much Surely  poet  creative liberty  lend  voice   historical Gandhi Wanna make  gotta  ready   rough disapprove   that   wish  well   Governorship  believe every    right Bombay Velvet tells   great movie waiting   made   real nightlife   Will  more thrilling than Bombay Velvet made  look   Golden fabled nightclub    this  what think    wise order  saves taxpayers dogs rescued from  Would urge    assist Shakuntala Majumdar Thane SPCA  finding homes think  very brave  engage with     easy What  charming   poems come together wonderfully  touch   came  last another landmark judgement  Supreme  more photos  ministers  bureaucrats  Govt Only President That   hope Every        small prayer   wherever    pray   recognizes Rahul Gandhi  joined Some access  Congressmen court  announced  Time  leave Salman   family  come  terms with  decide   next Technically They have been releasing Passport  packed Only  service centre  existence  Vile they pick   Totaly film every film maker lives life with fingers meant  directions that scientific research often takes  often proved   based  wrong  false Much    like  deny science  this awful habit  invariably going laughed  guts  watching    packed Eros   sunday post humblest crime reporter  mean streets  give  Dawood exact address   latest phone terrific More power   hotter know where Dawood Ibrahim just pick     Mumbai police  will give   exact When  profiled Dawood  origins  interviewed      knew exactly where  where have known  many years     have  fortitude  face  destiny Sorry    corrected Arun interview  with Karan   Jaitley interview passed away some years  exile from  land  loved   great someone write  book like  Outsider     sure Ranbir will back  launched  last book Every lost young  identifies with  entire generation They also loved Camus Arun Shourie raised very pertinent points   Arnab came back with very pertinent replies   Arnab they still  real bhetki   sweet water   farmed That  very generous       best  those  work canvas  legendary adman Freddy Birdy What   with these lovers  Marine Just   many cuddling   scorching Even  protect them from this Read somewhere that  partners Will someone please tell  that petunias wilt  scorching summer just done replant  Marine Drive dividers Wanna free   front   India  Marine Drive nonstop road diggers have punctured  huge water Fountain flowing Compare this  with  much loved choice   respect Compete Compete Merit   only free  must choose Under very Media must  take  must simply stay with Please stop this bandh  helps  Only  poor  less have given Life drags  where  wants underage  more   still have   with Good  favourite cartoonist  Someone mailed   copy    other After will   town most welcome     have  patience  find charming    Pradeep   Chief    amazing body Collecting trivia     most exciting experiences    have done grew  reading  Weekly    public reading Every Information overload kills  excitement   secret rediscovered     short story  Satyajit   other Translated  which   published Much   translations were published    trying hard  collect information does anyone look back  remember anything    about instant They   busy making money these Research   from even  Everyone wants    where much effort    always busy doing  things  look back book  translations  poems years   have  copy   have some Reminds    Shakti Chattopadhyay poem   translated years    anthology   University What  pleasure  rediscover   translation  Kaifi Azmi   wonderful friend Delighted  know your second book  Stillness  launched   sure  will   exciting  your think  Boko Haram will have  opinion Ratan Tata  merely stating that    changed  point  Online works just love    love  love  right things that good people  parties while      return   more civil  regime where   fears Time  stop being  election mode   back     Minimum Maximum That anything   about this good     instantly compared  Rahul Gandhi  Arvind    auto Almost  year into India  longer looks that enamored   great  subjects whisper among essence  politics lies  changing  world around    light  what Heard  about  release  second book  Wonderful   that some political leaders have  life beyond Editors  their duty  move Life takes Money   strongest weapon   hands published  first ever cover story  Kanchi Alas  much older than    Bengal  call  elders wish Ford Foundation would fund They have great repute Thank   fought   decade against  odds  then walked Life   journalist   easy  those only  Only  very  fear their   remind Relax Fund raising from Russian oligarchs Journalists  fight  brute might   political  upto   lost   Patnaik   battle inspired have  look through   archives never  along with Manmohan  your argument  clearly often offers clues  what really really disappointed with   perfect example   fine show gone they  expecting  common   declare their disappointed with  that stopped watching Indira Gandhi kept blaming  media    problems     where that Modi needs  stop doing cool   cover stories   Sunday    Illustrated Rajneesh  great That  also  Congress must rise above      regain some Nothing     Remember Virtue defines  that suspect    lazy reporter  want  visit   once called Brand   threatened  brand profile  Raghavendra Rathore this morning which introduced   Founder  Brand Raghavendra stunningly beautiful Agree   some  your colleagues including  hugely talented Rohit asked  pictures  spring  Here This  need  needs instant things right  stop suicides  villages created   position  atomic  Modi goes    notches   Holding back  unpopular decision   sure sign    forms there where injustice Common  abiding citizens  most Because they  hugely outnumbered   breakers Yeah  they laugh cool  talk  popular  ordinary that sounds quite   only  could afford Soft targets  easy  goes after  real  They   even part    paying Pain blows  mind harder than Christian Grey taught    Andre Rahul Gandhi admirer  this  clearly barber asks    number  does    going away  South Pacific That   sure   most likely with That Govt  wants  snoop into  private lives  every     payers chest thumping nationalist   agree places  tourism  world  only  preserved them What surprises   that   notice  beauty  Spring  They jump from Winter   saying Sounds   when they come after  like  wolf True   great   loves making  when  makes   film     they there  though  diminishing truth about what   cannot When  have  most coveted    nation  must learn  accept Above  would     cowardice   Prime Ministers should  above Manohan Singh  misled   travesty   knew Soon  will outsell  Bible  Chetan guess that explains Raja   villain  Manmohan  misinformed  that ever None   would Gossip protects Ford Sounds   like  Indira Gandhi years when   monsoons Sports Reconstitute  Paralympic Committee  India with What   doing always Politicians fear  like students  just rats   Satisfying  whims  caprices that When will   Ghar Wapasi Didi  waiting    fight  corporation correct thing     always  most  thing  This    best time   after favourite  remember Aravind Adiga looking desperately   address  couple  years Importance   column this morning   Mumbai Mirror This obsession with stability  destabilised    need   needed They exist    longer They have been marginalised    Business wrong   first Actually  Maybe   plain will know relationship with Kolkata  kept coming Wonderful Great kept coming back showed  Emergency   right light   that Every conscientious Indian must sign this  protect    rights great story about some great guys doing  great Congratulations just  proved last evening that   nothing   with playing cricket   ought hope  poor   arrested  using  drone   security concerns Only  priceless  would  against Tasneem Mehta deserves  highest  brickbats  making come alive  true  remain just  boring That  Very touching think      last  photographs  Rabindranath Tagore before  passed midway   missed      gharyals  Chambal   Bedi brothers  photograph upstream  more they   film says  polluted waters from other rivers   poisoning  gharyals Apparently they  getting some mysterious kind  arthritis  dying    says very moving film   gharyals   Chambal river   they     Sabha will have write   should  able  help Write    sure they sneaked into Leicester prison  meet those  tried  kill Rajiv Gandhi Nirav  told   showed They   very important love this portrait   best work till think  reason   French always valued culture over   British chose Lovely Thank   sending these British food  always Thats  they  quickly adopted other cuisines  enhanced their Just ribbing Something rare Quite Sounds familiar    memory serves  right  translated that   write does   there  used  drive last four lines  that incredible   recall follow  bottom   your unconstraining persuade    death remember  time  were  Kolkata  launch  book  poems  years    truly memorable remember that from Unfaithful   took    thinking      girl prettiest places   whole Went there years   stayed with Methinks that twitter  brought    funniest Just  word  Even  good Pope suggests that  ought  hang  with young Uncle beckon  from time  This   city  grew  fell  love   first wrote  first what   doing with  many young must   campaign this Banksy  Plastic Jesus trolls Whatever anyone   about  deserves  highest accolade   Yemen rescue should Would have loved     only   told   launching time favourite   hear could   reworking  Sounds Realised yesterday that  makes such fine Bollywood films actually lives  Salt Lake  never considered mess with   inauguration   love   baishakhis  Alias  Flew through  last Great  much  changed  women while much  Being  woman must have  strong nationwide  against illegal forced donations sought  admissions  education never  father taught  never  pick   weak    those  have true  Everyone knows  views  animal very House That   remember Some seasons Scandal began well  deteriorated sharply   last This season Interesting   Dibakar Banerjee trying  rediscover  classic vamp  with   stunning Anguri becoming  paranoid  case just sound Where does security   voyeurism Tough    brilliant  Loved     unibrow  Calcutta Thank  Quite  charming more things  more they remain Good  every word  nuanced  political considerations  lexicon   longer  right reference began  read  last What  wonderful Still savouring Never knew  wrote Pune   beautiful university town  anxious    business  they  building like catch fake hunt down fight   comedy bikinis When enough privileged people have   becomes really    Samovar would  need  memorial   Narasima   really have  shortage Number  multimillionaires growing fastest  Wonder  thing  They build better quality flats there than Medical malpractice  becoming  huge nuisance  Unnecessary Illegal clinical Over Over Private players have transformed  aviation    them have  shot  Better better Agree with  panel that time private players began   trains  produce wagons What stupid logic  Only  rich staying  star hotels  drink ripped into fabled Gujarat never said India will   said  leaders lead   then    find   with column this morning     Modi Lovely Have  great India  always looking   sporting  Govt give have  fine surname Congratulations    RTed friend publisher Naveen Kishore  Calcutta   authors    Booker shortlist this That     Holmes serials have created  added  idiosyncrasies These   books  Elementary   outstanding serial serials   better than Once    will Read  fascinating  Conan Doyle accounts  those  missing years after  fell   There  three great Luckily    missing years  spent    monasteries some fine from John Gielgud  Stewart Granger  Christopher Plummer  Michael Caine  Roger Moore have also played never knew there were  many Sherlock fans  More  never knew  many people here remember Jeremy Brett Sounds superb  trust  find Where told   that kicks even know  existed   boxed Will     hands surprised  think  thought   till Cumberbatch brought  entirely  spin know Roger John Stewart Granger Christopher Plummer  Michael Caine have  played Talking  while  prefer Benedict Cumberbatch  Robert Downey  remember Jeremy Brett from Learn  ignore those  will  ignore Settled Like living      wellness centre coming When  good crosses  line  become that book Benedict Cumberbatch  outclasses best poor guys  just trying their best    what most Another must defends thoughts Life without trolls would Mumbai   states have legalized troll Just  fleeting      used  once like  Muffler Just finished reading  Thought    title  require necessary   remove Prashant Bhushan  Yogendra lose Medha  jury  still Watching last evening    such  powerful   last years   London Needless     very disappointed with   things  going While  talk    Yoko lured away from behaving like  bunch     taught these guys    sorry instead  trading silly charges Inhibitions    weak hearted wonderful  know Journalism  very exciting  those middle finger   those  especially  used  harass  intimidate those  spoke their loved   delighted  find that  director    National award Much Congratulations   National young Shashi   Merchant    incredibly handsome  that Just looking   With Steve Jobs somehow  emphasis  design  gone from like    easily exploited  corrupted  those  wield power over first  Shashi Kapoor when     came with  touring Kendalls   Wonderful What   black Section     draconian   been struck down   Supreme Restores  faith merely   particular   exactly   father nurtured  mother disciplined problem with  State  that  wants     wants  discipline     mother  nurture Absolutely Unimplementable laws  backbone   whole illegal system strives  unimplementable stock market   racing      throws This  like saying eating causes Obesity leads Betting destroy sporting Succumbing  corruption them curious   make such   deal about   illegal that Your best column impossibly   know  women   much more Loved Nupur write  being Single Again  Since    around thought  would tell baked broccoli with khus khus fantasy   more more moving than   history still truth   adore  coming   speaking about Where will  find ephemeral quality    sudden appearance enchants   knows  many other lives were born with glitter  your available  Would love many   friends   battling depression  watch Watched  heroic open    last evening   most memorable show     long will learn  play  like this charming flautist  also strolls down  street outside  sunday  makes  rest   week worth living pheriwala  there   calling  figure  what  sells   love hearing  call every sunday perceptional There  spin built into that  important   claim Like  things  politics  Some  some  left will Ideology comprehend spin when spin wraps around  like  warm embrace guess   That also makes   differentiator Pretty  industries  spin have taken charge   witless Crossword   part   city sells soft toys   never heard that every   politics obviously know something   unaware that  know   have been  journalist  three know   background that  judge just  interested   real histories    attracted only Your  card  photo   phone    pimple  your     declared each time Most rich   Mumbai began  very very ordinary This  what makes Much  fabled  light district  become jewellery  buys  much Always  went with  favourite people shut down    over after Irani cafes  shutting many tragedies rolled into enough   have  friend  eats  biryanis together  lunch   Oberoi cafe Very  fine story    Mumbai Dining    Deccan Queen retired Give your mother  love   love    years  Mumbai would  have been  same without shall continue winning every should never have been shut    much  institution   Jehangir  Gallery Actually very keen have known since  days  Sharpest mind   creativity grave miscarriage    mock  fact that wrong Very serious Spin doctoring  entered every aspect They have  They feed Aadhar   wasteful expenditure   Totally Even Britain tried gave    ever dont  hand  placard from your neck    Government Easily Finally even  Govt thanks   Supreme Court that   what happens   money wasted Ujjwal confession that  lied about Kasab asking  mutton biryani proves  simple Spin   order Kasab asking  mutton biryani   Prosecutor Ujjwal Nikam confesses  fabricating     feels  compassion heart  always with Love maths Will Loved  takes  back   swinging certainly have  point Opinions have taken over from hardcore cannot deny   rightful place   call Gandhi  British agent  downright fact  Satyagraha   worked   worked  World respected    tool against colonalism think  will    heart  with have contact Wanted well  making     connect with wear leather  wear sneakers  running column this morning  Mumbai  Assassins Return nice  hear from Where   stay these  touch with Shashi That would call  Coke  ever feel embarrassed  anyone misunderstood attribute  malice that which   adequately explained also jump  people  express their opinions however foolishly worded they have fought  this strongly believe  freedom  media   also strongly recommend  read this India wins  this rate  will bring back Stupidity could well     inability  speak Sharad Yadav strike Lovely piece    know more about Music   greatest     were   born again  would love   born  musician should anyone  allowed  exercise power over what  wear  believe  right  mine have stood   freedom   respect have become  spoilsport Anything that    could  love  instantly  stop shut Sharad Yadav    manner  speaking  coarse   hardly  reason  lynch Link Juhu where  trees have been stripped  chopped Only stumps There   time when  minute ardent kiss could still     certificate from desecration  Marine Drive wasnt enough with those stupid  white  they have gone  killed  Flyover with Whoever     cancellation   Jerry Seinfeld   Mumbai   colossal  really embarrasses Many have done    fact settled down  India Actually    does mean preaching integrity like   through such embarrassment   only destroy  confidence   business Shameful Thank  someone said   Delhi Hight Contrary views make  anti They make   throbbing Wonderful High Court decision  Greenpeace activist Priya  shot     dissent Bengaluru cops make  lookbook  Long tattoos    picked    Which century   live Congress looted    disappointed       What More More More horse What  idea What  fantastic conversion turns  world  becoming  better Amazing jewel heist   motorway  Reminiscent   famous Pink Panther Theme   next Hollywood Bollywood Pharrell Williams  Robin Thicke fined million  ripping  Marvin song  Blurred Ireland loses India   Zealand  best teams till </textBase64></texts><readCalls readApiKey="d39gXR52YW2h"><classify classifierName="myers briggs judging function" id="call_1" textId="text_1" username="prfekt"/><classify classifierName="myers briggs attitude" id="call_2" textId="text_1" username="prfekt"/><classify classifierName="myers briggs lifestyle" id="call_3" textId="text_1" username="prfekt"/><classify classifierName="myers briggs perceiving function" id="call_4" textId="text_1" username="prfekt"/></readCalls></uclassify>